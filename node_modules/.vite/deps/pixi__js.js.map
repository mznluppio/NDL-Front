{
  "version": 3,
  "sources": ["../../@pixi/mixin-cache-as-bitmap/src/index.ts", "../../@pixi/mixin-get-child-by-name/src/index.ts", "../../@pixi/mixin-get-global-position/src/index.ts", "../../@pixi/filter-alpha/lib/alpha.frag.mjs", "../../@pixi/filter-alpha/src/AlphaFilter.ts", "../../@pixi/filter-blur/src/generateBlurFragSource.ts", "../../@pixi/filter-blur/src/generateBlurVertSource.ts", "../../@pixi/filter-blur/src/BlurFilterPass.ts", "../../@pixi/filter-blur/src/BlurFilter.ts", "../../@pixi/filter-color-matrix/lib/colorMatrix.frag.mjs", "../../@pixi/filter-color-matrix/src/ColorMatrixFilter.ts", "../../@pixi/filter-displacement/lib/displacement.frag.mjs", "../../@pixi/filter-displacement/lib/displacement.vert.mjs", "../../@pixi/filter-displacement/src/DisplacementFilter.ts", "../../@pixi/filter-fxaa/lib/fxaa.frag.mjs", "../../@pixi/filter-fxaa/lib/fxaa.vert.mjs", "../../@pixi/filter-fxaa/src/FXAAFilter.ts", "../../@pixi/filter-noise/lib/noise.frag.mjs", "../../@pixi/filter-noise/src/NoiseFilter.ts", "../../pixi.js/src/filters.ts", "../../@pixi/events/src/EventTicker.ts", "../../@pixi/events/src/FederatedEvent.ts", "../../@pixi/events/src/FederatedMouseEvent.ts", "../../@pixi/events/src/FederatedPointerEvent.ts", "../../@pixi/events/src/FederatedWheelEvent.ts", "../../@pixi/events/src/EventBoundary.ts", "../../@pixi/events/src/EventSystem.ts", "../../@pixi/events/src/FederatedEventTarget.ts", "../../@pixi/accessibility/src/accessibleTarget.ts", "../../@pixi/accessibility/src/AccessibilityManager.ts", "../../pixi.js/lib/index.mjs", "../../@pixi/compressed-textures/src/const.ts", "../../@pixi/compressed-textures/src/loaders/detectCompressedTextures.ts", "../../@pixi/compressed-textures/src/resources/BlobResource.ts", "../../@pixi/compressed-textures/src/resources/CompressedTextureResource.ts", "../../@pixi/compressed-textures/src/parsers/parseDDS.ts", "../../@pixi/compressed-textures/src/parsers/parseKTX.ts", "../../@pixi/compressed-textures/src/loaders/loadDDS.ts", "../../@pixi/compressed-textures/src/loaders/loadKTX.ts", "../../@pixi/compressed-textures/src/loaders/resolveCompressedTextureUrl.ts", "../../@pixi/extract/src/Extract.ts", "../../@pixi/prepare/src/CountLimiter.ts", "../../@pixi/prepare/src/BasePrepare.ts", "../../@pixi/prepare/src/settings.ts", "../../@pixi/prepare/src/Prepare.ts", "../../@pixi/prepare/src/TimeLimiter.ts", "../../@pixi/spritesheet/src/Spritesheet.ts", "../../@pixi/spritesheet/src/spritesheetAsset.ts", "../../@pixi/text-html/src/HTMLTextStyle.ts", "../../@pixi/text-html/src/HTMLText.ts"],
  "sourcesContent": ["/// <reference path=\"../global.d.ts\" />\nimport { BaseTexture, Matrix, Rectangle, RenderTexture, Texture, utils } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\n\nimport type {\n    ICanvasRenderingContext2D,\n    IPointData,\n    IRenderer,\n    MaskData,\n    MSAA_QUALITY,\n    Renderer,\n} from '@pixi/core';\nimport type { Container, IDestroyOptions } from '@pixi/display';\n\n// Don't import CanvasRender to remove dependency on this optional package\n// this type should satisify these requirements for cacheAsBitmap types\ninterface CanvasRenderer extends IRenderer\n{\n    canvasContext: {\n        activeContext: ICanvasRenderingContext2D;\n    }\n}\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = null;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: IRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions | boolean) => void;\n    public originalMask: Container | MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n     * but can be overriden for performance. Lower values will reduce memory usage at the expense\n     * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n     * @member {number|null} cacheAsBitmapResolution\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapResolution: {\n        get(): number | null\n        {\n            return this._cacheAsBitmapResolution;\n        },\n        set(resolution: number | null): void\n        {\n            if (resolution === this._cacheAsBitmapResolution)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapResolution = resolution;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render at the new resolution\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n     * sample count is used.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n     * @member {number|null} cacheAsBitmapMultisample\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapMultisample: {\n        get(): MSAA_QUALITY | null\n        {\n            return this._cacheAsBitmapMultisample;\n        },\n        set(multisample: MSAA_QUALITY | null): void\n        {\n            if (multisample === this._cacheAsBitmapMultisample)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapMultisample = multisample;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render with new multisample\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snapshot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData?.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(new Rectangle(), true);\n\n    // add some padding!\n    if (this.filters?.length)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    const resolution = this.cacheAsBitmapResolution || renderer.resolution;\n\n    bounds.ceil(resolution);\n    bounds.width = Math.max(bounds.width, 1 / resolution);\n    bounds.height = Math.max(bounds.height, 1 / resolution);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution,\n        multisample: this.cacheAsBitmapMultisample ?? renderer.multisample,\n    });\n\n    const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    renderer.framebuffer.blit();\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: IRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData?.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(new Rectangle(), true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.canvasContext.activeContext;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    const resolution = this.cacheAsBitmapResolution || renderer.resolution;\n\n    bounds.ceil(resolution);\n    bounds.width = Math.max(bounds.width, 1 / resolution);\n    bounds.height = Math.max(bounds.height, 1 / resolution);\n\n    const renderTexture = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution\n    });\n\n    const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.canvasContext.activeContext = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n * @private\n * @method\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n * @private\n * @method\n * @returns {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n * @private\n * @method\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options?: IDestroyOptions | boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n", "/// <reference path=\"../global.d.ts\" />\nimport { Container, DisplayObject } from '@pixi/display';\n\n/**\n * The instance name of the object.\n * @memberof PIXI.DisplayObject#\n * @member {string} name\n */\nDisplayObject.prototype.name = null;\n\n/**\n * Returns the display object in the container.\n *\n * Recursive searches are done in a preorder traversal.\n * @method getChildByName\n * @memberof PIXI.Container#\n * @param {string} name - Instance name.\n * @param {boolean}[deep=false] - Whether to search recursively\n * @returns {PIXI.DisplayObject} The child with the specified name.\n */\nContainer.prototype.getChildByName = function getChildByName<T extends DisplayObject = DisplayObject>(\n    name: string,\n    deep?: boolean,\n): T | null\n{\n    for (let i = 0, j = this.children.length; i < j; i++)\n    {\n        if (this.children[i].name === name)\n        {\n            return this.children[i];\n        }\n    }\n\n    if (deep)\n    {\n        for (let i = 0, j = this.children.length; i < j; i++)\n        {\n            const child = (this.children[i] as Container);\n\n            if (!child.getChildByName)\n            {\n                continue;\n            }\n\n            const target = child.getChildByName<T>(name, true);\n\n            if (target)\n            {\n                return target;\n            }\n        }\n    }\n\n    return null;\n};\n", "/// <reference path=\"../global.d.ts\" />\nimport { Point } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\n\n/**\n * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n * @method getGlobalPosition\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n *  nice performance boost.\n * @returns {PIXI.Point} The updated point.\n */\nDisplayObject.prototype.getGlobalPosition = function getGlobalPosition(point: Point = new Point(), skipUpdate = false): Point\n{\n    if (this.parent)\n    {\n        this.parent.toGlobal(this.position, point, skipUpdate);\n    }\n    else\n    {\n        point.x = this.position.x;\n        point.y = this.position.y;\n    }\n\n    return point;\n};\n", "var fragment = `varying vec2 vTextureCoord;\r\n\r\nuniform sampler2D uSampler;\r\nuniform float uAlpha;\r\n\r\nvoid main(void)\r\n{\r\n   gl_FragColor = texture2D(uSampler, vTextureCoord) * uAlpha;\r\n}\r\n`;\r\nexport {\r\n  fragment as default\r\n};\r\n//# sourceMappingURL=alpha.frag.mjs.map\r\n", "import { defaultVertex, Filter } from '@pixi/core';\nimport fragment from './alpha.frag';\n\n/**\n * Simplest filter - applies alpha.\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n * @memberof PIXI\n */\nexport class AlphaFilter extends Filter\n{\n    /**\n     * @param alpha - Amount of alpha from 0 to 1, where 0 is transparent\n     */\n    constructor(alpha = 1.0)\n    {\n        super(defaultVertex, fragment, { uAlpha: 1 });\n\n        this.alpha = alpha;\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     * @default 1\n     */\n    get alpha(): number\n    {\n        return this.uniforms.uAlpha;\n    }\n\n    set alpha(value: number)\n    {\n        this.uniforms.uAlpha = value;\n    }\n}\n", "interface IGAUSSIAN_VALUES\n{\n    [x: number]: number[];\n}\nconst GAUSSIAN_VALUES: IGAUSSIAN_VALUES = {\n    5: [0.153388, 0.221461, 0.250301],\n    7: [0.071303, 0.131514, 0.189879, 0.214607],\n    9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],\n    11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],\n    13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],\n    15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448],\n};\n\nconst fragTemplate = [\n    'varying vec2 vBlurTexCoords[%size%];',\n    'uniform sampler2D uSampler;',\n\n    'void main(void)',\n    '{',\n    '    gl_FragColor = vec4(0.0);',\n    '    %blur%',\n    '}',\n\n].join('\\n');\n\nexport function generateBlurFragSource(kernelSize: number): string\n{\n    const kernel = GAUSSIAN_VALUES[kernelSize];\n    const halfLength = kernel.length;\n\n    let fragSource = fragTemplate;\n\n    let blurLoop = '';\n    const template = 'gl_FragColor += texture2D(uSampler, vBlurTexCoords[%index%]) * %value%;';\n    let value: number;\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        value = i;\n\n        if (i >= halfLength)\n        {\n            value = kernelSize - i - 1;\n        }\n\n        blur = blur.replace('%value%', kernel[value].toString());\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    fragSource = fragSource.replace('%blur%', blurLoop);\n    fragSource = fragSource.replace('%size%', kernelSize.toString());\n\n    return fragSource;\n}\n", "const vertTemplate = `\n    attribute vec2 aVertexPosition;\n\n    uniform mat3 projectionMatrix;\n\n    uniform float strength;\n\n    varying vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 inputSize;\n    uniform vec4 outputFrame;\n\n    vec4 filterVertexPosition( void )\n    {\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n    }\n\n    vec2 filterTextureCoord( void )\n    {\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position = filterVertexPosition();\n\n        vec2 textureCoord = filterTextureCoord();\n        %blur%\n    }`;\n\nexport function generateBlurVertSource(kernelSize: number, x: boolean): string\n{\n    const halfLength = Math.ceil(kernelSize / 2);\n\n    let vertSource = vertTemplate;\n\n    let blurLoop = '';\n    let template;\n\n    if (x)\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);';\n    }\n    else\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);';\n    }\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        blur = blur.replace('%sampleIndex%', `${i - (halfLength - 1)}.0`);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    vertSource = vertSource.replace('%blur%', blurLoop);\n    vertSource = vertSource.replace('%size%', kernelSize.toString());\n\n    return vertSource;\n}\n", "import { CLEAR_MODES, Filter } from '@pixi/core';\nimport { generateBlurFragSource } from './generateBlurFragSource';\nimport { generateBlurVertSource } from './generateBlurVertSource';\n\nimport type { FilterSystem, RenderTexture } from '@pixi/core';\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n * @memberof PIXI\n */\nexport class BlurFilterPass extends Filter\n{\n    public horizontal: boolean;\n    public strength!: number;\n    public passes!: number;\n\n    private _quality: number;\n\n    /**\n     * @param horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n     * @param strength - The strength of the blur filter.\n     * @param quality - The quality of the blur filter.\n     * @param {number|null} [resolution=PIXI.Filter.defaultResolution] - The resolution of the blur filter.\n     * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(horizontal: boolean, strength = 8, quality = 4, resolution = Filter.defaultResolution, kernelSize = 5)\n    {\n        const vertSrc = generateBlurVertSource(kernelSize, horizontal);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.horizontal = horizontal;\n\n        this.resolution = resolution;\n\n        this._quality = 0;\n\n        this.quality = quality;\n\n        this.blur = strength;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    public apply(\n        filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES\n    ): void\n    {\n        if (output)\n        {\n            if (this.horizontal)\n            {\n                this.uniforms.strength = (1 / output.width) * (output.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / output.height) * (output.height / input.height);\n            }\n        }\n        else\n        {\n            if (this.horizontal) // eslint-disable-line\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.width) * (filterManager.renderer.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.height) * (filterManager.renderer.height / input.height); // eslint-disable-line\n            }\n        }\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clearMode);\n        }\n        else\n        {\n            const renderTarget = filterManager.getFilterTexture();\n            const renderer = filterManager.renderer;\n\n            let flip = input;\n            let flop = renderTarget;\n\n            this.state.blend = false;\n            filterManager.applyFilter(this, flip, flop, CLEAR_MODES.CLEAR);\n\n            for (let i = 1; i < this.passes - 1; i++)\n            {\n                filterManager.bindAndClear(flip, CLEAR_MODES.BLIT);\n\n                this.uniforms.uSampler = flop;\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n\n                renderer.shader.bind(this);\n                renderer.geometry.draw(5);\n            }\n\n            this.state.blend = true;\n            filterManager.applyFilter(this, flop, output, clearMode);\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n    /**\n     * Sets the strength of both the blur.\n     * @default 16\n     */\n    get blur(): number\n    {\n        return this.strength;\n    }\n\n    set blur(value: number)\n    {\n        this.padding = 1 + (Math.abs(value) * 2);\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quality bluring but the lower the performance.\n     * @default 4\n     */\n    get quality(): number\n    {\n        return this._quality;\n    }\n\n    set quality(value: number)\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n", "import { CLEAR_MODES, Filter } from '@pixi/core';\nimport { BlurFilterPass } from './BlurFilterPass';\n\nimport type { BLEND_MODES, FilterSystem, RenderTexture } from '@pixi/core';\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n * @memberof PIXI\n */\nexport class BlurFilter extends Filter\n{\n    public blurXFilter: BlurFilterPass;\n    public blurYFilter: BlurFilterPass;\n\n    private _repeatEdgePixels = false;\n\n    /**\n     * @param strength - The strength of the blur filter.\n     * @param quality - The quality of the blur filter.\n     * @param {number|null} [resolution=PIXI.Filter.defaultResolution] - The resolution of the blur filter.\n     * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength = 8, quality = 4, resolution = Filter.defaultResolution, kernelSize = 5)\n    {\n        super();\n\n        this.blurXFilter = new BlurFilterPass(true, strength, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurFilterPass(false, strength, quality, resolution, kernelSize);\n\n        this.resolution = resolution;\n        this.quality = quality;\n        this.blur = strength;\n\n        this.repeatEdgePixels = false;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void\n    {\n        const xStrength = Math.abs(this.blurXFilter.strength);\n        const yStrength = Math.abs(this.blurYFilter.strength);\n\n        if (xStrength && yStrength)\n        {\n            const renderTarget = filterManager.getFilterTexture();\n\n            this.blurXFilter.apply(filterManager, input, renderTarget, CLEAR_MODES.CLEAR);\n            this.blurYFilter.apply(filterManager, renderTarget, output, clearMode);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n        else if (yStrength)\n        {\n            this.blurYFilter.apply(filterManager, input, output, clearMode);\n        }\n        else\n        {\n            this.blurXFilter.apply(filterManager, input, output, clearMode);\n        }\n    }\n\n    protected updatePadding(): void\n    {\n        if (this._repeatEdgePixels)\n        {\n            this.padding = 0;\n        }\n        else\n        {\n            this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n        }\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     * @default 2\n     */\n    get blur(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blur(value: number)\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quality bluring.\n     * @default 1\n     */\n    get quality(): number\n    {\n        return this.blurXFilter.quality;\n    }\n\n    set quality(value: number)\n    {\n        this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     * @default 2\n     */\n    get blurX(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blurX(value: number)\n    {\n        this.blurXFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     * @default 2\n     */\n    get blurY(): number\n    {\n        return this.blurYFilter.blur;\n    }\n\n    set blurY(value: number)\n    {\n        this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the blendmode of the filter\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this.blurYFilter.blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blurYFilter.blendMode = value;\n    }\n\n    /**\n     * If set to true the edge of the target will be clamped\n     * @default false\n     */\n    get repeatEdgePixels(): boolean\n    {\n        return this._repeatEdgePixels;\n    }\n\n    set repeatEdgePixels(value: boolean)\n    {\n        this._repeatEdgePixels = value;\n        this.updatePadding();\n    }\n}\n", "var fragment = `varying vec2 vTextureCoord;\r\nuniform sampler2D uSampler;\r\nuniform float m[20];\r\nuniform float uAlpha;\r\n\r\nvoid main(void)\r\n{\r\n    vec4 c = texture2D(uSampler, vTextureCoord);\r\n\r\n    if (uAlpha == 0.0) {\r\n        gl_FragColor = c;\r\n        return;\r\n    }\r\n\r\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\r\n    if (c.a > 0.0) {\r\n      c.rgb /= c.a;\r\n    }\r\n\r\n    vec4 result;\r\n\r\n    result.r = (m[0] * c.r);\r\n        result.r += (m[1] * c.g);\r\n        result.r += (m[2] * c.b);\r\n        result.r += (m[3] * c.a);\r\n        result.r += m[4];\r\n\r\n    result.g = (m[5] * c.r);\r\n        result.g += (m[6] * c.g);\r\n        result.g += (m[7] * c.b);\r\n        result.g += (m[8] * c.a);\r\n        result.g += m[9];\r\n\r\n    result.b = (m[10] * c.r);\r\n       result.b += (m[11] * c.g);\r\n       result.b += (m[12] * c.b);\r\n       result.b += (m[13] * c.a);\r\n       result.b += m[14];\r\n\r\n    result.a = (m[15] * c.r);\r\n       result.a += (m[16] * c.g);\r\n       result.a += (m[17] * c.b);\r\n       result.a += (m[18] * c.a);\r\n       result.a += m[19];\r\n\r\n    vec3 rgb = mix(c.rgb, result.rgb, uAlpha);\r\n\r\n    // Premultiply alpha again.\r\n    rgb *= result.a;\r\n\r\n    gl_FragColor = vec4(rgb, result.a);\r\n}\r\n`;\r\nexport {\r\n  fragment as default\r\n};\r\n//# sourceMappingURL=colorMatrix.frag.mjs.map\r\n", "import { Color, defaultFilterVertex, Filter } from '@pixi/core';\nimport fragment from './colorMatrix.frag';\n\nimport type { utils } from '@pixi/core';\n\nexport type ColorMatrix = utils.ArrayFixed<number, 20>;\n\n/**\n * The ColorMatrixFilter class lets you apply a 5x4 matrix transformation on the RGBA\n * color and alpha values of every pixel on your displayObject to produce a result\n * with a new set of RGBA color and alpha values. It's pretty powerful!\n * @example\n * import { filters } from 'pixi.js';\n *\n * const colorMatrix = new filters.ColorMatrixFilter();\n * container.filters = [colorMatrix];\n * colorMatrix.contrast(2);\n * @author Clément Chenebault <clement@goodboydigital.com>\n * @memberof PIXI\n */\nexport class ColorMatrixFilter extends Filter\n{\n    constructor()\n    {\n        const uniforms = {\n            m: new Float32Array([1, 0, 0, 0, 0,\n                0, 1, 0, 0, 0,\n                0, 0, 1, 0, 0,\n                0, 0, 0, 1, 0]),\n            uAlpha: 1,\n        };\n\n        super(defaultFilterVertex, fragment, uniforms);\n\n        this.alpha = 1;\n    }\n\n    /**\n     * Transforms current matrix and set the new one\n     * @param {number[]} matrix - 5x4 matrix\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    private _loadMatrix(matrix: ColorMatrix, multiply = false): void\n    {\n        let newMatrix = matrix;\n\n        if (multiply)\n        {\n            this._multiply(newMatrix, this.uniforms.m, matrix);\n            newMatrix = this._colorMatrix(newMatrix) as any;\n        }\n\n        // set the new matrix\n        this.uniforms.m = newMatrix;\n    }\n\n    /**\n     * Multiplies two mat5's\n     * @private\n     * @param out - 5x4 matrix the receiving matrix\n     * @param a - 5x4 matrix the first operand\n     * @param b - 5x4 matrix the second operand\n     * @returns {number[]} 5x4 matrix\n     */\n    private _multiply(out: ColorMatrix, a: ColorMatrix, b: ColorMatrix): ColorMatrix\n    {\n        // Red Channel\n        out[0] = (a[0] * b[0]) + (a[1] * b[5]) + (a[2] * b[10]) + (a[3] * b[15]);\n        out[1] = (a[0] * b[1]) + (a[1] * b[6]) + (a[2] * b[11]) + (a[3] * b[16]);\n        out[2] = (a[0] * b[2]) + (a[1] * b[7]) + (a[2] * b[12]) + (a[3] * b[17]);\n        out[3] = (a[0] * b[3]) + (a[1] * b[8]) + (a[2] * b[13]) + (a[3] * b[18]);\n        out[4] = (a[0] * b[4]) + (a[1] * b[9]) + (a[2] * b[14]) + (a[3] * b[19]) + a[4];\n\n        // Green Channel\n        out[5] = (a[5] * b[0]) + (a[6] * b[5]) + (a[7] * b[10]) + (a[8] * b[15]);\n        out[6] = (a[5] * b[1]) + (a[6] * b[6]) + (a[7] * b[11]) + (a[8] * b[16]);\n        out[7] = (a[5] * b[2]) + (a[6] * b[7]) + (a[7] * b[12]) + (a[8] * b[17]);\n        out[8] = (a[5] * b[3]) + (a[6] * b[8]) + (a[7] * b[13]) + (a[8] * b[18]);\n        out[9] = (a[5] * b[4]) + (a[6] * b[9]) + (a[7] * b[14]) + (a[8] * b[19]) + a[9];\n\n        // Blue Channel\n        out[10] = (a[10] * b[0]) + (a[11] * b[5]) + (a[12] * b[10]) + (a[13] * b[15]);\n        out[11] = (a[10] * b[1]) + (a[11] * b[6]) + (a[12] * b[11]) + (a[13] * b[16]);\n        out[12] = (a[10] * b[2]) + (a[11] * b[7]) + (a[12] * b[12]) + (a[13] * b[17]);\n        out[13] = (a[10] * b[3]) + (a[11] * b[8]) + (a[12] * b[13]) + (a[13] * b[18]);\n        out[14] = (a[10] * b[4]) + (a[11] * b[9]) + (a[12] * b[14]) + (a[13] * b[19]) + a[14];\n\n        // Alpha Channel\n        out[15] = (a[15] * b[0]) + (a[16] * b[5]) + (a[17] * b[10]) + (a[18] * b[15]);\n        out[16] = (a[15] * b[1]) + (a[16] * b[6]) + (a[17] * b[11]) + (a[18] * b[16]);\n        out[17] = (a[15] * b[2]) + (a[16] * b[7]) + (a[17] * b[12]) + (a[18] * b[17]);\n        out[18] = (a[15] * b[3]) + (a[16] * b[8]) + (a[17] * b[13]) + (a[18] * b[18]);\n        out[19] = (a[15] * b[4]) + (a[16] * b[9]) + (a[17] * b[14]) + (a[18] * b[19]) + a[19];\n\n        return out;\n    }\n\n    /**\n     * Create a Float32 Array and normalize the offset component to 0-1\n     * @param {number[]} matrix - 5x4 matrix\n     * @returns {number[]} 5x4 matrix with all values between 0-1\n     */\n    private _colorMatrix(matrix: ColorMatrix): ColorMatrix\n    {\n        // Create a Float32 Array and normalize the offset component to 0-1\n        const m = new Float32Array(matrix);\n\n        m[4] /= 255;\n        m[9] /= 255;\n        m[14] /= 255;\n        m[19] /= 255;\n\n        return m as any;\n    }\n\n    /**\n     * Adjusts brightness\n     * @param b - value of the brigthness (0-1, where 0 is black)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public brightness(b: number, multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            b, 0, 0, 0, 0,\n            0, b, 0, 0, 0,\n            0, 0, b, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Sets each channel on the diagonal of the color matrix.\n     * This can be used to achieve a tinting effect on Containers similar to the tint field of some\n     * display objects like Sprite, Text, Graphics, and Mesh.\n     * @param color - Color of the tint. This is a hex value.\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public tint(color: number, multiply?: boolean): void\n    {\n        const [r, g, b] = Color.shared.setValue(color).toArray();\n        const matrix: ColorMatrix = [\n            r, 0, 0, 0, 0,\n            0, g, 0, 0, 0,\n            0, 0, b, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the matrices in grey scales\n     * @param scale - value of the grey (0-1, where 0 is black)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public greyscale(scale: number, multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            scale, scale, scale, 0, 0,\n            scale, scale, scale, 0, 0,\n            scale, scale, scale, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Americanized alias of greyscale.\n     * @method\n     * @param scale - value of the grey (0-1, where 0 is black)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     * @returns {void}\n     * @see PIXI.ColorMatrixFilter.greyscale\n     */\n    public grayscale!: (scale: number, multiply: boolean) => void;\n\n    /**\n     * Set the black and white matrice.\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public blackAndWhite(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.3, 0.6, 0.1, 0, 0,\n            0.3, 0.6, 0.1, 0, 0,\n            0.3, 0.6, 0.1, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the hue property of the color\n     * @param rotation - in degrees\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public hue(rotation: number, multiply: boolean): void\n    {\n        rotation = (rotation || 0) / 180 * Math.PI;\n\n        const cosR = Math.cos(rotation);\n        const sinR = Math.sin(rotation);\n        const sqrt = Math.sqrt;\n\n        /* a good approximation for hue rotation\n         This matrix is far better than the versions with magic luminance constants\n         formerly used here, but also used in the starling framework (flash) and known from this\n         old part of the internet: quasimondo.com/archives/000565.php\n\n         This new matrix is based on rgb cube rotation in space. Look here for a more descriptive\n         implementation as a shader not a general matrix:\n         https://github.com/evanw/glfx.js/blob/58841c23919bd59787effc0333a4897b43835412/src/filters/adjust/huesaturation.js\n\n         This is the source for the code:\n         see http://stackoverflow.com/questions/8507885/shift-hue-of-an-rgb-color/8510751#8510751\n         */\n\n        const w = 1 / 3;\n        const sqrW = sqrt(w); // weight is\n\n        const a00 = cosR + ((1.0 - cosR) * w);\n        const a01 = (w * (1.0 - cosR)) - (sqrW * sinR);\n        const a02 = (w * (1.0 - cosR)) + (sqrW * sinR);\n\n        const a10 = (w * (1.0 - cosR)) + (sqrW * sinR);\n        const a11 = cosR + (w * (1.0 - cosR));\n        const a12 = (w * (1.0 - cosR)) - (sqrW * sinR);\n\n        const a20 = (w * (1.0 - cosR)) - (sqrW * sinR);\n        const a21 = (w * (1.0 - cosR)) + (sqrW * sinR);\n        const a22 = cosR + (w * (1.0 - cosR));\n\n        const matrix: ColorMatrix = [\n            a00, a01, a02, 0, 0,\n            a10, a11, a12, 0, 0,\n            a20, a21, a22, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the contrast matrix, increase the separation between dark and bright\n     * Increase contrast : shadows darker and highlights brighter\n     * Decrease contrast : bring the shadows up and the highlights down\n     * @param amount - value of the contrast (0-1)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public contrast(amount: number, multiply: boolean): void\n    {\n        const v = (amount || 0) + 1;\n        const o = -0.5 * (v - 1);\n\n        const matrix: ColorMatrix = [\n            v, 0, 0, 0, o,\n            0, v, 0, 0, o,\n            0, 0, v, 0, o,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the saturation matrix, increase the separation between colors\n     * Increase saturation : increase contrast, brightness, and sharpness\n     * @param amount - The saturation amount (0-1)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public saturate(amount = 0, multiply?: boolean): void\n    {\n        const x = (amount * 2 / 3) + 1;\n        const y = ((x - 1) * -0.5);\n\n        const matrix: ColorMatrix = [\n            x, y, y, 0, 0,\n            y, x, y, 0, 0,\n            y, y, x, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /** Desaturate image (remove color) Call the saturate function */\n    public desaturate(): void // eslint-disable-line no-unused-vars\n    {\n        this.saturate(-1);\n    }\n\n    /**\n     * Negative image (inverse of classic rgb matrix)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public negative(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            -1, 0, 0, 1, 0,\n            0, -1, 0, 1, 0,\n            0, 0, -1, 1, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Sepia image\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public sepia(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.393, 0.7689999, 0.18899999, 0, 0,\n            0.349, 0.6859999, 0.16799999, 0, 0,\n            0.272, 0.5339999, 0.13099999, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Color motion picture process invented in 1916 (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public technicolor(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            1.9125277891456083, -0.8545344976951645, -0.09155508482755585, 0, 11.793603434377337,\n            -0.3087833385928097, 1.7658908555458428, -0.10601743074722245, 0, -70.35205161461398,\n            -0.231103377548616, -0.7501899197440212, 1.847597816108189, 0, 30.950940869491138,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Polaroid filter\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public polaroid(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            1.438, -0.062, -0.062, 0, 0,\n            -0.122, 1.378, -0.122, 0, 0,\n            -0.016, -0.016, 1.483, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Filter who transforms : Red -> Blue and Blue -> Red\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public toBGR(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0, 0, 1, 0, 0,\n            0, 1, 0, 0, 0,\n            1, 0, 0, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Color reversal film introduced by Eastman Kodak in 1935. (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public kodachrome(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n            -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n            -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Brown delicious browni filter (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public browni(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.5997023498159715, 0.34553243048391263, -0.2708298674538042, 0, 47.43192855600873,\n            -0.037703249837783157, 0.8609577587992641, 0.15059552388459913, 0, -36.96841498319127,\n            0.24113635128153335, -0.07441037908422492, 0.44972182064877153, 0, -7.562075277591283,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Vintage filter (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public vintage(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.6279345635605994, 0.3202183420819367, -0.03965408211312453, 0, 9.651285835294123,\n            0.02578397704808868, 0.6441188644374771, 0.03259127616149294, 0, 7.462829176470591,\n            0.0466055556782719, -0.0851232987247891, 0.5241648018700465, 0, 5.159190588235296,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * We don't know exactly what it does, kind of gradient map, but funny to play with!\n     * @param desaturation - Tone values.\n     * @param toned - Tone values.\n     * @param lightColor - Tone values, example: `0xFFE580`\n     * @param darkColor - Tone values, example: `0xFFE580`\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public colorTone(desaturation: number, toned: number, lightColor: number, darkColor: number, multiply: boolean): void\n    {\n        desaturation = desaturation || 0.2;\n        toned = toned || 0.15;\n        lightColor = lightColor || 0xFFE580;\n        darkColor = darkColor || 0x338000;\n\n        const temp = Color.shared;\n        const [lR, lG, lB] = temp.setValue(lightColor).toArray();\n        const [dR, dG, dB] = temp.setValue(darkColor).toArray();\n\n        const matrix: ColorMatrix = [\n            0.3, 0.59, 0.11, 0, 0,\n            lR, lG, lB, desaturation, 0,\n            dR, dG, dB, toned, 0,\n            lR - dR, lG - dG, lB - dB, 0, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Night effect\n     * @param intensity - The intensity of the night effect.\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public night(intensity: number, multiply: boolean): void\n    {\n        intensity = intensity || 0.1;\n\n        const matrix: ColorMatrix = [\n            intensity * (-2.0), -intensity, 0, 0, 0,\n            -intensity, 0, intensity, 0, 0,\n            0, intensity, intensity * 2.0, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Predator effect\n     *\n     * Erase the current matrix by setting a new indepent one\n     * @param amount - how much the predator feels his future victim\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public predator(amount: number, multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            // row 1\n            11.224130630493164 * amount,\n            -4.794486999511719 * amount,\n            -2.8746118545532227 * amount,\n            0 * amount,\n            0.40342438220977783 * amount,\n            // row 2\n            -3.6330697536468506 * amount,\n            9.193157196044922 * amount,\n            -2.951810836791992 * amount,\n            0 * amount,\n            -1.316135048866272 * amount,\n            // row 3\n            -3.2184197902679443 * amount,\n            -4.2375030517578125 * amount,\n            7.476448059082031 * amount,\n            0 * amount,\n            0.8044459223747253 * amount,\n            // row 4\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * LSD effect\n     *\n     * Multiply the current matrix\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public lsd(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            2, -0.4, 0.5, 0, 0,\n            -0.5, 2, -0.4, 0, 0,\n            -0.4, -0.5, 3, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /** Erase the current matrix by setting the default one. */\n    public reset(): void\n    {\n        const matrix: ColorMatrix = [\n            1, 0, 0, 0, 0,\n            0, 1, 0, 0, 0,\n            0, 0, 1, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, false);\n    }\n\n    /**\n     * The matrix of the color matrix filter\n     * @member {number[]}\n     * @default [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]\n     */\n    get matrix(): ColorMatrix\n    {\n        return this.uniforms.m;\n    }\n\n    set matrix(value: ColorMatrix)\n    {\n        this.uniforms.m = value;\n    }\n\n    /**\n     * The opacity value to use when mixing the original and resultant colors.\n     *\n     * When the value is 0, the original color is used without modification.\n     * When the value is 1, the result color is used.\n     * When in the range (0, 1) the color is interpolated between the original and result by this amount.\n     * @default 1\n     */\n    get alpha(): number\n    {\n        return this.uniforms.uAlpha;\n    }\n\n    set alpha(value: number)\n    {\n        this.uniforms.uAlpha = value;\n    }\n}\n\n// Americanized alias\nColorMatrixFilter.prototype.grayscale = ColorMatrixFilter.prototype.greyscale;\n", "var fragment = `varying vec2 vFilterCoord;\r\nvarying vec2 vTextureCoord;\r\n\r\nuniform vec2 scale;\r\nuniform mat2 rotation;\r\nuniform sampler2D uSampler;\r\nuniform sampler2D mapSampler;\r\n\r\nuniform highp vec4 inputSize;\r\nuniform vec4 inputClamp;\r\n\r\nvoid main(void)\r\n{\r\n  vec4 map =  texture2D(mapSampler, vFilterCoord);\r\n\r\n  map -= 0.5;\r\n  map.xy = scale * inputSize.zw * (rotation * map.xy);\r\n\r\n  gl_FragColor = texture2D(uSampler, clamp(vec2(vTextureCoord.x + map.x, vTextureCoord.y + map.y), inputClamp.xy, inputClamp.zw));\r\n}\r\n`;\r\nexport {\r\n  fragment as default\r\n};\r\n//# sourceMappingURL=displacement.frag.mjs.map\r\n", "var vertex = `attribute vec2 aVertexPosition;\r\n\r\nuniform mat3 projectionMatrix;\r\nuniform mat3 filterMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying vec2 vFilterCoord;\r\n\r\nuniform vec4 inputSize;\r\nuniform vec4 outputFrame;\r\n\r\nvec4 filterVertexPosition( void )\r\n{\r\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\r\n\r\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\r\n}\r\n\r\nvec2 filterTextureCoord( void )\r\n{\r\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\tgl_Position = filterVertexPosition();\r\n\tvTextureCoord = filterTextureCoord();\r\n\tvFilterCoord = ( filterMatrix * vec3( vTextureCoord, 1.0)  ).xy;\r\n}\r\n`;\r\nexport {\r\n  vertex as default\r\n};\r\n//# sourceMappingURL=displacement.vert.mjs.map\r\n", "import { Filter, Matrix, Point } from '@pixi/core';\nimport fragment from './displacement.frag';\nimport vertex from './displacement.vert';\n\nimport type { CLEAR_MODES, FilterSystem, ISpriteMaskTarget, RenderTexture, Texture } from '@pixi/core';\n\n/**\n * The DisplacementFilter class uses the pixel values from the specified texture\n * (called the displacement map) to perform a displacement of an object.\n *\n * You can use this filter to apply all manor of crazy warping effects.\n * Currently the `r` property of the texture is used to offset the `x`\n * and the `g` property of the texture is used to offset the `y`.\n *\n * The way it works is it uses the values of the displacement map to look up the\n * correct pixels to output. This means it's not technically moving the original.\n * Instead, it's starting at the output and asking \"which pixel from the original goes here\".\n * For example, if a displacement map pixel has `red = 1` and the filter scale is `20`,\n * this filter will output the pixel approximately 20 pixels to the right of the original.\n * @memberof PIXI\n */\nexport class DisplacementFilter extends Filter\n{\n    public maskSprite: ISpriteMaskTarget;\n    public maskMatrix: Matrix;\n    public scale: Point;\n\n    /**\n     * @param {PIXI.Sprite} sprite - The sprite used for the displacement map. (make sure its added to the scene!)\n     * @param scale - The scale of the displacement\n     */\n    constructor(sprite: ISpriteMaskTarget, scale?: number)\n    {\n        const maskMatrix = new Matrix();\n\n        sprite.renderable = false;\n\n        super(vertex, fragment, {\n            mapSampler: sprite._texture,\n            filterMatrix: maskMatrix,\n            scale: { x: 1, y: 1 },\n            rotation: new Float32Array([1, 0, 0, 1]),\n        });\n\n        this.maskSprite = sprite;\n        this.maskMatrix = maskMatrix;\n\n        if (scale === null || scale === undefined)\n        {\n            scale = 20;\n        }\n\n        /**\n         * scaleX, scaleY for displacements\n         * @member {PIXI.Point}\n         */\n        this.scale = new Point(scale, scale);\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - clearMode.\n     */\n    public apply(\n        filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES\n    ): void\n    {\n        // fill maskMatrix with _normalized sprite texture coords_\n        this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);\n        this.uniforms.scale.x = this.scale.x;\n        this.uniforms.scale.y = this.scale.y;\n\n        // Extract rotation from world transform\n        const wt = this.maskSprite.worldTransform;\n        const lenX = Math.sqrt((wt.a * wt.a) + (wt.b * wt.b));\n        const lenY = Math.sqrt((wt.c * wt.c) + (wt.d * wt.d));\n\n        if (lenX !== 0 && lenY !== 0)\n        {\n            this.uniforms.rotation[0] = wt.a / lenX;\n            this.uniforms.rotation[1] = wt.b / lenX;\n            this.uniforms.rotation[2] = wt.c / lenY;\n            this.uniforms.rotation[3] = wt.d / lenY;\n        }\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /** The texture used for the displacement map. Must be power of 2 sized texture. */\n    get map(): Texture\n    {\n        return this.uniforms.mapSampler;\n    }\n\n    set map(value: Texture)\n    {\n        this.uniforms.mapSampler = value;\n    }\n}\n", "var fragment = `varying vec2 v_rgbNW;\r\nvarying vec2 v_rgbNE;\r\nvarying vec2 v_rgbSW;\r\nvarying vec2 v_rgbSE;\r\nvarying vec2 v_rgbM;\r\n\r\nvarying vec2 vFragCoord;\r\nuniform sampler2D uSampler;\r\nuniform highp vec4 inputSize;\r\n\r\n\r\n/**\r\n Basic FXAA implementation based on the code on geeks3d.com with the\r\n modification that the texture2DLod stuff was removed since it's\r\n unsupported by WebGL.\r\n\r\n --\r\n\r\n From:\r\n https://github.com/mitsuhiko/webgl-meincraft\r\n\r\n Copyright (c) 2011 by Armin Ronacher.\r\n\r\n Some rights reserved.\r\n\r\n Redistribution and use in source and binary forms, with or without\r\n modification, are permitted provided that the following conditions are\r\n met:\r\n\r\n * Redistributions of source code must retain the above copyright\r\n notice, this list of conditions and the following disclaimer.\r\n\r\n * Redistributions in binary form must reproduce the above\r\n copyright notice, this list of conditions and the following\r\n disclaimer in the documentation and/or other materials provided\r\n with the distribution.\r\n\r\n * The names of the contributors may not be used to endorse or\r\n promote products derived from this software without specific\r\n prior written permission.\r\n\r\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n#ifndef FXAA_REDUCE_MIN\r\n#define FXAA_REDUCE_MIN   (1.0/ 128.0)\r\n#endif\r\n#ifndef FXAA_REDUCE_MUL\r\n#define FXAA_REDUCE_MUL   (1.0 / 8.0)\r\n#endif\r\n#ifndef FXAA_SPAN_MAX\r\n#define FXAA_SPAN_MAX     8.0\r\n#endif\r\n\r\n//optimized version for mobile, where dependent\r\n//texture reads can be a bottleneck\r\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 inverseVP,\r\n          vec2 v_rgbNW, vec2 v_rgbNE,\r\n          vec2 v_rgbSW, vec2 v_rgbSE,\r\n          vec2 v_rgbM) {\r\n    vec4 color;\r\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\r\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\r\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\r\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\r\n    vec4 texColor = texture2D(tex, v_rgbM);\r\n    vec3 rgbM  = texColor.xyz;\r\n    vec3 luma = vec3(0.299, 0.587, 0.114);\r\n    float lumaNW = dot(rgbNW, luma);\r\n    float lumaNE = dot(rgbNE, luma);\r\n    float lumaSW = dot(rgbSW, luma);\r\n    float lumaSE = dot(rgbSE, luma);\r\n    float lumaM  = dot(rgbM,  luma);\r\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\r\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\r\n\r\n    mediump vec2 dir;\r\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\r\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\r\n\r\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\r\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\r\n\r\n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\r\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\r\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\r\n                  dir * rcpDirMin)) * inverseVP;\r\n\r\n    vec3 rgbA = 0.5 * (\r\n                       texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\r\n                       texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\r\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\r\n                                     texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\r\n                                     texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\r\n\r\n    float lumaB = dot(rgbB, luma);\r\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\r\n        color = vec4(rgbA, texColor.a);\r\n    else\r\n        color = vec4(rgbB, texColor.a);\r\n    return color;\r\n}\r\n\r\nvoid main() {\r\n\r\n      vec4 color;\r\n\r\n      color = fxaa(uSampler, vFragCoord, inputSize.zw, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\r\n\r\n      gl_FragColor = color;\r\n}\r\n`;\r\nexport {\r\n  fragment as default\r\n};\r\n//# sourceMappingURL=fxaa.frag.mjs.map\r\n", "var vertex = `\r\nattribute vec2 aVertexPosition;\r\n\r\nuniform mat3 projectionMatrix;\r\n\r\nvarying vec2 v_rgbNW;\r\nvarying vec2 v_rgbNE;\r\nvarying vec2 v_rgbSW;\r\nvarying vec2 v_rgbSE;\r\nvarying vec2 v_rgbM;\r\n\r\nvarying vec2 vFragCoord;\r\n\r\nuniform vec4 inputSize;\r\nuniform vec4 outputFrame;\r\n\r\nvec4 filterVertexPosition( void )\r\n{\r\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\r\n\r\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\r\n}\r\n\r\nvoid texcoords(vec2 fragCoord, vec2 inverseVP,\r\n               out vec2 v_rgbNW, out vec2 v_rgbNE,\r\n               out vec2 v_rgbSW, out vec2 v_rgbSE,\r\n               out vec2 v_rgbM) {\r\n    v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\r\n    v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\r\n    v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\r\n    v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\r\n    v_rgbM = vec2(fragCoord * inverseVP);\r\n}\r\n\r\nvoid main(void) {\r\n\r\n   gl_Position = filterVertexPosition();\r\n\r\n   vFragCoord = aVertexPosition * outputFrame.zw;\r\n\r\n   texcoords(vFragCoord, inputSize.zw, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\r\n}\r\n`;\r\nexport {\r\n  vertex as default\r\n};\r\n//# sourceMappingURL=fxaa.vert.mjs.map\r\n", "import { Filter } from '@pixi/core';\nimport fragment from './fxaa.frag';\nimport vertex from './fxaa.vert';\n\n/**\n * Basic FXAA (Fast Approximate Anti-Aliasing) implementation based on the code on geeks3d.com\n * with the modification that the texture2DLod stuff was removed since it is unsupported by WebGL.\n * @see https://github.com/mitsuhiko/webgl-meincraft\n * @memberof PIXI\n */\nexport class FXAAFilter extends Filter\n{\n    constructor()\n    {\n        // TODO - needs work\n        super(vertex, fragment);\n    }\n}\n", "var fragment = `precision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying vec4 vColor;\r\n\r\nuniform float uNoise;\r\nuniform float uSeed;\r\nuniform sampler2D uSampler;\r\n\r\nfloat rand(vec2 co)\r\n{\r\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec4 color = texture2D(uSampler, vTextureCoord);\r\n    float randomValue = rand(gl_FragCoord.xy * uSeed);\r\n    float diff = (randomValue - 0.5) * uNoise;\r\n\r\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\r\n    if (color.a > 0.0) {\r\n        color.rgb /= color.a;\r\n    }\r\n\r\n    color.r += diff;\r\n    color.g += diff;\r\n    color.b += diff;\r\n\r\n    // Premultiply alpha again.\r\n    color.rgb *= color.a;\r\n\r\n    gl_FragColor = color;\r\n}\r\n`;\r\nexport {\r\n  fragment as default\r\n};\r\n//# sourceMappingURL=noise.frag.mjs.map\r\n", "import { defaultFilterVertex, Filter } from '@pixi/core';\nimport fragment from './noise.frag';\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n * @memberof PIXI\n * @author Vico @vicocotea\n */\nexport class NoiseFilter extends Filter\n{\n    /**\n     * @param {number} [noise=0.5] - The noise intensity, should be a normalized value in the range [0, 1].\n     * @param {number} [seed] - A random seed for the noise generation. Default is `Math.random()`.\n     */\n    constructor(noise = 0.5, seed = Math.random())\n    {\n        super(defaultFilterVertex, fragment, {\n            uNoise: 0,\n            uSeed: 0,\n        });\n\n        this.noise = noise;\n        this.seed = seed;\n    }\n\n    /**\n     * The amount of noise to apply, this value should be in the range (0, 1].\n     * @default 0.5\n     */\n    get noise(): number\n    {\n        return this.uniforms.uNoise;\n    }\n\n    set noise(value: number)\n    {\n        this.uniforms.uNoise = value;\n    }\n\n    /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n    get seed(): number\n    {\n        return this.uniforms.uSeed;\n    }\n\n    set seed(value: number)\n    {\n        this.uniforms.uSeed = value;\n    }\n}\n", "import { utils } from '@pixi/core';\nimport { AlphaFilter } from '@pixi/filter-alpha';\nimport { BlurFilter, BlurFilterPass } from '@pixi/filter-blur';\nimport { ColorMatrixFilter } from '@pixi/filter-color-matrix';\nimport { DisplacementFilter } from '@pixi/filter-displacement';\nimport { FXAAFilter } from '@pixi/filter-fxaa';\nimport { NoiseFilter } from '@pixi/filter-noise';\n\n/**\n * Filters namespace has been removed. All filters are now available directly from the root of the package.\n * @namespace PIXI.filters\n * @deprecated\n */\nconst filters = {\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.AlphaFilter\n     */\n    AlphaFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.BlurFilter\n     */\n    BlurFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.BlurFilterPass\n     */\n    BlurFilterPass,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.ColorMatrixFilter\n     */\n    ColorMatrixFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.DisplacementFilter\n     */\n    DisplacementFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.FXAAFilter\n     */\n    FXAAFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.NoiseFilter\n     */\n    NoiseFilter,\n};\n\nObject.entries(filters).forEach(([key, FilterClass]) =>\n{\n    Object.defineProperty(filters, key, {\n        get()\n        {\n            // #if _DEBUG\n            utils.deprecation('7.1.0', `filters.${key} has moved to ${key}`);\n            // #endif\n\n            return FilterClass;\n        },\n    });\n});\n\nexport { filters };\n", "import { Ticker, UPDATE_PRIORITY } from '@pixi/core';\n\nimport type { EventSystem } from './EventSystem';\n\n/**\n * This class handles automatic firing of PointerEvents\n * in the case where the pointer is stationary for too long.\n * This is to ensure that hit-tests are still run on moving objects.\n * @memberof PIXI\n * @since 7.2.0\n * @see PIXI.EventsTicker\n */\nclass EventsTickerClass\n{\n    /** The event system. */\n    public events: EventSystem;\n    /** The DOM element to listen to events on. */\n    public domElement: HTMLElement;\n    /** The frequency that fake events will be fired. */\n    public interactionFrequency = 10;\n\n    private _deltaTime = 0;\n    private _didMove = false;\n    private tickerAdded = false;\n    private _pauseUpdate = true;\n\n    /**\n     * Initializes the event ticker.\n     * @param events - The event system.\n     */\n    public init(events: EventSystem): void\n    {\n        this.removeTickerListener();\n        this.events = events;\n        this.interactionFrequency = 10;\n        this._deltaTime = 0;\n        this._didMove = false;\n        this.tickerAdded = false;\n        this._pauseUpdate = true;\n    }\n\n    /** Whether to pause the update checks or not. */\n    get pauseUpdate(): boolean\n    {\n        return this._pauseUpdate;\n    }\n\n    set pauseUpdate(paused: boolean)\n    {\n        this._pauseUpdate = paused;\n    }\n\n    /** Adds the ticker listener. */\n    public addTickerListener(): void\n    {\n        if (this.tickerAdded || !this.domElement)\n        {\n            return;\n        }\n\n        Ticker.system.add(this.tickerUpdate, this, UPDATE_PRIORITY.INTERACTION);\n\n        this.tickerAdded = true;\n    }\n\n    /** Removes the ticker listener. */\n    public removeTickerListener(): void\n    {\n        if (!this.tickerAdded)\n        {\n            return;\n        }\n\n        Ticker.system.remove(this.tickerUpdate, this);\n\n        this.tickerAdded = false;\n    }\n\n    /** Sets flag to not fire extra events when the user has already moved there mouse */\n    public pointerMoved(): void\n    {\n        this._didMove = true;\n    }\n\n    /** Updates the state of interactive objects. */\n    private update(): void\n    {\n        if (!this.domElement || this._pauseUpdate)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been done using the mouse move!\n        if (this._didMove)\n        {\n            this._didMove = false;\n\n            return;\n        }\n\n        // eslint-disable-next-line dot-notation\n        const rootPointerEvent = this.events['rootPointerEvent'];\n\n        if (this.events.supportsTouchEvents && (rootPointerEvent as PointerEvent).pointerType === 'touch')\n        {\n            return;\n        }\n\n        globalThis.document.dispatchEvent(new PointerEvent('pointermove', {\n            clientX: rootPointerEvent.clientX,\n            clientY: rootPointerEvent.clientY,\n        }));\n    }\n\n    /**\n     * Updates the state of interactive objects if at least {@link interactionFrequency}\n     * milliseconds have passed since the last invocation.\n     *\n     * Invoked by a throttled ticker update from {@link PIXI.Ticker.system}.\n     * @param deltaTime - time delta since the last call\n     */\n    private tickerUpdate(deltaTime: number): void\n    {\n        this._deltaTime += deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        this.update();\n    }\n}\n\n/**\n * This class handles automatic firing of PointerEvents\n * in the case where the pointer is stationary for too long.\n * This is to ensure that hit-tests are still run on moving objects.\n * @memberof PIXI\n * @type {PIXI.EventsTickerClass}\n * @since 7.2.0\n */\nexport const EventsTicker = new EventsTickerClass();\n", "import { Point } from '@pixi/core';\n\nimport type { EventBoundary } from './EventBoundary';\nimport type { FederatedEventTarget } from './FederatedEventTarget';\n\nexport interface PixiTouch extends Touch\n{\n    button: number;\n    buttons: number;\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    layerX: number;\n    layerY: number;\n    offsetX: number;\n    offsetY: number;\n    isNormalized: boolean;\n    type: string;\n}\n\n/**\n * An DOM-compatible synthetic event implementation that is \"forwarded\" on behalf of an original\n * FederatedEvent or native {@link https://dom.spec.whatwg.org/#event Event}.\n * @memberof PIXI\n * @typeParam N - The type of native event held.\n */\nexport class FederatedEvent<N extends UIEvent | PixiTouch = UIEvent | PixiTouch> implements UIEvent\n{\n    /** Flags whether this event bubbles. This will take effect only if it is set before propagation. */\n    public bubbles = true;\n\n    /** @deprecated since 7.0.0 */\n    public cancelBubble = true;\n\n    /**\n     * Flags whether this event can be canceled using {@link PIXI.FederatedEvent.preventDefault}. This is always\n     * false (for now).\n     */\n    public readonly cancelable = false;\n\n    /**\n     * Flag added for compatibility with DOM {@code Event}. It is not used in the Federated Events\n     * API.\n     * @see https://dom.spec.whatwg.org/#dom-event-composed\n     */\n    public readonly composed = false;\n\n    /** The listeners of the event target that are being notified. */\n    public currentTarget: FederatedEventTarget;\n\n    /** Flags whether the default response of the user agent was prevent through this event. */\n    public defaultPrevented = false;\n\n    /**\n     * The propagation phase.\n     * @default {@link PIXI.FederatedEvent.NONE}\n     */\n    public eventPhase = FederatedEvent.prototype.NONE;\n\n    /** Flags whether this is a user-trusted event */\n    public isTrusted: boolean;\n\n    /** @deprecated since 7.0.0 */\n    public returnValue: boolean;\n\n    /** @deprecated since 7.0.0 */\n    public srcElement: EventTarget;\n\n    /** The event target that this will be dispatched to. */\n    public target: FederatedEventTarget;\n\n    /** The timestamp of when the event was created. */\n    public timeStamp: number;\n\n    /** The type of event, e.g. {@code \"mouseup\"}. */\n    public type: string;\n\n    /** The native event that caused the foremost original event. */\n    public nativeEvent: N;\n\n    /** The original event that caused this event, if any. */\n    public originalEvent: FederatedEvent<N>;\n\n    /** Flags whether propagation was stopped. */\n    public propagationStopped = false;\n\n    /** Flags whether propagation was immediately stopped. */\n    public propagationImmediatelyStopped = false;\n\n    /** The composed path of the event's propagation. The {@code target} is at the end. */\n    public path: FederatedEventTarget[];\n\n    /** The {@link PIXI.EventBoundary} that manages this event. Null for root events. */\n    public readonly manager: EventBoundary;\n\n    /** Event-specific detail */\n    public detail: number;\n\n    /** The global Window object. */\n    public view: WindowProxy;\n\n    /**\n     * Not supported.\n     * @deprecated since 7.0.0\n     */\n    public which: number;\n\n    /** The coordinates of the evnet relative to the nearest DOM layer. This is a non-standard property. */\n    public layer: Point = new Point();\n\n    /** @readonly */\n    get layerX(): number { return this.layer.x; }\n\n    /** @readonly */\n    get layerY(): number { return this.layer.y; }\n\n    /** The coordinates of the event relative to the DOM document. This is a non-standard property. */\n    public page: Point = new Point();\n\n    /** @readonly */\n    get pageX(): number { return this.page.x; }\n\n    /** @readonly */\n    get pageY(): number { return this.page.y; }\n\n    /**\n     * @param manager - The event boundary which manages this event. Propagation can only occur\n     *  within the boundary's jurisdiction.\n     */\n    constructor(manager: EventBoundary)\n    {\n        this.manager = manager;\n    }\n\n    /**\n     * Fallback for the deprecated @code{PIXI.InteractionEvent.data}.\n     * @deprecated since 7.0.0\n     */\n    get data(): this\n    {\n        return this;\n    }\n\n    /** The propagation path for this event. Alias for {@link PIXI.EventBoundary.propagationPath}. */\n    composedPath(): FederatedEventTarget[]\n    {\n        // Find the propagation path if it isn't cached or if the target has changed since since\n        // the last evaluation.\n        if (this.manager && (!this.path || this.path[this.path.length - 1] !== this.target))\n        {\n            this.path = this.target ? this.manager.propagationPath(this.target) : [];\n        }\n\n        return this.path;\n    }\n\n    /**\n     * Unimplemented method included for implementing the DOM interface {@code Event}. It will throw an {@code Error}.\n     * @deprecated\n     * @param _type\n     * @param _bubbles\n     * @param _cancelable\n     */\n    initEvent(_type: string, _bubbles?: boolean, _cancelable?: boolean): void\n    {\n        throw new Error('initEvent() is a legacy DOM API. It is not implemented in the Federated Events API.');\n    }\n\n    /**\n     * Unimplemented method included for implementing the DOM interface {@code UIEvent}. It will throw an {@code Error}.\n     * @deprecated\n     * @param _typeArg\n     * @param _bubblesArg\n     * @param _cancelableArg\n     * @param _viewArg\n     * @param _detailArg\n     */\n    initUIEvent(_typeArg: string, _bubblesArg?: boolean, _cancelableArg?: boolean, _viewArg?: Window | null,\n        _detailArg?: number): void\n    {\n        throw new Error('initUIEvent() is a legacy DOM API. It is not implemented in the Federated Events API.');\n    }\n\n    /** Prevent default behavior of PixiJS and the user agent. */\n    preventDefault(): void\n    {\n        if (this.nativeEvent instanceof Event && this.nativeEvent.cancelable)\n        {\n            this.nativeEvent.preventDefault();\n        }\n\n        this.defaultPrevented = true;\n    }\n\n    /**\n     * Stop this event from propagating to any addition listeners, including on the\n     * {@link PIXI.FederatedEventTarget.currentTarget currentTarget} and also the following\n     * event targets on the propagation path.\n     */\n    stopImmediatePropagation(): void\n    {\n        this.propagationImmediatelyStopped = true;\n    }\n\n    /**\n     * Stop this event from propagating to the next {@link PIXI.FederatedEventTarget}. The rest of the listeners\n     * on the {@link PIXI.FederatedEventTarget.currentTarget currentTarget} will still be notified.\n     */\n    stopPropagation(): void\n    {\n        this.propagationStopped = true;\n    }\n\n    readonly NONE = 0;\n    readonly CAPTURING_PHASE = 1;\n    readonly AT_TARGET = 2;\n    readonly BUBBLING_PHASE = 3;\n}\n", "import { Point } from '@pixi/core';\nimport { FederatedEvent } from './FederatedEvent';\n\nimport type { IPointData } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\nimport type { PixiTouch } from './FederatedEvent';\n\n/**\n * A {@link PIXI.FederatedEvent} for mouse events.\n * @memberof PIXI\n */\nexport class FederatedMouseEvent extends FederatedEvent<\nMouseEvent | PointerEvent | PixiTouch\n> implements MouseEvent\n{\n    /** Whether the \"alt\" key was pressed when this mouse event occurred. */\n    altKey: boolean;\n\n    /** The specific button that was pressed in this mouse event. */\n    button: number;\n\n    /** The button depressed when this event occurred. */\n    buttons: number;\n\n    /** Whether the \"control\" key was pressed when this mouse event occurred. */\n    ctrlKey: boolean;\n\n    /** Whether the \"meta\" key was pressed when this mouse event occurred. */\n    metaKey: boolean;\n\n    /** This is currently not implemented in the Federated Events API. */\n    relatedTarget: EventTarget;\n\n    /** Whether the \"shift\" key was pressed when this mouse event occurred. */\n    shiftKey: boolean;\n\n    /** The coordinates of the mouse event relative to the canvas. */\n    public client: Point = new Point();\n\n    /** @readonly */\n    public get clientX(): number { return this.client.x; }\n\n    /** @readonly */\n    public get clientY(): number { return this.client.y; }\n\n    /**\n     * Alias for {@link PIXI.FederatedMouseEvent.clientX this.clientX}.\n     * @readonly\n     */\n    get x(): number { return this.clientX; }\n\n    /**\n     * Alias for {@link PIXI.FederatedMouseEvent.clientY this.clientY}.\n     * @readonly\n     */\n    get y(): number { return this.clientY; }\n\n    /** This is the number of clicks that occurs in 200ms/click of each other. */\n    public detail: number;\n\n    /** The movement in this pointer relative to the last `mousemove` event. */\n    public movement: Point = new Point();\n\n    /** @readonly */\n    get movementX(): number { return this.movement.x; }\n\n    /** @readonly */\n    get movementY(): number { return this.movement.y; }\n\n    /**\n     * The offset of the pointer coordinates w.r.t. target DisplayObject in world space. This is\n     * not supported at the moment.\n     */\n    public offset: Point = new Point();\n\n    /** @readonly */\n    get offsetX(): number { return this.offset.x; }\n\n    /** @readonly */\n    get offsetY(): number { return this.offset.y; }\n\n    /** The pointer coordinates in world space. */\n    public global: Point = new Point();\n\n    /** @readonly */\n    get globalX(): number { return this.global.x; }\n\n    /** @readonly */\n    get globalY(): number { return this.global.y; }\n\n    /**\n     * The pointer coordinates in the renderer's {@link PIXI.Renderer.screen screen}. This has slightly\n     * different semantics than native PointerEvent screenX/screenY.\n     */\n    public screen: Point = new Point();\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.x}.\n     * @readonly\n     */\n    get screenX(): number { return this.screen.x; }\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.y}.\n     * @readonly\n     */\n    get screenY(): number { return this.screen.y; }\n\n    /**\n     * This will return the local coordinates of the specified displayObject for this InteractionData\n     * @param {PIXI.DisplayObject} displayObject - The DisplayObject that you would like the local\n     *  coords off\n     * @param {PIXI.IPointData} point - A Point object in which to store the value, optional (otherwise\n     *  will create a new point)\n     * @param {PIXI.IPointData} globalPos - A Point object containing your custom global coords, optional\n     *  (otherwise will use the current global coords)\n     * @returns - A point containing the coordinates of the InteractionData position relative\n     *  to the DisplayObject\n     */\n    public getLocalPosition<P extends IPointData = Point>(displayObject: DisplayObject, point?: P, globalPos?: IPointData): P\n    {\n        return displayObject.worldTransform.applyInverse<P>(globalPos || this.global, point);\n    }\n\n    /**\n     * Whether the modifier key was pressed when this event natively occurred.\n     * @param key - The modifier key.\n     */\n    getModifierState(key: string): boolean\n    {\n        return 'getModifierState' in this.nativeEvent && this.nativeEvent.getModifierState(key);\n    }\n\n    /**\n     * Not supported.\n     * @param _typeArg\n     * @param _canBubbleArg\n     * @param _cancelableArg\n     * @param _viewArg\n     * @param _detailArg\n     * @param _screenXArg\n     * @param _screenYArg\n     * @param _clientXArg\n     * @param _clientYArg\n     * @param _ctrlKeyArg\n     * @param _altKeyArg\n     * @param _shiftKeyArg\n     * @param _metaKeyArg\n     * @param _buttonArg\n     * @param _relatedTargetArg\n     * @deprecated since 7.0.0\n     */\n    // eslint-disable-next-line max-params\n    initMouseEvent(\n        _typeArg: string,\n        _canBubbleArg: boolean,\n        _cancelableArg: boolean,\n        _viewArg: Window,\n        _detailArg: number,\n        _screenXArg: number,\n        _screenYArg: number,\n        _clientXArg: number,\n        _clientYArg: number,\n        _ctrlKeyArg: boolean,\n        _altKeyArg: boolean,\n        _shiftKeyArg: boolean,\n        _metaKeyArg: boolean,\n        _buttonArg: number,\n        _relatedTargetArg: EventTarget\n    ): void\n    {\n        throw new Error('Method not implemented.');\n    }\n}\n", "import { FederatedMouseEvent } from './FederatedMouseEvent';\n\n/**\n * A {@link PIXI.FederatedEvent} for pointer events.\n * @memberof PIXI\n */\nexport class FederatedPointerEvent extends FederatedMouseEvent implements PointerEvent\n{\n    /**\n     * The unique identifier of the pointer.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId}\n     */\n    public pointerId: number;\n\n    /**\n     * The width of the pointer's contact along the x-axis, measured in CSS pixels.\n     * radiusX of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width\n     */\n    public width = 0;\n\n    /**\n     * The height of the pointer's contact along the y-axis, measured in CSS pixels.\n     * radiusY of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height\n     */\n    public height = 0;\n\n    /**\n     * Indicates whether or not the pointer device that created the event is the primary pointer.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary\n     */\n    public isPrimary = false;\n\n    /**\n     * The type of pointer that triggered the event.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n     */\n    public pointerType: string;\n\n    /**\n     * Pressure applied by the pointing device during the event.\n     *s\n     * A Touch's force property will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n     */\n    public pressure: number;\n\n    /**\n     * Barrel pressure on a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public tangentialPressure: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX\n     */\n    public tiltX: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY\n     */\n    public tiltY: number;\n\n    /**\n     * Twist of a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public twist: number;\n\n    /** This is the number of clicks that occurs in 200ms/click of each other. */\n    public detail: number;\n\n    // Only included for completeness for now\n    getCoalescedEvents(): PointerEvent[]\n    {\n        if (this.type === 'pointermove' || this.type === 'mousemove' || this.type === 'touchmove')\n        {\n            return [this];\n        }\n\n        return [];\n    }\n\n    // Only included for completeness for now\n    getPredictedEvents(): PointerEvent[]\n    {\n        throw new Error('getPredictedEvents is not supported!');\n    }\n}\n", "import { FederatedMouseEvent } from './FederatedMouseEvent';\n\n/**\n * A {@link PIXI.FederatedEvent} for wheel events.\n * @memberof PIXI\n */\nexport class FederatedWheelEvent extends FederatedMouseEvent implements WheelEvent\n{\n    /**\n     * The units of `deltaX`, `deltaY`, and `deltaZ`. This is one of `DOM_DELTA_LINE`,\n     * `DOM_DELTA_PAGE`, `DOM_DELTA_PIXEL`.\n     */\n    deltaMode: number;\n\n    /** Horizontal scroll amount */\n    deltaX: number;\n\n    /** Vertical scroll amount */\n    deltaY: number;\n\n    /** z-axis scroll amount. */\n    deltaZ: number;\n\n    /** Units specified in pixels. */\n    static readonly DOM_DELTA_PIXEL = 0;\n\n    /** Units specified in pixels. */\n    readonly DOM_DELTA_PIXEL = 0;\n\n    /** Units specified in lines. */\n    static readonly DOM_DELTA_LINE = 1;\n\n    /** Units specified in lines. */\n    readonly DOM_DELTA_LINE = 1;\n\n    /** Units specified in pages. */\n    static readonly DOM_DELTA_PAGE = 2;\n\n    /** Units specified in pages. */\n    readonly DOM_DELTA_PAGE = 2;\n}\n", "import { Point, utils } from '@pixi/core';\nimport { EventsTicker } from './EventTicker';\nimport { FederatedMouseEvent } from './FederatedMouseEvent';\nimport { FederatedPointerEvent } from './FederatedPointerEvent';\nimport { FederatedWheelEvent } from './FederatedWheelEvent';\n\nimport type { DisplayObject } from '@pixi/display';\nimport type { EmitterListeners, TrackingData } from './EventBoundaryTypes';\nimport type { FederatedEvent } from './FederatedEvent';\nimport type {\n    Cursor, EventMode, FederatedEventHandler,\n    FederatedEventTarget,\n    IFederatedDisplayObject\n} from './FederatedEventTarget';\n\n// The maximum iterations used in propagation. This prevent infinite loops.\nconst PROPAGATION_LIMIT = 2048;\n\nconst tempHitLocation = new Point();\nconst tempLocalMapping = new Point();\n\n/**\n * Event boundaries are \"barriers\" where events coming from an upstream scene are modified before downstream propagation.\n *\n * ## Root event boundary\n *\n * The {@link PIXI.EventSystem#rootBoundary rootBoundary} handles events coming from the &lt;canvas /&gt;.\n * {@link PIXI.EventSystem} handles the normalization from native {@link https://dom.spec.whatwg.org/#event Events}\n * into {@link PIXI.FederatedEvent FederatedEvents}. The rootBoundary then does the hit-testing and event dispatch\n * for the upstream normalized event.\n *\n * ## Additional event boundaries\n *\n * An additional event boundary may be desired within an application's scene graph. For example, if a portion of the scene is\n * is flat with many children at one level - a spatial hash maybe needed to accelerate hit testing. In this scenario, the\n * container can be detached from the scene and glued using a custom event boundary.\n *\n * ```ts\n * import { Container } from '@pixi/display';\n * import { EventBoundary } from '@pixi/events';\n * import { SpatialHash } from 'pixi-spatial-hash';\n *\n * class HashedHitTestingEventBoundary\n * {\n *     private spatialHash: SpatialHash;\n *\n *     constructor(scene: Container, spatialHash: SpatialHash)\n *     {\n *         super(scene);\n *         this.spatialHash = spatialHash;\n *     }\n *\n *     hitTestRecursive(...)\n *     {\n *         // TODO: If target === this.rootTarget, then use spatial hash to get a\n *         // list of possible children that match the given (x,y) coordinates.\n *     }\n * }\n *\n * class VastScene extends DisplayObject\n * {\n *     protected eventBoundary: EventBoundary;\n *     protected scene: Container;\n *     protected spatialHash: SpatialHash;\n *\n *     constructor()\n *     {\n *         this.scene = new Container();\n *         this.spatialHash = new SpatialHash();\n *         this.eventBoundary = new HashedHitTestingEventBoundary(this.scene, this.spatialHash);\n *\n *         // Populate this.scene with a ton of children, while updating this.spatialHash\n *     }\n * }\n * ```\n * @memberof PIXI\n */\nexport class EventBoundary\n{\n    /**\n     * The root event-target residing below the event boundary.\n     *\n     * All events are dispatched trickling down and bubbling up to this `rootTarget`.\n     */\n    public rootTarget: DisplayObject;\n\n    /**\n     * Emits events after they were dispatched into the scene graph.\n     *\n     * This can be used for global events listening, regardless of the scene graph being used. It should\n     * not be used by interactive libraries for normal use.\n     *\n     * Special events that do not bubble all the way to the root target are not emitted from here,\n     * e.g. pointerenter, pointerleave, click.\n     */\n    public dispatch: utils.EventEmitter = new utils.EventEmitter();\n\n    /** The cursor preferred by the event targets underneath this boundary. */\n    public cursor: Cursor | string;\n\n    /**\n     * This flag would emit `pointermove`, `touchmove`, and `mousemove` events on all DisplayObjects.\n     *\n     * The `moveOnAll` semantics mirror those of earlier versions of PixiJS. This was disabled in favor of\n     * the Pointer Event API's approach.\n     */\n    public moveOnAll = false;\n\n    /** Enables the global move events. `globalpointermove`, `globaltouchmove`, and `globalmousemove` */\n    public enableGlobalMoveEvents = true;\n\n    /**\n     * Maps event types to forwarding handles for them.\n     *\n     * {@link PIXI.EventBoundary EventBoundary} provides mapping for \"pointerdown\", \"pointermove\",\n     * \"pointerout\", \"pointerleave\", \"pointerover\", \"pointerup\", and \"pointerupoutside\" by default.\n     * @see PIXI.EventBoundary#addEventMapping\n     */\n    protected mappingTable: Record<string, Array<{\n        fn: (e: FederatedEvent) => void,\n        priority: number\n    }>>;\n\n    /**\n     * State object for mapping methods.\n     * @see PIXI.EventBoundary#trackingData\n     */\n    protected mappingState: Record<string, any> = {\n        trackingData: {}\n    };\n\n    /**\n     * The event pool maps event constructors to an free pool of instances of those specific events.\n     * @see PIXI.EventBoundary#allocateEvent\n     * @see PIXI.EventBoundary#freeEvent\n     */\n    protected eventPool: Map<typeof FederatedEvent, FederatedEvent[]> = new Map();\n\n    /** Every interactive element gathered from the scene. Only used in `pointermove` */\n    private _allInteractiveElements: FederatedEventTarget[] = [];\n    /** Every element that passed the hit test. Only used in `pointermove` */\n    private _hitElements: FederatedEventTarget[] = [];\n    /** Whether or not to collect all the interactive elements from the scene. Enabled in `pointermove` */\n    private _isPointerMoveEvent = false;\n\n    /**\n     * @param rootTarget - The holder of the event boundary.\n     */\n    constructor(rootTarget?: DisplayObject)\n    {\n        this.rootTarget = rootTarget;\n\n        this.hitPruneFn = this.hitPruneFn.bind(this);\n        this.hitTestFn = this.hitTestFn.bind(this);\n        this.mapPointerDown = this.mapPointerDown.bind(this);\n        this.mapPointerMove = this.mapPointerMove.bind(this);\n        this.mapPointerOut = this.mapPointerOut.bind(this);\n        this.mapPointerOver = this.mapPointerOver.bind(this);\n        this.mapPointerUp = this.mapPointerUp.bind(this);\n        this.mapPointerUpOutside = this.mapPointerUpOutside.bind(this);\n        this.mapWheel = this.mapWheel.bind(this);\n\n        this.mappingTable = {};\n        this.addEventMapping('pointerdown', this.mapPointerDown);\n        this.addEventMapping('pointermove', this.mapPointerMove);\n        this.addEventMapping('pointerout', this.mapPointerOut);\n        this.addEventMapping('pointerleave', this.mapPointerOut);\n        this.addEventMapping('pointerover', this.mapPointerOver);\n        this.addEventMapping('pointerup', this.mapPointerUp);\n        this.addEventMapping('pointerupoutside', this.mapPointerUpOutside);\n        this.addEventMapping('wheel', this.mapWheel);\n    }\n\n    /**\n     * Adds an event mapping for the event `type` handled by `fn`.\n     *\n     * Event mappings can be used to implement additional or custom events. They take an event\n     * coming from the upstream scene (or directly from the {@link PIXI.EventSystem}) and dispatch new downstream events\n     * generally trickling down and bubbling up to {@link PIXI.EventBoundary.rootTarget this.rootTarget}.\n     *\n     * To modify the semantics of existing events, the built-in mapping methods of EventBoundary should be overridden\n     * instead.\n     * @param type - The type of upstream event to map.\n     * @param fn - The mapping method. The context of this function must be bound manually, if desired.\n     */\n    public addEventMapping(type: string, fn: (e: FederatedEvent) => void): void\n    {\n        if (!this.mappingTable[type])\n        {\n            this.mappingTable[type] = [];\n        }\n\n        this.mappingTable[type].push({\n            fn,\n            priority: 0,\n        });\n        this.mappingTable[type].sort((a, b) => a.priority - b.priority);\n    }\n\n    /**\n     * Dispatches the given event\n     * @param e\n     * @param type\n     */\n    public dispatchEvent(e: FederatedEvent, type?: string): void\n    {\n        e.propagationStopped = false;\n        e.propagationImmediatelyStopped = false;\n\n        this.propagate(e, type);\n        this.dispatch.emit(type || e.type, e);\n    }\n\n    /**\n     * Maps the given upstream event through the event boundary and propagates it downstream.\n     * @param e\n     */\n    public mapEvent(e: FederatedEvent): void\n    {\n        if (!this.rootTarget)\n        {\n            return;\n        }\n\n        const mappers = this.mappingTable[e.type];\n\n        if (mappers)\n        {\n            for (let i = 0, j = mappers.length; i < j; i++)\n            {\n                mappers[i].fn(e);\n            }\n        }\n        else\n        {\n            console.warn(`[EventBoundary]: Event mapping not defined for ${e.type}`);\n        }\n    }\n\n    /**\n     * Finds the DisplayObject that is the target of a event at the given coordinates.\n     *\n     * The passed (x,y) coordinates are in the world space above this event boundary.\n     * @param x\n     * @param y\n     */\n    public hitTest(\n        x: number,\n        y: number,\n    ): DisplayObject\n    {\n        EventsTicker.pauseUpdate = true;\n        // if we are using global move events, we need to hit test the whole scene graph\n        const useMove = this._isPointerMoveEvent && this.enableGlobalMoveEvents;\n        const fn = useMove ? 'hitTestMoveRecursive' : 'hitTestRecursive';\n        const invertedPath = this[fn](\n            this.rootTarget,\n            this.rootTarget.eventMode,\n            tempHitLocation.set(x, y),\n            this.hitTestFn,\n            this.hitPruneFn,\n        );\n\n        return invertedPath && invertedPath[0];\n    }\n\n    /**\n     * Propagate the passed event from from {@link PIXI.EventBoundary.rootTarget this.rootTarget} to its\n     * target {@code e.target}.\n     * @param e - The event to propagate.\n     * @param type\n     */\n    public propagate(e: FederatedEvent, type?: string): void\n    {\n        if (!e.target)\n        {\n            // This usually occurs when the scene graph is not interactive.\n            return;\n        }\n\n        const composedPath = e.composedPath();\n\n        // Capturing phase\n        e.eventPhase = e.CAPTURING_PHASE;\n\n        for (let i = 0, j = composedPath.length - 1; i < j; i++)\n        {\n            e.currentTarget = composedPath[i];\n\n            this.notifyTarget(e, type);\n\n            if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n        }\n\n        // At target phase\n        e.eventPhase = e.AT_TARGET;\n        e.currentTarget = e.target;\n\n        this.notifyTarget(e, type);\n\n        if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n\n        // Bubbling phase\n        e.eventPhase = e.BUBBLING_PHASE;\n\n        for (let i = composedPath.length - 2; i >= 0; i--)\n        {\n            e.currentTarget = composedPath[i];\n\n            this.notifyTarget(e, type);\n\n            if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n        }\n    }\n\n    /**\n     * Emits the event {@code e} to all interactive display objects. The event is propagated in the bubbling phase always.\n     *\n     * This is used in the `globalpointermove` event.\n     * @param e - The emitted event.\n     * @param type - The listeners to notify.\n     * @param targets - The targets to notify.\n     */\n    public all(e: FederatedEvent, type?: string | string[], targets = this._allInteractiveElements): void\n    {\n        if (targets.length === 0) return;\n\n        e.eventPhase = e.BUBBLING_PHASE;\n\n        const events = Array.isArray(type) ? type : [type];\n\n        // loop through all interactive elements and notify them of the event\n        // loop through targets backwards\n        for (let i = targets.length - 1; i >= 0; i--)\n        {\n            events.forEach((event) =>\n            {\n                e.currentTarget = targets[i];\n                this.notifyTarget(e, event);\n            });\n        }\n    }\n\n    /**\n     * Finds the propagation path from {@link PIXI.EventBoundary.rootTarget rootTarget} to the passed\n     * {@code target}. The last element in the path is {@code target}.\n     * @param target\n     */\n    public propagationPath(target: FederatedEventTarget): FederatedEventTarget[]\n    {\n        const propagationPath = [target];\n\n        for (let i = 0; i < PROPAGATION_LIMIT && target !== this.rootTarget; i++)\n        {\n            if (!target.parent)\n            {\n                throw new Error('Cannot find propagation path to disconnected target');\n            }\n\n            propagationPath.push(target.parent);\n\n            target = target.parent;\n        }\n\n        propagationPath.reverse();\n\n        return propagationPath;\n    }\n\n    protected hitTestMoveRecursive(\n        currentTarget: DisplayObject,\n        eventMode: EventMode,\n        location: Point,\n        testFn: (object: DisplayObject, pt: Point) => boolean,\n        pruneFn?: (object: DisplayObject, pt: Point) => boolean,\n        ignore = false\n    ): DisplayObject[]\n    {\n        let shouldReturn = false;\n\n        // only bail out early if it is not interactive\n        if (this._interactivePrune(currentTarget)) return null;\n\n        if (currentTarget.eventMode === 'dynamic' || eventMode === 'dynamic')\n        {\n            EventsTicker.pauseUpdate = false;\n        }\n\n        if (currentTarget.interactiveChildren && currentTarget.children)\n        {\n            const children = currentTarget.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i] as DisplayObject;\n\n                const nestedHit = this.hitTestMoveRecursive(\n                    child,\n                    this._isInteractive(eventMode) ? eventMode : child.eventMode,\n                    location,\n                    testFn,\n                    pruneFn,\n                    ignore || pruneFn(currentTarget, location)\n                );\n\n                if (nestedHit)\n                {\n                    // Its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent)\n                    {\n                        continue;\n                    }\n\n                    // Only add the current hit-test target to the hit-test chain if the chain\n                    // has already started (i.e. the event target has been found) or if the current\n                    // target is interactive (i.e. it becomes the event target).\n                    const isInteractive = currentTarget.isInteractive();\n\n                    if (nestedHit.length > 0 || isInteractive)\n                    {\n                        if (isInteractive) this._allInteractiveElements.push(currentTarget);\n                        nestedHit.push(currentTarget);\n                    }\n\n                    // store all hit elements to be returned once we have traversed the whole tree\n                    if (this._hitElements.length === 0) this._hitElements = nestedHit;\n\n                    shouldReturn = true;\n                }\n            }\n        }\n\n        const isInteractiveMode = this._isInteractive(eventMode);\n        const isInteractiveTarget = currentTarget.isInteractive();\n\n        if (isInteractiveMode && isInteractiveTarget) this._allInteractiveElements.push(currentTarget);\n\n        // we don't carry on hit testing something once we have found a hit,\n        // now only care about gathering the interactive elements\n        if (ignore || this._hitElements.length > 0) return null;\n\n        if (shouldReturn) return this._hitElements as DisplayObject[];\n\n        // Finally, hit test this DisplayObject itself.\n        if (isInteractiveMode && (!pruneFn(currentTarget, location) && testFn(currentTarget, location)))\n        {\n            // The current hit-test target is the event's target only if it is interactive. Otherwise,\n            // the first interactive ancestor will be the event's target.\n            return isInteractiveTarget ? [currentTarget] : [];\n        }\n\n        return null;\n    }\n\n    /**\n     * Recursive implementation for {@link PIXI.EventBoundary.hitTest hitTest}.\n     * @param currentTarget - The DisplayObject that is to be hit tested.\n     * @param eventMode - The event mode for the `currentTarget` or one of its parents.\n     * @param location - The location that is being tested for overlap.\n     * @param testFn - Callback that determines whether the target passes hit testing. This callback\n     *  can assume that `pruneFn` failed to prune the display object.\n     * @param pruneFn - Callback that determiness whether the target and all of its children\n     *  cannot pass the hit test. It is used as a preliminary optimization to prune entire subtrees\n     *  of the scene graph.\n     * @returns An array holding the hit testing target and all its ancestors in order. The first element\n     *  is the target itself and the last is {@link PIXI.EventBoundary.rootTarget rootTarget}. This is the opposite\n     *  order w.r.t. the propagation path. If no hit testing target is found, null is returned.\n     */\n    protected hitTestRecursive(\n        currentTarget: DisplayObject,\n        eventMode: EventMode,\n        location: Point,\n        testFn: (object: DisplayObject, pt: Point) => boolean,\n        pruneFn?: (object: DisplayObject, pt: Point) => boolean\n    ): DisplayObject[]\n    {\n        // Attempt to prune this DisplayObject and its subtree as an optimization.\n        if (this._interactivePrune(currentTarget) || pruneFn(currentTarget, location))\n        {\n            return null;\n        }\n\n        if (currentTarget.eventMode === 'dynamic' || eventMode === 'dynamic')\n        {\n            EventsTicker.pauseUpdate = false;\n        }\n\n        // Find a child that passes the hit testing and return one, if any.\n        if (currentTarget.interactiveChildren && currentTarget.children)\n        {\n            const children = currentTarget.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i] as DisplayObject;\n\n                const nestedHit = this.hitTestRecursive(\n                    child,\n                    this._isInteractive(eventMode) ? eventMode : child.eventMode,\n                    location,\n                    testFn,\n                    pruneFn\n                );\n\n                if (nestedHit)\n                {\n                    // Its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent)\n                    {\n                        continue;\n                    }\n\n                    // Only add the current hit-test target to the hit-test chain if the chain\n                    // has already started (i.e. the event target has been found) or if the current\n                    // target is interactive (i.e. it becomes the event target).\n                    const isInteractive = currentTarget.isInteractive();\n\n                    if (nestedHit.length > 0 || isInteractive) nestedHit.push(currentTarget);\n\n                    return nestedHit;\n                }\n            }\n        }\n\n        const isInteractiveMode = this._isInteractive(eventMode);\n        const isInteractiveTarget = currentTarget.isInteractive();\n\n        // Finally, hit test this DisplayObject itself.\n        if (isInteractiveMode && testFn(currentTarget, location))\n        {\n            // The current hit-test target is the event's target only if it is interactive. Otherwise,\n            // the first interactive ancestor will be the event's target.\n            return isInteractiveTarget ? [currentTarget] : [];\n        }\n\n        return null;\n    }\n\n    private _isInteractive(int: EventMode): int is 'static' | 'dynamic'\n    {\n        return int === 'static' || int === 'dynamic';\n    }\n\n    private _interactivePrune(displayObject: DisplayObject): boolean\n    {\n        // If displayObject is a mask, invisible, or not renderable then it cannot be hit directly.\n        if (!displayObject || displayObject.isMask || !displayObject.visible || !displayObject.renderable)\n        {\n            return true;\n        }\n\n        // If this DisplayObject is none then it cannot be hit by anything.\n        if (displayObject.eventMode === 'none')\n        {\n            return true;\n        }\n\n        // If this DisplayObject is passive and it has no interactive children then it cannot be hit\n        if (displayObject.eventMode === 'passive' && !displayObject.interactiveChildren)\n        {\n            return true;\n        }\n\n        // If displayObject is a mask then it cannot be hit directly.\n        if (displayObject.isMask)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the display object or any of its children cannot pass the hit test at all.\n     *\n     * {@link PIXI.EventBoundary}'s implementation uses the {@link PIXI.DisplayObject.hitArea hitArea}\n     * and {@link PIXI.DisplayObject._mask} for pruning.\n     * @param displayObject\n     * @param location\n     */\n    protected hitPruneFn(displayObject: DisplayObject, location: Point): boolean\n    {\n        if (displayObject.hitArea)\n        {\n            displayObject.worldTransform.applyInverse(location, tempLocalMapping);\n\n            if (!displayObject.hitArea.contains(tempLocalMapping.x, tempLocalMapping.y))\n            {\n                return true;\n            }\n        }\n\n        if (displayObject._mask)\n        {\n            const maskObject = ((displayObject._mask as any).isMaskData\n                ? (displayObject._mask as any).maskObject : displayObject._mask);\n\n            if (maskObject && !maskObject.containsPoint?.(location))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the display object passes hit testing for the given location.\n     * @param displayObject\n     * @param location\n     * @returns - Whether `displayObject` passes hit testing for `location`.\n     */\n    protected hitTestFn(displayObject: DisplayObject, location: Point): boolean\n    {\n        // If the displayObject is passive then it cannot be hit directly.\n        if (displayObject.eventMode === 'passive')\n        {\n            return false;\n        }\n\n        // If the display object failed pruning with a hitArea, then it must pass it.\n        if (displayObject.hitArea)\n        {\n            return true;\n        }\n\n        if ((displayObject as any).containsPoint)\n        {\n            return (displayObject as any).containsPoint(location) as boolean;\n        }\n\n        // TODO: Should we hit test based on bounds?\n\n        return false;\n    }\n\n    /**\n     * Notify all the listeners to the event's `currentTarget`.\n     *\n     * If the `currentTarget` contains the property `on<type>`, then it is called here,\n     * simulating the behavior from version 6.x and prior.\n     * @param e - The event passed to the target.\n     * @param type\n     */\n    protected notifyTarget(e: FederatedEvent, type?: string): void\n    {\n        type = type ?? e.type;\n\n        // call the `on${type}` for the current target if it exists\n        const handlerKey = `on${type}` as keyof IFederatedDisplayObject;\n\n        (e.currentTarget[handlerKey] as FederatedEventHandler<FederatedEvent>)?.(e);\n\n        const key = e.eventPhase === e.CAPTURING_PHASE || e.eventPhase === e.AT_TARGET ? `${type}capture` : type;\n\n        this.notifyListeners(e, key);\n\n        if (e.eventPhase === e.AT_TARGET)\n        {\n            this.notifyListeners(e, type);\n        }\n    }\n\n    /**\n     * Maps the upstream `pointerdown` events to a downstream `pointerdown` event.\n     *\n     * `touchstart`, `rightdown`, `mousedown` events are also dispatched for specific pointer types.\n     * @param from\n     */\n    protected mapPointerDown(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const e = this.createPointerEvent(from);\n\n        this.dispatchEvent(e, 'pointerdown');\n\n        if (e.pointerType === 'touch')\n        {\n            this.dispatchEvent(e, 'touchstart');\n        }\n        else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n        {\n            const isRightButton = e.button === 2;\n\n            this.dispatchEvent(e, isRightButton ? 'rightdown' : 'mousedown');\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n\n        trackingData.pressTargetsByButton[from.button] = e.composedPath();\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointermove` to downstream `pointerout`, `pointerover`, and `pointermove` events, in that order.\n     *\n     * The tracking data for the specific pointer has an updated `overTarget`. `mouseout`, `mouseover`,\n     * `mousemove`, and `touchmove` events are fired as well for specific pointer types.\n     * @param from - The upstream `pointermove` event.\n     */\n    protected mapPointerMove(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        this._allInteractiveElements.length = 0;\n        this._hitElements.length = 0;\n        this._isPointerMoveEvent = true;\n        const e = this.createPointerEvent(from);\n\n        this._isPointerMoveEvent = false;\n        const isMouse = e.pointerType === 'mouse' || e.pointerType === 'pen';\n        const trackingData = this.trackingData(from.pointerId);\n        const outTarget = this.findMountedTarget(trackingData.overTargets);\n\n        // First pointerout/pointerleave\n        if (trackingData.overTargets?.length > 0 && outTarget !== e.target)\n        {\n            // pointerout always occurs on the overTarget when the pointer hovers over another element.\n            const outType = from.type === 'mousemove' ? 'mouseout' : 'pointerout';\n            const outEvent = this.createPointerEvent(from, outType, outTarget);\n\n            this.dispatchEvent(outEvent, 'pointerout');\n            if (isMouse) this.dispatchEvent(outEvent, 'mouseout');\n\n            // If the pointer exits overTarget and its descendants, then a pointerleave event is also fired. This event\n            // is dispatched to all ancestors that no longer capture the pointer.\n            if (!e.composedPath().includes(outTarget))\n            {\n                const leaveEvent = this.createPointerEvent(from, 'pointerleave', outTarget);\n\n                leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n\n                while (leaveEvent.target && !e.composedPath().includes(leaveEvent.target))\n                {\n                    leaveEvent.currentTarget = leaveEvent.target;\n\n                    this.notifyTarget(leaveEvent);\n                    if (isMouse) this.notifyTarget(leaveEvent, 'mouseleave');\n\n                    leaveEvent.target = leaveEvent.target.parent;\n                }\n\n                this.freeEvent(leaveEvent);\n            }\n\n            this.freeEvent(outEvent);\n        }\n\n        // Then pointerover\n        if (outTarget !== e.target)\n        {\n            // pointerover always occurs on the new overTarget\n            const overType = from.type === 'mousemove' ? 'mouseover' : 'pointerover';\n            const overEvent = this.clonePointerEvent(e, overType);// clone faster\n\n            this.dispatchEvent(overEvent, 'pointerover');\n            if (isMouse) this.dispatchEvent(overEvent, 'mouseover');\n\n            // Probe whether the newly hovered DisplayObject is an ancestor of the original overTarget.\n            let overTargetAncestor = outTarget?.parent;\n\n            while (overTargetAncestor && overTargetAncestor !== this.rootTarget.parent)\n            {\n                if (overTargetAncestor === e.target) break;\n\n                overTargetAncestor = overTargetAncestor.parent;\n            }\n\n            // The pointer has entered a non-ancestor of the original overTarget. This means we need a pointerentered\n            // event.\n            const didPointerEnter = !overTargetAncestor || overTargetAncestor === this.rootTarget.parent;\n\n            if (didPointerEnter)\n            {\n                const enterEvent = this.clonePointerEvent(e, 'pointerenter');\n\n                enterEvent.eventPhase = enterEvent.AT_TARGET;\n\n                while (enterEvent.target\n                        && enterEvent.target !== outTarget\n                        && enterEvent.target !== this.rootTarget.parent)\n                {\n                    enterEvent.currentTarget = enterEvent.target;\n\n                    this.notifyTarget(enterEvent);\n                    if (isMouse) this.notifyTarget(enterEvent, 'mouseenter');\n\n                    enterEvent.target = enterEvent.target.parent;\n                }\n\n                this.freeEvent(enterEvent);\n            }\n\n            this.freeEvent(overEvent);\n        }\n\n        const allMethods: string[] = [];\n        const allowGlobalPointerEvents = this.enableGlobalMoveEvents ?? true;\n\n        /* eslint-disable @typescript-eslint/no-unused-expressions */\n        this.moveOnAll ? allMethods.push('pointermove') : this.dispatchEvent(e, 'pointermove');\n        allowGlobalPointerEvents && allMethods.push('globalpointermove');\n\n        // Then pointermove\n        if (e.pointerType === 'touch')\n        {\n            this.moveOnAll ? allMethods.splice(1, 0, 'touchmove') : this.dispatchEvent(e, 'touchmove');\n            allowGlobalPointerEvents && allMethods.push('globaltouchmove');\n        }\n\n        if (isMouse)\n        {\n            this.moveOnAll ? allMethods.splice(1, 0, 'mousemove') : this.dispatchEvent(e, 'mousemove');\n            allowGlobalPointerEvents && allMethods.push('globalmousemove');\n            this.cursor = e.target?.cursor;\n        }\n\n        if (allMethods.length > 0)\n        {\n            this.all(e, allMethods);\n        }\n        this._allInteractiveElements.length = 0;\n        this._hitElements.length = 0;\n        /* eslint-enable @typescript-eslint/no-unused-expressions */\n\n        trackingData.overTargets = e.composedPath();\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointerover` to downstream `pointerover` and `pointerenter` events, in that order.\n     *\n     * The tracking data for the specific pointer gets a new `overTarget`.\n     * @param from - The upstream `pointerover` event.\n     */\n    protected mapPointerOver(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const e = this.createPointerEvent(from);\n        const isMouse = e.pointerType === 'mouse' || e.pointerType === 'pen';\n\n        this.dispatchEvent(e, 'pointerover');\n        if (isMouse) this.dispatchEvent(e, 'mouseover');\n        if (e.pointerType === 'mouse') this.cursor = e.target?.cursor;\n\n        // pointerenter events must be fired since the pointer entered from upstream.\n        const enterEvent = this.clonePointerEvent(e, 'pointerenter');\n\n        enterEvent.eventPhase = enterEvent.AT_TARGET;\n\n        while (enterEvent.target && enterEvent.target !== this.rootTarget.parent)\n        {\n            enterEvent.currentTarget = enterEvent.target;\n\n            this.notifyTarget(enterEvent);\n            if (isMouse) this.notifyTarget(enterEvent, 'mouseenter');\n\n            enterEvent.target = enterEvent.target.parent;\n        }\n\n        trackingData.overTargets = e.composedPath();\n\n        this.freeEvent(e);\n        this.freeEvent(enterEvent);\n    }\n\n    /**\n     * Maps the upstream `pointerout` to downstream `pointerout`, `pointerleave` events, in that order.\n     *\n     * The tracking data for the specific pointer is cleared of a `overTarget`.\n     * @param from - The upstream `pointerout` event.\n     */\n    protected mapPointerOut(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n\n        if (trackingData.overTargets)\n        {\n            const isMouse = from.pointerType === 'mouse' || from.pointerType === 'pen';\n            const outTarget = this.findMountedTarget(trackingData.overTargets);\n\n            // pointerout first\n            const outEvent = this.createPointerEvent(from, 'pointerout', outTarget);\n\n            this.dispatchEvent(outEvent);\n            if (isMouse) this.dispatchEvent(outEvent, 'mouseout');\n\n            // pointerleave(s) are also dispatched b/c the pointer must've left rootTarget and its descendants to\n            // get an upstream pointerout event (upstream events do not know rootTarget has descendants).\n            const leaveEvent = this.createPointerEvent(from, 'pointerleave', outTarget);\n\n            leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n\n            while (leaveEvent.target && leaveEvent.target !== this.rootTarget.parent)\n            {\n                leaveEvent.currentTarget = leaveEvent.target;\n\n                this.notifyTarget(leaveEvent);\n                if (isMouse) this.notifyTarget(leaveEvent, 'mouseleave');\n\n                leaveEvent.target = leaveEvent.target.parent;\n            }\n\n            trackingData.overTargets = null;\n\n            this.freeEvent(outEvent);\n            this.freeEvent(leaveEvent);\n        }\n\n        this.cursor = null;\n    }\n\n    /**\n     * Maps the upstream `pointerup` event to downstream `pointerup`, `pointerupoutside`,\n     * and `click`/`rightclick`/`pointertap` events, in that order.\n     *\n     * The `pointerupoutside` event bubbles from the original `pointerdown` target to the most specific\n     * ancestor of the `pointerdown` and `pointerup` targets, which is also the `click` event's target. `touchend`,\n     * `rightup`, `mouseup`, `touchendoutside`, `rightupoutside`, `mouseupoutside`, and `tap` are fired as well for\n     * specific pointer types.\n     * @param from - The upstream `pointerup` event.\n     */\n    protected mapPointerUp(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const now = performance.now();\n        const e = this.createPointerEvent(from);\n\n        this.dispatchEvent(e, 'pointerup');\n\n        if (e.pointerType === 'touch')\n        {\n            this.dispatchEvent(e, 'touchend');\n        }\n        else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n        {\n            const isRightButton = e.button === 2;\n\n            this.dispatchEvent(e, isRightButton ? 'rightup' : 'mouseup');\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n\n        let clickTarget = pressTarget;\n\n        // pointerupoutside only bubbles. It only bubbles upto the parent that doesn't contain\n        // the pointerup location.\n        if (pressTarget && !e.composedPath().includes(pressTarget))\n        {\n            let currentTarget = pressTarget;\n\n            while (currentTarget && !e.composedPath().includes(currentTarget))\n            {\n                e.currentTarget = currentTarget;\n\n                this.notifyTarget(e, 'pointerupoutside');\n\n                if (e.pointerType === 'touch')\n                {\n                    this.notifyTarget(e, 'touchendoutside');\n                }\n                else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n                {\n                    const isRightButton = e.button === 2;\n\n                    this.notifyTarget(e, isRightButton ? 'rightupoutside' : 'mouseupoutside');\n                }\n\n                currentTarget = currentTarget.parent;\n            }\n\n            delete trackingData.pressTargetsByButton[from.button];\n\n            // currentTarget is the most specific ancestor holding both the pointerdown and pointerup\n            // targets. That is - it's our click target!\n            clickTarget = currentTarget;\n        }\n\n        // click!\n        if (clickTarget)\n        {\n            const clickEvent = this.clonePointerEvent(e, 'click');\n\n            clickEvent.target = clickTarget;\n            clickEvent.path = null;\n\n            if (!trackingData.clicksByButton[from.button])\n            {\n                trackingData.clicksByButton[from.button] = {\n                    clickCount: 0,\n                    target: clickEvent.target,\n                    timeStamp: now,\n                };\n            }\n\n            const clickHistory = trackingData.clicksByButton[from.button];\n\n            if (clickHistory.target === clickEvent.target\n                && now - clickHistory.timeStamp < 200)\n            {\n                ++clickHistory.clickCount;\n            }\n            else\n            {\n                clickHistory.clickCount = 1;\n            }\n\n            clickHistory.target = clickEvent.target;\n            clickHistory.timeStamp = now;\n\n            clickEvent.detail = clickHistory.clickCount;\n\n            if (clickEvent.pointerType === 'mouse')\n            {\n                const isRightButton = clickEvent.button === 2;\n\n                this.dispatchEvent(clickEvent, isRightButton ? 'rightclick' : 'click');\n            }\n            else if (clickEvent.pointerType === 'touch')\n            {\n                this.dispatchEvent(clickEvent, 'tap');\n            }\n\n            this.dispatchEvent(clickEvent, 'pointertap');\n\n            this.freeEvent(clickEvent);\n        }\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointerupoutside` event to a downstream `pointerupoutside` event, bubbling from the original\n     * `pointerdown` target to `rootTarget`.\n     *\n     * (The most specific ancestor of the `pointerdown` event and the `pointerup` event must the\n     * `{@link PIXI.EventBoundary}'s root because the `pointerup` event occurred outside of the boundary.)\n     *\n     * `touchendoutside`, `mouseupoutside`, and `rightupoutside` events are fired as well for specific pointer\n     * types. The tracking data for the specific pointer is cleared of a `pressTarget`.\n     * @param from - The upstream `pointerupoutside` event.\n     */\n    protected mapPointerUpOutside(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n        const e = this.createPointerEvent(from);\n\n        if (pressTarget)\n        {\n            let currentTarget = pressTarget;\n\n            while (currentTarget)\n            {\n                e.currentTarget = currentTarget;\n\n                this.notifyTarget(e, 'pointerupoutside');\n\n                if (e.pointerType === 'touch')\n                {\n                    this.notifyTarget(e, 'touchendoutside');\n                }\n                else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n                {\n                    this.notifyTarget(e, e.button === 2 ? 'rightupoutside' : 'mouseupoutside');\n                }\n\n                currentTarget = currentTarget.parent;\n            }\n\n            delete trackingData.pressTargetsByButton[from.button];\n        }\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `wheel` event to a downstream `wheel` event.\n     * @param from - The upstream `wheel` event.\n     */\n    protected mapWheel(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedWheelEvent))\n        {\n            console.warn('EventBoundary cannot map a non-wheel event as a wheel event');\n\n            return;\n        }\n\n        const wheelEvent = this.createWheelEvent(from);\n\n        this.dispatchEvent(wheelEvent);\n        this.freeEvent(wheelEvent);\n    }\n\n    /**\n     * Finds the most specific event-target in the given propagation path that is still mounted in the scene graph.\n     *\n     * This is used to find the correct `pointerup` and `pointerout` target in the case that the original `pointerdown`\n     * or `pointerover` target was unmounted from the scene graph.\n     * @param propagationPath - The propagation path was valid in the past.\n     * @returns - The most specific event-target still mounted at the same location in the scene graph.\n     */\n    protected findMountedTarget(propagationPath: FederatedEventTarget[]): FederatedEventTarget\n    {\n        if (!propagationPath)\n        {\n            return null;\n        }\n\n        let currentTarget = propagationPath[0];\n\n        for (let i = 1; i < propagationPath.length; i++)\n        {\n            // Set currentTarget to the next target in the path only if it is still attached to the\n            // scene graph (i.e. parent still points to the expected ancestor).\n            if (propagationPath[i].parent === currentTarget)\n            {\n                currentTarget = propagationPath[i];\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        return currentTarget;\n    }\n\n    /**\n     * Creates an event whose {@code originalEvent} is {@code from}, with an optional `type` and `target` override.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The {@code originalEvent} for the returned event.\n     * @param [type=from.type] - The type of the returned event.\n     * @param target - The target of the returned event.\n     */\n    protected createPointerEvent(\n        from: FederatedPointerEvent,\n        type?: string,\n        target?: FederatedEventTarget\n    ): FederatedPointerEvent\n    {\n        const event = this.allocateEvent(FederatedPointerEvent);\n\n        this.copyPointerData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from;\n        event.target = target\n            ?? this.hitTest(event.global.x, event.global.y) as FederatedEventTarget\n            ?? this._hitElements[0];\n\n        if (typeof type === 'string')\n        {\n            event.type = type;\n        }\n\n        return event;\n    }\n\n    /**\n     * Creates a wheel event whose {@code originalEvent} is {@code from}.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The upstream wheel event.\n     */\n    protected createWheelEvent(from: FederatedWheelEvent): FederatedWheelEvent\n    {\n        const event = this.allocateEvent(FederatedWheelEvent);\n\n        this.copyWheelData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from;\n        event.target = this.hitTest(event.global.x, event.global.y);\n\n        return event;\n    }\n\n    /**\n     * Clones the event {@code from}, with an optional {@code type} override.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The event to clone.\n     * @param [type=from.type] - The type of the returned event.\n     */\n    protected clonePointerEvent(from: FederatedPointerEvent, type?: string): FederatedPointerEvent\n    {\n        const event = this.allocateEvent(FederatedPointerEvent);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from.originalEvent;\n\n        this.copyPointerData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        // copy propagation path for perf\n        event.target = from.target;\n        event.path = from.composedPath().slice();\n        event.type = type ?? event.type;\n\n        return event;\n    }\n\n    /**\n     * Copies wheel {@link PIXI.FederatedWheelEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + deltaMode\n     * + deltaX\n     * + deltaY\n     * + deltaZ\n     * @param from\n     * @param to\n     */\n    protected copyWheelData(from: FederatedWheelEvent, to: FederatedWheelEvent): void\n    {\n        to.deltaMode = from.deltaMode;\n        to.deltaX = from.deltaX;\n        to.deltaY = from.deltaY;\n        to.deltaZ = from.deltaZ;\n    }\n\n    /**\n     * Copies pointer {@link PIXI.FederatedPointerEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + pointerId\n     * + width\n     * + height\n     * + isPrimary\n     * + pointerType\n     * + pressure\n     * + tangentialPressure\n     * + tiltX\n     * + tiltY\n     * @param from\n     * @param to\n     */\n    protected copyPointerData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent && to instanceof FederatedPointerEvent)) return;\n\n        to.pointerId = from.pointerId;\n        to.width = from.width;\n        to.height = from.height;\n        to.isPrimary = from.isPrimary;\n        to.pointerType = from.pointerType;\n        to.pressure = from.pressure;\n        to.tangentialPressure = from.tangentialPressure;\n        to.tiltX = from.tiltX;\n        to.tiltY = from.tiltY;\n        to.twist = from.twist;\n    }\n\n    /**\n     * Copies mouse {@link PIXI.FederatedMouseEvent} data from {@code from} to {@code to}.\n     *\n     * The following properties are copied:\n     * + altKey\n     * + button\n     * + buttons\n     * + clientX\n     * + clientY\n     * + metaKey\n     * + movementX\n     * + movementY\n     * + pageX\n     * + pageY\n     * + x\n     * + y\n     * + screen\n     * + shiftKey\n     * + global\n     * @param from\n     * @param to\n     */\n    protected copyMouseData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedMouseEvent && to instanceof FederatedMouseEvent)) return;\n\n        to.altKey = from.altKey;\n        to.button = from.button;\n        to.buttons = from.buttons;\n        to.client.copyFrom(from.client);\n        to.ctrlKey = from.ctrlKey;\n        to.metaKey = from.metaKey;\n        to.movement.copyFrom(from.movement);\n        to.screen.copyFrom(from.screen);\n        to.shiftKey = from.shiftKey;\n        to.global.copyFrom(from.global);\n    }\n\n    /**\n     * Copies base {@link PIXI.FederatedEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + isTrusted\n     * + srcElement\n     * + timeStamp\n     * + type\n     * @param from - The event to copy data from.\n     * @param to - The event to copy data into.\n     */\n    protected copyData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        to.isTrusted = from.isTrusted;\n        to.srcElement = from.srcElement;\n        to.timeStamp = performance.now();\n        to.type = from.type;\n        to.detail = from.detail;\n        to.view = from.view;\n        to.which = from.which;\n        to.layer.copyFrom(from.layer);\n        to.page.copyFrom(from.page);\n    }\n\n    /**\n     * @param id - The pointer ID.\n     * @returns The tracking data stored for the given pointer. If no data exists, a blank\n     *  state will be created.\n     */\n    protected trackingData(id: number): TrackingData\n    {\n        if (!this.mappingState.trackingData[id])\n        {\n            this.mappingState.trackingData[id] = {\n                pressTargetsByButton: {},\n                clicksByButton: {},\n                overTarget: null\n            };\n        }\n\n        return this.mappingState.trackingData[id];\n    }\n\n    /**\n     * Allocate a specific type of event from {@link PIXI.EventBoundary#eventPool this.eventPool}.\n     *\n     * This allocation is constructor-agnostic, as long as it only takes one argument - this event\n     * boundary.\n     * @param constructor - The event's constructor.\n     */\n    protected allocateEvent<T extends FederatedEvent>(\n        constructor: { new(boundary: EventBoundary): T }\n    ): T\n    {\n        if (!this.eventPool.has(constructor as any))\n        {\n            this.eventPool.set(constructor as any, []);\n        }\n\n        const event = this.eventPool.get(constructor as any).pop() as T\n            || new constructor(this);\n\n        event.eventPhase = event.NONE;\n        event.currentTarget = null;\n        event.path = null;\n        event.target = null;\n\n        return event;\n    }\n\n    /**\n     * Frees the event and puts it back into the event pool.\n     *\n     * It is illegal to reuse the event until it is allocated again, using `this.allocateEvent`.\n     *\n     * It is also advised that events not allocated from {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}\n     * not be freed. This is because of the possibility that the same event is freed twice, which can cause\n     * it to be allocated twice & result in overwriting.\n     * @param event - The event to be freed.\n     * @throws Error if the event is managed by another event boundary.\n     */\n    protected freeEvent<T extends FederatedEvent>(event: T): void\n    {\n        if (event.manager !== this) throw new Error('It is illegal to free an event not managed by this EventBoundary!');\n\n        const constructor = event.constructor;\n\n        if (!this.eventPool.has(constructor as any))\n        {\n            this.eventPool.set(constructor as any, []);\n        }\n\n        this.eventPool.get(constructor as any).push(event);\n    }\n\n    /**\n     * Similar to {@link PIXI.EventEmitter.emit}, except it stops if the `propagationImmediatelyStopped` flag\n     * is set on the event.\n     * @param e - The event to call each listener with.\n     * @param type - The event key.\n     */\n    private notifyListeners(e: FederatedEvent, type: string): void\n    {\n        const listeners = ((e.currentTarget as any)._events as EmitterListeners)[type];\n\n        if (!listeners) return;\n        if (!e.currentTarget.isInteractive()) return;\n\n        if ('fn' in listeners)\n        {\n            if (listeners.once) e.currentTarget.removeListener(type, listeners.fn, undefined, true);\n            listeners.fn.call(listeners.context, e);\n        }\n        else\n        {\n            for (\n                let i = 0, j = listeners.length;\n                i < j && !e.propagationImmediatelyStopped;\n                i++)\n            {\n                if (listeners[i].once) e.currentTarget.removeListener(type, listeners[i].fn, undefined, true);\n                listeners[i].fn.call(listeners[i].context, e);\n            }\n        }\n    }\n}\n", "import { extensions, ExtensionType } from '@pixi/core';\nimport { EventBoundary } from './EventBoundary';\nimport { EventsTicker } from './EventTicker';\nimport { FederatedPointerEvent } from './FederatedPointerEvent';\nimport { FederatedWheelEvent } from './FederatedWheelEvent';\n\nimport type { ExtensionMetadata, IPointData, IRenderer, ISystem } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\nimport type { PixiTouch } from './FederatedEvent';\nimport type { EventMode } from './FederatedEventTarget';\nimport type { FederatedMouseEvent } from './FederatedMouseEvent';\n\nconst MOUSE_POINTER_ID = 1;\nconst TOUCH_TO_POINTER: Record<string, string> = {\n    touchstart: 'pointerdown',\n    touchend: 'pointerup',\n    touchendoutside: 'pointerupoutside',\n    touchmove: 'pointermove',\n    touchcancel: 'pointercancel',\n};\n\n/** @ignore */\nexport interface EventSystemOptions\n{\n    /**\n     * The default event mode mode for all display objects.\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @memberof PIXI.IRendererOptions\n     */\n    eventMode?: EventMode;\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @memberof PIXI.IRendererOptions\n     * @example\n     * const app = new PIXI.Application({\n     *   view: canvas,\n     *   events: {\n     *     move: true,\n     *     globalMove: false,\n     *     click: true,\n     *     wheel: true,\n     *   },\n     * });\n     */\n    eventFeatures?: Partial<EventSystemFeatures>\n}\n\n/**\n * The event features that are enabled by the EventSystem\n * This option only is available when using **@pixi/events** package\n * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n * @memberof PIXI\n * @since 7.2.0\n */\ninterface EventSystemFeatures\n{\n    /**\n     * Enables pointer events associated with pointer movement:\n     * - `pointermove` / `mousemove` / `touchmove`\n     * - `pointerout` / `mouseout`\n     * - `pointerover` / `mouseover`\n     */\n    move: boolean;\n    // eslint-disable-next-line jsdoc/multiline-blocks\n    /**\n     * Enables global pointer move events:\n     * - `globalpointermove`\n     * - `globalmousemove`\n     * - `globaltouchemove`\n     */\n    globalMove: boolean;\n    /**\n     * Enables pointer events associated with clicking:\n     * - `pointerup` / `mouseup` / `touchend` / 'rightup'\n     * - `pointerupoutside` / `mouseupoutside` / `touchendoutside` / 'rightupoutside'\n     * - `pointerdown` / 'mousedown' / `touchstart` / 'rightdown'\n     * - `click` / `tap`\n     */\n    click: boolean;\n    /** - Enables wheel events. */\n    wheel: boolean;\n}\n\n/**\n * The system for handling UI events.\n * @memberof PIXI\n */\nexport class EventSystem implements ISystem<EventSystemOptions>\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'events',\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n    };\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @since 7.2.0\n     */\n    public static defaultEventFeatures: EventSystemFeatures = {\n        move: true,\n        globalMove: true,\n        click: true,\n        wheel: true,\n    };\n\n    private static _defaultEventMode: EventMode;\n\n    /**\n     * The default interaction mode for all display objects.\n     * @see PIXI.DisplayObject.eventMode\n     * @type {PIXI.EventMode}\n     * @readonly\n     * @since 7.2.0\n     */\n    public static get defaultEventMode()\n    {\n        return this._defaultEventMode;\n    }\n\n    /**\n     * The {@link PIXI.EventBoundary} for the stage.\n     *\n     * The {@link PIXI.EventBoundary#rootTarget rootTarget} of this root boundary is automatically set to\n     * the last rendered object before any event processing is initiated. This means the main scene\n     * needs to be rendered atleast once before UI events will start propagating.\n     *\n     * The root boundary should only be changed during initialization. Otherwise, any state held by the\n     * event boundary may be lost (like hovered & pressed DisplayObjects).\n     */\n    public readonly rootBoundary: EventBoundary;\n\n    /** Does the device support touch events https://www.w3.org/TR/touch-events/ */\n    public readonly supportsTouchEvents = 'ontouchstart' in globalThis;\n\n    /** Does the device support pointer events https://www.w3.org/Submission/pointer-events/ */\n    public readonly supportsPointerEvents = !!globalThis.PointerEvent;\n\n    /**\n     * Should default browser actions automatically be prevented.\n     * Does not apply to pointer events for backwards compatibility\n     * preventDefault on pointer events stops mouse events from firing\n     * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n     * @default true\n     */\n    public autoPreventDefault: boolean;\n\n    /**\n     * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n     * values, objects are handled as dictionaries of CSS values for {@code domElement},\n     * and functions are called instead of changing the CSS.\n     * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n     */\n    public cursorStyles: Record<string, string | ((mode: string) => void) | CSSStyleDeclaration>;\n\n    /**\n     * The DOM element to which the root event listeners are bound. This is automatically set to\n     * the renderer's {@link PIXI.Renderer#view view}.\n     */\n    public domElement: HTMLElement = null;\n\n    /** The resolution used to convert between the DOM client space into world space. */\n    public resolution = 1;\n\n    /** The renderer managing this {@link PIXI.EventSystem}. */\n    public renderer: IRenderer;\n\n    /**\n     * The event features that are enabled by the EventSystem\n     * This option only is available when using **@pixi/events** package\n     * (included in the **pixi.js** and **pixi.js-legacy** bundle), otherwise it will be ignored.\n     * @since 7.2.0\n     * @example\n     * const app = new PIXI.Application()\n     * app.renderer.events.features.globalMove = false\n     *\n     * // to override all features use Object.assign\n     * Object.assign(app.renderer.events.features, {\n     *  move: false,\n     *  globalMove: false,\n     *  click: false,\n     *  wheel: false,\n     * })\n     */\n    public readonly features: EventSystemFeatures;\n\n    private currentCursor: string;\n    private rootPointerEvent: FederatedPointerEvent;\n    private rootWheelEvent: FederatedWheelEvent;\n    private eventsAdded: boolean;\n\n    /**\n     * @param {PIXI.Renderer} renderer\n     */\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n        this.rootBoundary = new EventBoundary(null);\n        EventsTicker.init(this);\n\n        this.autoPreventDefault = true;\n        this.eventsAdded = false;\n\n        this.rootPointerEvent = new FederatedPointerEvent(null);\n        this.rootWheelEvent = new FederatedWheelEvent(null);\n\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        this.features = new Proxy({ ...EventSystem.defaultEventFeatures }, {\n            set: (target, key, value) =>\n            {\n                if (key === 'globalMove')\n                {\n                    this.rootBoundary.enableGlobalMoveEvents = value;\n                }\n                target[key as keyof EventSystemFeatures] = value;\n\n                return true;\n            }\n        });\n\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.onPointerOverOut = this.onPointerOverOut.bind(this);\n        this.onWheel = this.onWheel.bind(this);\n    }\n\n    /**\n     * Runner init called, view is available at this point.\n     * @ignore\n     */\n    init(options: EventSystemOptions): void\n    {\n        const { view, resolution } = this.renderer;\n\n        this.setTargetElement(view as HTMLCanvasElement);\n        this.resolution = resolution;\n        EventSystem._defaultEventMode = options.eventMode ?? 'auto';\n        Object.assign(this.features, options.eventFeatures ?? {});\n        this.rootBoundary.enableGlobalMoveEvents = this.features.globalMove;\n    }\n\n    /**\n     * Handle changing resolution.\n     * @ignore\n     */\n    resolutionChange(resolution: number): void\n    {\n        this.resolution = resolution;\n    }\n\n    /** Destroys all event listeners and detaches the renderer. */\n    destroy(): void\n    {\n        this.setTargetElement(null);\n        this.renderer = null;\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     * @param mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    public setCursor(mode: string): void\n    {\n        mode = mode || 'default';\n        let applyStyles = true;\n\n        // offscreen canvas does not support setting styles, but cursor modes can be functions,\n        // in order to handle pixi rendered cursors, so we can't bail\n        if (globalThis.OffscreenCanvas && this.domElement instanceof OffscreenCanvas)\n        {\n            applyStyles = false;\n        }\n        // if the mode didn't actually change, bail early\n        if (this.currentCursor === mode)\n        {\n            return;\n        }\n        this.currentCursor = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    if (applyStyles)\n                    {\n                        this.domElement.style.cursor = style;\n                    }\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    if (applyStyles)\n                    {\n                        Object.assign(this.domElement.style, style);\n                    }\n                    break;\n            }\n        }\n        else if (applyStyles && typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.domElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * The global pointer event.\n     * Useful for getting the pointer position without listening to events.\n     * @since 7.2.0\n     */\n    public get pointer(): Readonly<FederatedPointerEvent>\n    {\n        return this.rootPointerEvent;\n    }\n\n    /**\n     * Event handler for pointer down events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerDown(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        const events = this.normalizeToPointerData(nativeEvent);\n\n        /*\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && (events[0] as any).isNormalized)\n        {\n            const cancelable = nativeEvent.cancelable || !('cancelable' in nativeEvent);\n\n            if (cancelable)\n            {\n                nativeEvent.preventDefault();\n            }\n        }\n\n        for (let i = 0, j = events.length; i < j; i++)\n        {\n            const nativeEvent = events[i];\n            const federatedEvent = this.bootstrapEvent(this.rootPointerEvent, nativeEvent);\n\n            this.rootBoundary.mapEvent(federatedEvent);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer move events on on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch events.\n     */\n    private onPointerMove(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.move) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        EventsTicker.pointerMoved();\n\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer up events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerUp(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        let target = nativeEvent.target;\n\n        // if in shadow DOM use composedPath to access target\n        if (nativeEvent.composedPath && nativeEvent.composedPath().length > 0)\n        {\n            target = nativeEvent.composedPath()[0];\n        }\n\n        const outside = target !== this.domElement ? 'outside' : '';\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            event.type += outside;\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer over & out events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerOverOut(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        if (!this.features.click) return;\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Passive handler for `wheel` events on {@link PIXI.EventSystem.domElement this.domElement}.\n     * @param nativeEvent - The native wheel event.\n     */\n    protected onWheel(nativeEvent: WheelEvent): void\n    {\n        if (!this.features.wheel) return;\n        const wheelEvent = this.normalizeWheelEvent(nativeEvent);\n\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n        this.rootBoundary.mapEvent(wheelEvent);\n    }\n\n    /**\n     * Sets the {@link PIXI.EventSystem#domElement domElement} and binds event listeners.\n     *\n     * To deregister the current DOM element without setting a new one, pass {@code null}.\n     * @param element - The new DOM element.\n     */\n    public setTargetElement(element: HTMLElement): void\n    {\n        this.removeEvents();\n        this.domElement = element;\n        EventsTicker.domElement = element;\n        this.addEvents();\n    }\n\n    /** Register event listeners on {@link PIXI.Renderer#domElement this.domElement}. */\n    private addEvents(): void\n    {\n        if (this.eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        EventsTicker.addTickerListener();\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        if (style)\n        {\n            if ((globalThis.navigator as any).msPointerEnabled)\n            {\n                style.msContentZooming = 'none';\n                style.msTouchAction = 'none';\n            }\n            else if (this.supportsPointerEvents)\n            {\n                style.touchAction = 'none';\n            }\n        }\n\n        /*\n         * These events are added first, so that if pointer events are normalized, they are fired\n         * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.addEventListener('pointermove', this.onPointerMove, true);\n            this.domElement.addEventListener('pointerdown', this.onPointerDown, true);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.domElement.addEventListener('pointerleave', this.onPointerOverOut, true);\n            this.domElement.addEventListener('pointerover', this.onPointerOverOut, true);\n            // globalThis.addEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.addEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.addEventListener('mousemove', this.onPointerMove, true);\n            this.domElement.addEventListener('mousedown', this.onPointerDown, true);\n            this.domElement.addEventListener('mouseout', this.onPointerOverOut, true);\n            this.domElement.addEventListener('mouseover', this.onPointerOverOut, true);\n            globalThis.addEventListener('mouseup', this.onPointerUp, true);\n\n            if (this.supportsTouchEvents)\n            {\n                this.domElement.addEventListener('touchstart', this.onPointerDown, true);\n                // this.domElement.addEventListener('touchcancel', this.onPointerCancel, true);\n                this.domElement.addEventListener('touchend', this.onPointerUp, true);\n                this.domElement.addEventListener('touchmove', this.onPointerMove, true);\n            }\n        }\n\n        this.domElement.addEventListener('wheel', this.onWheel, {\n            passive: true,\n            capture: true,\n        });\n\n        this.eventsAdded = true;\n    }\n\n    /** Unregister event listeners on {@link PIXI.EventSystem#domElement this.domElement}. */\n    private removeEvents(): void\n    {\n        if (!this.eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        EventsTicker.removeTickerListener();\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        if ((globalThis.navigator as any).msPointerEnabled)\n        {\n            style.msContentZooming = '';\n            style.msTouchAction = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            style.touchAction = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.removeEventListener('pointermove', this.onPointerMove, true);\n            this.domElement.removeEventListener('pointerdown', this.onPointerDown, true);\n            this.domElement.removeEventListener('pointerleave', this.onPointerOverOut, true);\n            this.domElement.removeEventListener('pointerover', this.onPointerOverOut, true);\n            // globalThis.removeEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.removeEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.removeEventListener('mousemove', this.onPointerMove, true);\n            this.domElement.removeEventListener('mousedown', this.onPointerDown, true);\n            this.domElement.removeEventListener('mouseout', this.onPointerOverOut, true);\n            this.domElement.removeEventListener('mouseover', this.onPointerOverOut, true);\n            globalThis.removeEventListener('mouseup', this.onPointerUp, true);\n\n            if (this.supportsTouchEvents)\n            {\n                this.domElement.removeEventListener('touchstart', this.onPointerDown, true);\n                // this.domElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n                this.domElement.removeEventListener('touchend', this.onPointerUp, true);\n                this.domElement.removeEventListener('touchmove', this.onPointerMove, true);\n            }\n        }\n\n        this.domElement.removeEventListener('wheel', this.onWheel, true);\n\n        this.domElement = null;\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     * @param  {PIXI.IPointData} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    public mapPositionToPoint(point: IPointData, x: number, y: number): void\n    {\n        const rect = this.domElement.isConnected\n            ? this.domElement.getBoundingClientRect()\n            : {\n                x: 0,\n                y: 0,\n                width: (this.domElement as any).width,\n                height: (this.domElement as any).height,\n                left: 0,\n                top: 0\n            };\n\n        const resolutionMultiplier = 1.0 / this.resolution;\n\n        point.x = ((x - rect.left) * ((this.domElement as any).width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * ((this.domElement as any).height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     * @param event - The original event data from a touch or mouse event\n     * @returns An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    private normalizeToPointerData(event: TouchEvent | MouseEvent | PointerEvent): PointerEvent[]\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i] as PixiTouch;\n\n                if (typeof touch.button === 'undefined') touch.button = 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = 1;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n                touch.type = event.type;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (!globalThis.MouseEvent\n            || (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))))\n        {\n            const tempEvent = event as PixiPointerEvent;\n\n            if (typeof tempEvent.isPrimary === 'undefined') tempEvent.isPrimary = true;\n            if (typeof tempEvent.width === 'undefined') tempEvent.width = 1;\n            if (typeof tempEvent.height === 'undefined') tempEvent.height = 1;\n            if (typeof tempEvent.tiltX === 'undefined') tempEvent.tiltX = 0;\n            if (typeof tempEvent.tiltY === 'undefined') tempEvent.tiltY = 0;\n            if (typeof tempEvent.pointerType === 'undefined') tempEvent.pointerType = 'mouse';\n            if (typeof tempEvent.pointerId === 'undefined') tempEvent.pointerId = MOUSE_POINTER_ID;\n            if (typeof tempEvent.pressure === 'undefined') tempEvent.pressure = 0.5;\n            if (typeof tempEvent.twist === 'undefined') tempEvent.twist = 0;\n            if (typeof tempEvent.tangentialPressure === 'undefined') tempEvent.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            tempEvent.isNormalized = true;\n\n            normalizedEvents.push(tempEvent);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents as PointerEvent[];\n    }\n\n    /**\n     * Normalizes the native {@link https://w3c.github.io/uievents/#interface-wheelevent WheelEvent}.\n     *\n     * The returned {@link PIXI.FederatedWheelEvent} is a shared instance. It will not persist across\n     * multiple native wheel events.\n     * @param nativeEvent - The native wheel event that occurred on the canvas.\n     * @returns A federated wheel event.\n     */\n    protected normalizeWheelEvent(nativeEvent: WheelEvent): FederatedWheelEvent\n    {\n        const event = this.rootWheelEvent;\n\n        this.transferMouseData(event, nativeEvent);\n\n        // When WheelEvent is triggered by scrolling with mouse wheel, reading WheelEvent.deltaMode\n        // before deltaX/deltaY/deltaZ on Firefox will result in WheelEvent.DOM_DELTA_LINE (1),\n        // while reading WheelEvent.deltaMode after deltaX/deltaY/deltaZ on Firefox or reading\n        // in any order on other browsers will result in WheelEvent.DOM_DELTA_PIXEL (0).\n        // Therefore, we need to read WheelEvent.deltaMode after deltaX/deltaY/deltaZ in order to\n        // make its behavior more consistent across browsers.\n        // @see https://github.com/pixijs/pixijs/issues/8970\n        event.deltaX = nativeEvent.deltaX;\n        event.deltaY = nativeEvent.deltaY;\n        event.deltaZ = nativeEvent.deltaZ;\n        event.deltaMode = nativeEvent.deltaMode;\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);\n        event.offset.copyFrom(event.screen);\n\n        event.nativeEvent = nativeEvent;\n        event.type = nativeEvent.type;\n\n        return event;\n    }\n\n    /**\n     * Normalizes the `nativeEvent` into a federateed {@link PIXI.FederatedPointerEvent}.\n     * @param event\n     * @param nativeEvent\n     */\n    private bootstrapEvent(event: FederatedPointerEvent, nativeEvent: PointerEvent): FederatedPointerEvent\n    {\n        event.originalEvent = null;\n        event.nativeEvent = nativeEvent;\n\n        event.pointerId = nativeEvent.pointerId;\n        event.width = nativeEvent.width;\n        event.height = nativeEvent.height;\n        event.isPrimary = nativeEvent.isPrimary;\n        event.pointerType = nativeEvent.pointerType;\n        event.pressure = nativeEvent.pressure;\n        event.tangentialPressure = nativeEvent.tangentialPressure;\n        event.tiltX = nativeEvent.tiltX;\n        event.tiltY = nativeEvent.tiltY;\n        event.twist = nativeEvent.twist;\n        this.transferMouseData(event, nativeEvent);\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);// global = screen for top-level\n        event.offset.copyFrom(event.screen);// EventBoundary recalculates using its rootTarget\n\n        event.isTrusted = nativeEvent.isTrusted;\n        if (event.type === 'pointerleave')\n        {\n            event.type = 'pointerout';\n        }\n        if (event.type.startsWith('mouse'))\n        {\n            event.type = event.type.replace('mouse', 'pointer');\n        }\n        if (event.type.startsWith('touch'))\n        {\n            event.type = TOUCH_TO_POINTER[event.type] || event.type;\n        }\n\n        return event;\n    }\n\n    /**\n     * Transfers base & mouse event data from the {@code nativeEvent} to the federated event.\n     * @param event\n     * @param nativeEvent\n     */\n    private transferMouseData(event: FederatedMouseEvent, nativeEvent: MouseEvent): void\n    {\n        event.isTrusted = nativeEvent.isTrusted;\n        event.srcElement = nativeEvent.srcElement;\n        event.timeStamp = performance.now();\n        event.type = nativeEvent.type;\n\n        event.altKey = nativeEvent.altKey;\n        event.button = nativeEvent.button;\n        event.buttons = nativeEvent.buttons;\n        event.client.x = nativeEvent.clientX;\n        event.client.y = nativeEvent.clientY;\n        event.ctrlKey = nativeEvent.ctrlKey;\n        event.metaKey = nativeEvent.metaKey;\n        event.movement.x = nativeEvent.movementX;\n        event.movement.y = nativeEvent.movementY;\n        event.page.x = nativeEvent.pageX;\n        event.page.y = nativeEvent.pageY;\n        event.relatedTarget = null;\n        event.shiftKey = nativeEvent.shiftKey;\n    }\n}\n\ninterface CrossCSSStyleDeclaration extends CSSStyleDeclaration\n{\n    msContentZooming: string;\n    msTouchAction: string;\n}\n\ninterface PixiPointerEvent extends PointerEvent\n{\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    isNormalized: boolean;\n    type: string;\n}\n\nextensions.add(EventSystem);\n", "import { utils } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { EventSystem } from './EventSystem';\nimport { FederatedEvent } from './FederatedEvent';\n\nimport type { AllFederatedEventMap } from './FederatedEventMap';\nimport type { FederatedPointerEvent } from './FederatedPointerEvent';\nimport type { FederatedWheelEvent } from './FederatedWheelEvent';\n\nexport type Cursor = 'auto'\n| 'default'\n| 'none'\n| 'context-menu'\n| 'help'\n| 'pointer'\n| 'progress'\n| 'wait'\n| 'cell'\n| 'crosshair'\n| 'text'\n| 'vertical-text'\n| 'alias'\n| 'copy'\n| 'move'\n| 'no-drop'\n| 'not-allowed'\n| 'e-resize'\n| 'n-resize'\n| 'ne-resize'\n| 'nw-resize'\n| 's-resize'\n| 'se-resize'\n| 'sw-resize'\n| 'w-resize'\n| 'ns-resize'\n| 'ew-resize'\n| 'nesw-resize'\n| 'col-resize'\n| 'nwse-resize'\n| 'row-resize'\n| 'all-scroll'\n| 'zoom-in'\n| 'zoom-out'\n| 'grab'\n| 'grabbing';\n\n// @ignore - This is documented elsewhere.\nexport interface IHitArea\n{\n    contains(x: number, y: number): boolean;\n}\n\n/**\n * Function type for handlers, e.g., onclick\n * @memberof PIXI\n */\nexport type FederatedEventHandler<T= FederatedPointerEvent> = (event: T) => void;\n\n/**\n * The type of interaction a DisplayObject can be. For more information on values and their meaning,\n * see {@link PIXI.DisplayObject.eventMode DisplayObject's eventMode property}.\n * @memberof PIXI\n * @since 7.2.0\n */\nexport type EventMode = 'none' | 'passive' | 'auto' | 'static' | 'dynamic';\n\n/**\n * Describes the shape for a {@link PIXI.FederatedEvent}'s' `eventTarget`.\n * @memberof PIXI\n */\nexport interface FederatedEventTarget extends utils.EventEmitter, EventTarget\n{\n    /** The cursor preferred when the mouse pointer is hovering over. */\n    cursor: Cursor | string;\n\n    /** The parent of this event target. */\n    readonly parent?: FederatedEventTarget;\n\n    /** The children of this event target. */\n    readonly children?: ReadonlyArray<FederatedEventTarget>;\n\n    /** Whether this event target should fire UI events. */\n    interactive: boolean\n    _internalInteractive: boolean;\n    /** The mode of interaction for this object */\n    eventMode: EventMode;\n    _internalEventMode: EventMode;\n\n    /** Returns true if the DisplayObject has interactive 'static' or 'dynamic' */\n    isInteractive: () => boolean;\n\n    /** Whether this event target has any children that need UI events. This can be used optimize event propagation. */\n    interactiveChildren: boolean;\n\n    /** The hit-area specifies the area for which pointer events should be captured by this event target. */\n    hitArea: IHitArea | null;\n\n    // In Angular projects, zone.js is monkey patching the `EventTarget`\n    // by adding its own `removeAllListeners(event?: string): void;` method,\n    // so we have to override this signature when extending both `EventTarget` and `utils.EventEmitter`\n    // to make it compatible with Angular projects\n    // @see https://github.com/pixijs/pixijs/issues/8794\n\n    /** Remove all listeners, or those of the specified event. */\n    removeAllListeners(event?: string | symbol): this;\n\n    /** Handler for 'click' event */\n    onclick: FederatedEventHandler | null;\n    /** Handler for 'mousedown' event */\n    onmousedown: FederatedEventHandler | null;\n    /** Handler for 'mouseenter' event */\n    onmouseenter: FederatedEventHandler | null;\n    /** Handler for 'mouseleave' event */\n    onmouseleave: FederatedEventHandler | null;\n    /** Handler for 'mousemove' event */\n    onmousemove: FederatedEventHandler | null;\n    /** Handler for 'globalmousemove' event */\n    onglobalmousemove: FederatedEventHandler | null;\n    /** Handler for 'mouseout' event */\n    onmouseout: FederatedEventHandler | null;\n    /** Handler for 'mouseover' event */\n    onmouseover: FederatedEventHandler | null;\n    /** Handler for 'mouseup' event */\n    onmouseup: FederatedEventHandler | null;\n    /** Handler for 'mouseupoutside' event */\n    onmouseupoutside: FederatedEventHandler | null;\n    /** Handler for 'pointercancel' event */\n    onpointercancel: FederatedEventHandler | null;\n    /** Handler for 'pointerdown' event */\n    onpointerdown: FederatedEventHandler | null;\n    /** Handler for 'pointerenter' event */\n    onpointerenter: FederatedEventHandler | null;\n    /** Handler for 'pointerleave' event */\n    onpointerleave: FederatedEventHandler | null;\n    /** Handler for 'pointermove' event */\n    onpointermove: FederatedEventHandler | null;\n    /** Handler for 'globalpointermove' event */\n    onglobalpointermove: FederatedEventHandler | null;\n    /** Handler for 'pointerout' event */\n    onpointerout: FederatedEventHandler | null;\n    /** Handler for 'pointerover' event */\n    onpointerover: FederatedEventHandler | null;\n    /** Handler for 'pointertap' event */\n    onpointertap: FederatedEventHandler | null;\n    /** Handler for 'pointerup' event */\n    onpointerup: FederatedEventHandler | null;\n    /** Handler for 'pointerupoutside' event */\n    onpointerupoutside: FederatedEventHandler | null;\n    /** Handler for 'rightclick' event */\n    onrightclick: FederatedEventHandler | null;\n    /** Handler for 'rightdown' event */\n    onrightdown: FederatedEventHandler | null;\n    /** Handler for 'rightup' event */\n    onrightup: FederatedEventHandler | null;\n    /** Handler for 'rightupoutside' event */\n    onrightupoutside: FederatedEventHandler | null;\n    /** Handler for 'tap' event */\n    ontap: FederatedEventHandler | null;\n    /** Handler for 'touchcancel' event */\n    ontouchcancel: FederatedEventHandler | null;\n    /** Handler for 'touchend' event */\n    ontouchend: FederatedEventHandler | null;\n    /** Handler for 'touchendoutside' event */\n    ontouchendoutside: FederatedEventHandler | null;\n    /** Handler for 'touchmove' event */\n    ontouchmove: FederatedEventHandler | null;\n    /** Handler for 'globaltouchmove' event */\n    onglobaltouchmove: FederatedEventHandler | null;\n    /** Handler for 'touchstart' event */\n    ontouchstart: FederatedEventHandler | null;\n    /** Handler for 'wheel' event */\n    onwheel: FederatedEventHandler<FederatedWheelEvent> | null;\n}\n\ntype AddListenerOptions = boolean | AddEventListenerOptions;\ntype RemoveListenerOptions = boolean | EventListenerOptions;\n\nexport interface IFederatedDisplayObject\n    extends Omit<FederatedEventTarget, 'parent' | 'children' | keyof utils.EventEmitter | 'cursor'>\n{\n    addEventListener<K extends keyof AllFederatedEventMap>(\n        type: K,\n        listener: (e: AllFederatedEventMap[K]) => any,\n        options?: AddListenerOptions\n    ): void;\n    addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: AddListenerOptions\n    ): void;\n    removeEventListener<K extends keyof AllFederatedEventMap>(\n        type: K,\n        listener: (e: AllFederatedEventMap[K]) => any,\n        options?: RemoveListenerOptions\n    ): void;\n    removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: RemoveListenerOptions\n    ): void;\n}\n\nfunction convertEventModeToInteractiveMode(mode: EventMode): boolean\n{\n    return mode === 'dynamic' || mode === 'static';\n}\n\nexport const FederatedDisplayObject: IFederatedDisplayObject = {\n\n    /**\n     * Property-based event handler for the `click` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onclick = (event) => {\n     *  //some function here that happens on click\n     * }\n     */\n    onclick: null,\n\n    /**\n     * Property-based event handler for the `mousedown` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmousedown = (event) => {\n     *  //some function here that happens on mousedown\n     * }\n     */\n    onmousedown: null,\n\n    /**\n     * Property-based event handler for the `mouseenter` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseenter = (event) => {\n     *  //some function here that happens on mouseenter\n     * }\n     */\n    onmouseenter: null,\n\n    /**\n     * Property-based event handler for the `mouseleave` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseleave = (event) => {\n     *  //some function here that happens on mouseleave\n     * }\n     */\n    onmouseleave: null,\n\n    /**\n     * Property-based event handler for the `mousemove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmousemove = (event) => {\n     *  //some function here that happens on mousemove\n     * }\n     */\n    onmousemove: null,\n\n    /**\n     * Property-based event handler for the `globalmousemove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onglobalmousemove = (event) => {\n     *  //some function here that happens on globalmousemove\n     * }\n     */\n    onglobalmousemove: null,\n\n    /**\n     * Property-based event handler for the `mouseout` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseout = (event) => {\n     *  //some function here that happens on mouseout\n     * }\n     */\n    onmouseout: null,\n\n    /**\n     * Property-based event handler for the `mouseover` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseover = (event) => {\n     *  //some function here that happens on mouseover\n     * }\n     */\n    onmouseover:  null,\n\n    /**\n     * Property-based event handler for the `mouseup` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseup = (event) => {\n     *  //some function here that happens on mouseup\n     * }\n     */\n    onmouseup:  null,\n\n    /**\n     * Property-based event handler for the `mouseupoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseupoutside = (event) => {\n     *  //some function here that happens on mouseupoutside\n     * }\n     */\n    onmouseupoutside:  null,\n\n    /**\n     * Property-based event handler for the `pointercancel` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointercancel = (event) => {\n     *  //some function here that happens on pointercancel\n     * }\n     */\n    onpointercancel:  null,\n\n    /**\n     * Property-based event handler for the `pointerdown` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerdown = (event) => {\n     *  //some function here that happens on pointerdown\n     * }\n     */\n    onpointerdown:  null,\n\n    /**\n     * Property-based event handler for the `pointerenter` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerenter = (event) => {\n     *  //some function here that happens on pointerenter\n     * }\n     */\n    onpointerenter:  null,\n\n    /**\n     * Property-based event handler for the `pointerleave` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerleave = (event) => {\n     *  //some function here that happens on pointerleave\n     * }\n     */\n    onpointerleave:  null,\n\n    /**\n     * Property-based event handler for the `pointermove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointermove = (event) => {\n     *  //some function here that happens on pointermove\n     * }\n     */\n    onpointermove:  null,\n\n    /**\n     * Property-based event handler for the `globalpointermove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onglobalpointermove = (event) => {\n     *  //some function here that happens on globalpointermove\n     * }\n     */\n    onglobalpointermove:  null,\n\n    /**\n     * Property-based event handler for the `pointerout` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerout = (event) => {\n     *  //some function here that happens on pointerout\n     * }\n     */\n    onpointerout:  null,\n\n    /**\n     * Property-based event handler for the `pointerover` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerover = (event) => {\n     *  //some function here that happens on pointerover\n     * }\n     */\n    onpointerover:  null,\n\n    /**\n     * Property-based event handler for the `pointertap` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointertap = (event) => {\n     *  //some function here that happens on pointertap\n     * }\n     */\n    onpointertap:  null,\n\n    /**\n     * Property-based event handler for the `pointerup` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerup = (event) => {\n     *  //some function here that happens on pointerup\n     * }\n     */\n    onpointerup:  null,\n\n    /**\n     * Property-based event handler for the `pointerupoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerupoutside = (event) => {\n     *  //some function here that happens on pointerupoutside\n     * }\n     */\n    onpointerupoutside:  null,\n\n    /**\n     * Property-based event handler for the `rightclick` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightclick = (event) => {\n     *  //some function here that happens on rightclick\n     * }\n     */\n    onrightclick:  null,\n\n    /**\n     * Property-based event handler for the `rightdown` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightdown = (event) => {\n     *  //some function here that happens on rightdown\n     * }\n     */\n    onrightdown:  null,\n\n    /**\n     * Property-based event handler for the `rightup` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightup = (event) => {\n     *  //some function here that happens on rightup\n     * }\n     */\n    onrightup:  null,\n\n    /**\n     * Property-based event handler for the `rightupoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightupoutside = (event) => {\n     *  //some function here that happens on rightupoutside\n     * }\n     */\n    onrightupoutside:  null,\n\n    /**\n     * Property-based event handler for the `tap` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontap = (event) => {\n     *  //some function here that happens on tap\n     * }\n     */\n    ontap:  null,\n\n    /**\n     * Property-based event handler for the `touchcancel` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchcancel = (event) => {\n     *  //some function here that happens on touchcancel\n     * }\n     */\n    ontouchcancel:  null,\n\n    /**\n     * Property-based event handler for the `touchend` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchend = (event) => {\n     *  //some function here that happens on touchend\n     * }\n     */\n    ontouchend:  null,\n\n    /**\n     * Property-based event handler for the `touchendoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchendoutside = (event) => {\n     *  //some function here that happens on touchendoutside\n     * }\n     */\n    ontouchendoutside:  null,\n\n    /**\n     * Property-based event handler for the `touchmove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchmove = (event) => {\n     *  //some function here that happens on touchmove\n     * }\n     */\n    ontouchmove:  null,\n\n    /**\n     * Property-based event handler for the `globaltouchmove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onglobaltouchmove = (event) => {\n     *  //some function here that happens on globaltouchmove\n     * }\n     */\n    onglobaltouchmove:  null,\n\n    /**\n     * Property-based event handler for the `touchstart` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchstart = (event) => {\n     *  //some function here that happens on touchstart\n     * }\n     */\n    ontouchstart:  null,\n\n    /**\n     * Property-based event handler for the `wheel` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onwheel = (event) => {\n     *  //some function here that happens on wheel\n     * }\n     */\n    onwheel:  null,\n    /**\n     * @ignore\n     */\n    _internalInteractive: undefined,\n    /**\n     * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n     * @memberof PIXI.DisplayObject#\n     */\n    get interactive()\n    {\n        return this._internalInteractive ?? convertEventModeToInteractiveMode(EventSystem.defaultEventMode);\n    },\n    set interactive(value: boolean)\n    {\n        if (process.env.DEBUG)\n        {\n            utils.deprecation(\n                '7.2.0',\n                // eslint-disable-next-line max-len\n                `Setting interactive is deprecated, use eventMode = 'none'/'passive'/'auto'/'static'/'dynamic' instead.`\n            );\n        }\n\n        this._internalInteractive = value;\n        this.eventMode = value ? 'static' : 'auto';\n    },\n    /**\n     * @ignore\n     */\n    _internalEventMode: undefined,\n    /**\n     * Enable interaction events for the DisplayObject. Touch, pointer and mouse.\n     * This now replaces the `interactive` property.\n     * There are 5 types of interaction settings:\n     * - `'none'`: Ignores all interaction events, even on its children.\n     * - `'passive'`: Does not emit events and ignores all hit testing on itself and non-interactive children.\n     * Interactive children will still emit events.\n     * - `'auto'`: Does not emit events but is hit tested if parent is interactive. Same as `interactive = false` in v7\n     * - `'static'`: Emit events and is hit tested. Same as `interaction = true` in v7\n     * - `'dynamic'`: Emits events and is hit tested but will also receive mock interaction events fired from a ticker to\n     * allow for interaction when the mouse isn't moving\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.eventMode = 'static';\n     * sprite.on('tap', (event) => {\n     *     // Handle event\n     * });\n     * @memberof PIXI.DisplayObject#\n     * @since 7.2.0\n     */\n    get eventMode()\n    {\n        return this._internalEventMode ?? EventSystem.defaultEventMode;\n    },\n    set eventMode(value)\n    {\n        this._internalInteractive = convertEventModeToInteractiveMode(value);\n        this._internalEventMode = value;\n    },\n\n    /**\n     * Determines if the displayObject is interactive or not\n     * @returns {boolean} Whether the displayObject is interactive or not\n     * @memberof PIXI.DisplayObject#\n     * @since 7.2.0\n     * @example\n     * import { Sprite } from 'pixi.js';\n     * const sprite = new Sprite(texture);\n     * sprite.eventMode = 'static';\n     * sprite.isInteractive(); // true\n     *\n     * sprite.eventMode = 'dynamic';\n     * sprite.isInteractive(); // true\n     *\n     * sprite.eventMode = 'none';\n     * sprite.isInteractive(); // false\n     *\n     * sprite.eventMode = 'passive';\n     * sprite.isInteractive(); // false\n     *\n     * sprite.eventMode = 'auto';\n     * sprite.isInteractive(); // false\n     */\n    isInteractive()\n    {\n        return this.eventMode === 'static' || this.eventMode === 'dynamic';\n    },\n\n    /**\n     * Determines if the children to the displayObject can be clicked/touched\n     * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n     * @memberof PIXI.Container#\n     */\n    interactiveChildren: true,\n\n    /**\n     * Interaction shape. Children will be hit first, then this shape will be checked.\n     * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n     * @example\n     * import { Rectangle, Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.hitArea = new Rectangle(0, 0, 100, 100);\n     * @member {PIXI.IHitArea}\n     * @memberof PIXI.DisplayObject#\n     */\n    hitArea: null,\n\n    /**\n     * Unlike `on` or `addListener` which are methods from EventEmitter, `addEventListener`\n     * seeks to be compatible with the DOM's `addEventListener` with support for options.\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param type - The type of event to listen to.\n     * @param listener - The listener callback or object.\n     * @param options - Listener options, used for capture phase.\n     * @example\n     * // Tell the user whether they did a single, double, triple, or nth click.\n     * button.addEventListener('click', {\n     *     handleEvent(e): {\n     *         let prefix;\n     *\n     *         switch (e.detail) {\n     *             case 1: prefix = 'single'; break;\n     *             case 2: prefix = 'double'; break;\n     *             case 3: prefix = 'triple'; break;\n     *             default: prefix = e.detail + 'th'; break;\n     *         }\n     *\n     *         console.log('That was a ' + prefix + 'click');\n     *     }\n     * });\n     *\n     * // But skip the first click!\n     * button.parent.addEventListener('click', function blockClickOnce(e) {\n     *     e.stopImmediatePropagation();\n     *     button.parent.removeEventListener('click', blockClickOnce, true);\n     * }, {\n     *     capture: true,\n     * });\n     */\n    addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: AddListenerOptions\n    )\n    {\n        const capture = (typeof options === 'boolean' && options)\n            || (typeof options === 'object' && options.capture);\n        const context = typeof listener === 'function' ? undefined : listener;\n\n        type = capture ? `${type}capture` : type;\n        listener = typeof listener === 'function' ? listener : listener.handleEvent;\n\n        (this as unknown as utils.EventEmitter).on(type, listener, context);\n    },\n\n    /**\n     * Unlike `off` or `removeListener` which are methods from EventEmitter, `removeEventListener`\n     * seeks to be compatible with the DOM's `removeEventListener` with support for options.\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param type - The type of event the listener is bound to.\n     * @param listener - The listener callback or object.\n     * @param options - The original listener options. This is required to deregister a capture phase listener.\n     */\n    removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: RemoveListenerOptions\n    )\n    {\n        const capture = (typeof options === 'boolean' && options)\n            || (typeof options === 'object' && options.capture);\n        const context = typeof listener === 'function' ? undefined : listener;\n\n        type = capture ? `${type}capture` : type;\n        listener = typeof listener === 'function' ? listener : listener.handleEvent;\n\n        (this as unknown as utils.EventEmitter).off(type, listener, context);\n    },\n\n    /**\n     * Dispatch the event on this {@link PIXI.DisplayObject} using the event's {@link PIXI.EventBoundary}.\n     *\n     * The target of the event is set to `this` and the `defaultPrevented` flag is cleared before dispatch.\n     *\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param e - The event to dispatch.\n     * @returns Whether the {@link PIXI.FederatedEvent.preventDefault preventDefault}() method was not invoked.\n     * @example\n     * // Reuse a click event!\n     * button.dispatchEvent(clickEvent);\n     */\n    dispatchEvent(e: Event): boolean\n    {\n        if (!(e instanceof FederatedEvent))\n        {\n            throw new Error('DisplayObject cannot propagate events outside of the Federated Events API');\n        }\n\n        e.defaultPrevented = false;\n        e.path = null;\n        e.target = this as unknown as FederatedEventTarget;\n        e.manager.dispatchEvent(e);\n\n        return !e.defaultPrevented;\n    }\n};\n\nDisplayObject.mixin(FederatedDisplayObject);\n", "import type { DisplayObject } from '@pixi/display';\n\nexport type PointerEvents = 'auto'\n| 'none'\n| 'visiblePainted'\n| 'visibleFill'\n| 'visibleStroke'\n| 'visible'\n| 'painted'\n| 'fill'\n| 'stroke'\n| 'all'\n| 'inherit';\n\nexport interface IAccessibleTarget\n{\n    accessible: boolean;\n    accessibleTitle: string;\n    accessibleHint: string;\n    tabIndex: number;\n    _accessibleActive: boolean;\n    _accessibleDiv: IAccessibleHTMLElement;\n    accessibleType: string;\n    accessiblePointerEvents: PointerEvents;\n    accessibleChildren: boolean;\n    renderId: number;\n}\n\nexport interface IAccessibleHTMLElement extends HTMLElement\n{\n    type?: string;\n    displayObject?: DisplayObject;\n}\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {object}\n * @example\n * import { accessibleTarget } from 'pixi.js';\n *\n * function MyObject() {}\n * Object.assign(MyObject.prototype, accessibleTarget);\n */\nexport const accessibleTarget: IAccessibleTarget = {\n    /**\n     *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     *   shadow div with attributes set\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessible: false,\n\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n     * @member {?string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleTitle: null,\n\n    /**\n     * Sets the aria-label attribute of the shadow div\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleHint: null,\n\n    /**\n     * @member {number}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     * @todo Needs docs.\n     */\n    tabIndex: 0,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleActive: false,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleDiv: null,\n\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'button'\n     */\n    accessibleType: 'button',\n\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'auto'\n     */\n    accessiblePointerEvents: 'auto',\n\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @default true\n     */\n    accessibleChildren: true,\n\n    renderId: -1,\n};\n", "import { extensions, ExtensionType, utils } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { FederatedEvent } from '@pixi/events';\nimport { accessibleTarget } from './accessibleTarget';\n\nimport type { ExtensionMetadata, IRenderer, Rectangle } from '@pixi/core';\nimport type { Container } from '@pixi/display';\nimport type { IAccessibleHTMLElement } from './accessibleTarget';\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n * @class\n * @memberof PIXI\n */\nexport class AccessibilityManager\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'accessibility',\n        type: [\n            ExtensionType.RendererPlugin,\n            ExtensionType.CanvasRendererPlugin,\n        ],\n    };\n\n    /** Setting this to true will visually show the divs. */\n    public debug = false;\n\n    /**\n     * The renderer this accessibility manager works for.\n     * @type {PIXI.CanvasRenderer|PIXI.Renderer}\n     */\n    public renderer: IRenderer;\n\n    /** Internal variable, see isActive getter. */\n    private _isActive = false;\n\n    /** Internal variable, see isMobileAccessibility getter. */\n    private _isMobileAccessibility = false;\n\n    /** Button element for handling touch hooks. */\n    private _hookDiv: HTMLElement;\n\n    /** This is the dom element that will sit over the PixiJS element. This is where the div overlays will go. */\n    private div: HTMLElement;\n\n    /** A simple pool for storing divs. */\n    private pool: IAccessibleHTMLElement[] = [];\n\n    /** This is a tick used to check if an object is no longer being rendered. */\n    private renderId = 0;\n\n    /** The array of currently active accessible items. */\n    private children: DisplayObject[] = [];\n\n    /** Count to throttle div updates on android devices. */\n    private androidUpdateCount = 0;\n\n    /**  The frequency to update the div elements. */\n    private androidUpdateFrequency = 500; // 2fps\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: IRenderer)\n    {\n        this._hookDiv = null;\n\n        if (utils.isMobile.tablet || utils.isMobile.phone)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n\n        this.div = div;\n        this.renderer = renderer;\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get isActive(): boolean\n    {\n        return this._isActive;\n    }\n\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get isMobileAccessibility(): boolean\n    {\n        return this._isMobileAccessibility;\n    }\n\n    /**\n     * Creates the touch hooks.\n     * @private\n     */\n    private createTouchHook(): void\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessibility for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this._isMobileAccessibility = true;\n            this.activate();\n            this.destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     * @private\n     */\n    private destroyTouchHook(): void\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     * @private\n     */\n    private activate(): void\n    {\n        if (this._isActive)\n        {\n            return;\n        }\n\n        this._isActive = true;\n\n        globalThis.document.addEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.on('postrender', this.update, this);\n        this.renderer.view.parentNode?.appendChild(this.div);\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     * @private\n     */\n    private deactivate(): void\n    {\n        if (!this._isActive || this._isMobileAccessibility)\n        {\n            return;\n        }\n\n        this._isActive = false;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.off('postrender', this.update);\n        this.div.parentNode?.removeChild(this.div);\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    private updateAccessibleObjects(displayObject: Container): void\n    {\n        if (!displayObject.visible || !displayObject.accessibleChildren)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.isInteractive())\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.updateAccessibleObjects(children[i] as Container);\n            }\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     * @private\n     */\n    private update(): void\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (utils.isMobile.android.device && now < this.androidUpdateCount)\n        {\n            return;\n        }\n\n        this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n        if (!this.renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        if (this.renderer.lastObjectRendered)\n        {\n            this.updateAccessibleObjects(this.renderer.lastObjectRendered as Container);\n        }\n\n        const { x, y, width, height } = this.renderer.view.getBoundingClientRect();\n        const { width: viewWidth, height: viewHeight, resolution } = this.renderer;\n\n        const sx = (width / viewWidth) * resolution;\n        const sy = (height / viewHeight) * resolution;\n\n        let div = this.div;\n\n        div.style.left = `${x}px`;\n        div.style.top = `${y}px`;\n        div.style.width = `${viewWidth}px`;\n        div.style.height = `${viewHeight}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                utils.removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea as Rectangle;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle;\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug) this.updateDebugHTML(div);\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessability div\n     * @param {HTMLElement} div -\n     */\n    public updateDebugHTML(div: IAccessibleHTMLElement): void\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     * @param {PIXI.Rectangle} hitArea - Bounds of the child\n     */\n    public capHitArea(hitArea: Rectangle): void\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        const { width: viewWidth, height: viewHeight } = this.renderer;\n\n        if (hitArea.x + hitArea.width > viewWidth)\n        {\n            hitArea.width = viewWidth - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > viewHeight)\n        {\n            hitArea.height = viewHeight - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     * @private\n     * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n     */\n    private addChild<T extends DisplayObject>(displayObject: T): void\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().includes('chrome'))\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = displayObject.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = displayObject.accessibleType;\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        if (this.debug) this.updateDebugHTML(div);\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Dispatch events with the EventSystem.\n     * @param e\n     * @param type\n     * @private\n     */\n    private _dispatchEvent(e: UIEvent, type: string[]): void\n    {\n        const { displayObject: target } = e.target as IAccessibleHTMLElement;\n        const boundry = this.renderer.events.rootBoundary;\n        const event: FederatedEvent = Object.assign(new FederatedEvent(boundry), { target });\n\n        boundry.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n        type.forEach((type) => boundry.dispatchEvent(event, type));\n    }\n\n    /**\n     * Maps the div button press to pixi's EventSystem (click)\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    private _onClick(e: MouseEvent): void\n    {\n        this._dispatchEvent(e, ['click', 'pointertap', 'tap']);\n    }\n\n    /**\n     * Maps the div focus events to pixi's EventSystem (mouseover)\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    private _onFocus(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'assertive');\n        }\n\n        this._dispatchEvent(e, ['mouseover']);\n    }\n\n    /**\n     * Maps the div focus events to pixi's EventSystem (mouseout)\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    private _onFocusOut(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'polite');\n        }\n\n        this._dispatchEvent(e, ['mouseout']);\n    }\n\n    /**\n     * Is called when a key is pressed\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    private _onKeyDown(e: KeyboardEvent): void\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    private _onMouseMove(e: MouseEvent): void\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /** Destroys the accessibility manager */\n    public destroy(): void\n    {\n        this.destroyTouchHook();\n        this.div = null;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n\nextensions.add(AccessibilityManager);\n", "import \"@pixi/mixin-cache-as-bitmap\";\r\nimport \"@pixi/mixin-get-child-by-name\";\r\nimport \"@pixi/mixin-get-global-position\";\r\nimport { filters } from \"./filters.mjs\";\r\nexport * from \"@pixi/accessibility\";\r\nexport * from \"@pixi/app\";\r\nexport * from \"@pixi/assets\";\r\nexport * from \"@pixi/compressed-textures\";\r\nexport * from \"@pixi/core\";\r\nexport * from \"@pixi/display\";\r\nexport * from \"@pixi/events\";\r\nexport * from \"@pixi/extract\";\r\nexport * from \"@pixi/filter-alpha\";\r\nexport * from \"@pixi/filter-blur\";\r\nexport * from \"@pixi/filter-color-matrix\";\r\nexport * from \"@pixi/filter-displacement\";\r\nexport * from \"@pixi/filter-fxaa\";\r\nexport * from \"@pixi/filter-noise\";\r\nexport * from \"@pixi/graphics\";\r\nexport * from \"@pixi/mesh\";\r\nexport * from \"@pixi/mesh-extras\";\r\nexport * from \"@pixi/particle-container\";\r\nexport * from \"@pixi/prepare\";\r\nexport * from \"@pixi/sprite\";\r\nexport * from \"@pixi/sprite-animated\";\r\nexport * from \"@pixi/sprite-tiling\";\r\nexport * from \"@pixi/spritesheet\";\r\nexport * from \"@pixi/text\";\r\nexport * from \"@pixi/text-bitmap\";\r\nexport * from \"@pixi/text-html\";\r\nexport {\r\n  filters\r\n};\r\n//# sourceMappingURL=index.mjs.map\r\n", "/**\n * WebGL internal formats, including compressed texture formats provided by extensions\n * @memberof PIXI\n * @static\n * @name INTERNAL_FORMATS\n * @enum {number}\n */\nexport enum INTERNAL_FORMATS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    // WEBGL_compressed_texture_s3tc\n    /**\n     * @default 0x83F0\n     */\n    COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,\n    /**\n     * @default 0x83F1\n     */\n    COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,\n    /**\n     * @default 0x83F2\n     */\n    COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,\n    /**\n     * @default 0x83F3\n     */\n    COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,\n\n    // WEBGL_compressed_texture_s3tc_srgb\n    /**\n     * @default 35917\n     */\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917,\n    /**\n     * @default 35918\n     */\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918,\n    /**\n     * @default 35919\n     */\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919,\n    /**\n     * @default 35916\n     */\n    COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916,\n\n    // WEBGL_compressed_texture_etc\n    /**\n     * @default 0x9270\n     */\n    COMPRESSED_R11_EAC = 0x9270,\n    /**\n     * @default 0x9271\n     */\n    COMPRESSED_SIGNED_R11_EAC = 0x9271,\n    /**\n     * @default 0x9272\n     */\n    COMPRESSED_RG11_EAC = 0x9272,\n    /**\n     * @default 0x9273\n     */\n    COMPRESSED_SIGNED_RG11_EAC = 0x9273,\n    /**\n     * @default 0x9274\n     */\n    COMPRESSED_RGB8_ETC2 = 0x9274,\n    /**\n     * @default 0x9278\n     */\n    COMPRESSED_RGBA8_ETC2_EAC = 0x9278,\n    /**\n     * @default 0x9275\n     */\n    COMPRESSED_SRGB8_ETC2 = 0x9275,\n    /**\n     * @default 0x9279\n     */\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,\n    /**\n     * @default 0x9276\n     */\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\n    /**\n     * @default 0x9277\n     */\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\n\n    // WEBGL_compressed_texture_pvrtc\n    /**\n     * @default 0x8C00\n     */\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00,\n    /**\n     * @default 0x8C02\n     */\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02,\n    /**\n     * @default 0x8C01\n     */\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01,\n    /**\n     * @default 0x8C03\n     */\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03,\n\n    // WEBGL_compressed_texture_etc1\n    /**\n     * @default 0x8D64\n     */\n    COMPRESSED_RGB_ETC1_WEBGL = 0x8D64,\n\n    // WEBGL_compressed_texture_atc\n    /**\n     * @default 0x8C92\n     */\n    COMPRESSED_RGB_ATC_WEBGL = 0x8C92,\n    /**\n     * @default 0x8C92\n     */\n    COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C92, // TODO: Probably a bug on the MDN site\n    /**\n     * @default 0x87EE\n     */\n    COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE,\n\n    // WEBGL_compressed_texture_astc\n    /* eslint-disable-next-line camelcase */\n    /**\n     * @default 0x93B0\n     */\n    COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0,\n}\n\n/**\n * Maps the compressed texture formats in {@link PIXI.INTERNAL_FORMATS} to the number of bytes taken by\n * each texel.\n * @memberof PIXI\n * @static\n * @ignore\n */\nexport const INTERNAL_FORMAT_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    // WEBGL_compressed_texture_s3tc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT]: 1,\n\n    // WEBGL_compressed_texture_s3tc\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT]: 1,\n\n    // WEBGL_compressed_texture_etc\n    [INTERNAL_FORMATS.COMPRESSED_R11_EAC]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SIGNED_R11_EAC]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RG11_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SIGNED_RG11_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGB8_ETC2]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA8_ETC2_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_ETC2]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: 0.5, // ~~\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: 0.5, // ~~\n\n    // WEBGL_compressed_texture_pvrtc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: 0.25,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: 0.25,\n\n    // WEBGL_compressed_texture_etc1\n    [INTERNAL_FORMATS.COMPRESSED_RGB_ETC1_WEBGL]: 0.5,\n\n    // @see https://www.khronos.org/registry/OpenGL/extensions/AMD/AMD_compressed_ATC_texture.txt\n    // WEBGL_compressed_texture_atc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_ATC_WEBGL]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: 1,\n\n    // @see https://registry.khronos.org/OpenGL/extensions/KHR/KHR_texture_compression_astc_hdr.txt\n    // WEBGL_compressed_texture_astc\n    /* eslint-disable-next-line camelcase */\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ASTC_4x4_KHR]: 1,\n};\n", "import { extensions as ext, ExtensionType, settings } from '@pixi/core';\n\nimport type { FormatDetectionParser } from '@pixi/assets';\nimport type { CompressedTextureExtensionRef, CompressedTextureExtensions } from './compressedTextureExtensions';\n\nlet storedGl: WebGLRenderingContext;\nlet extensions: Partial<CompressedTextureExtensions>;\n\nfunction getCompressedTextureExtensions()\n{\n    extensions = {\n        s3tc: storedGl.getExtension('WEBGL_compressed_texture_s3tc'),\n        s3tc_sRGB: storedGl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), /* eslint-disable-line camelcase */\n        etc: storedGl.getExtension('WEBGL_compressed_texture_etc'),\n        etc1: storedGl.getExtension('WEBGL_compressed_texture_etc1'),\n        pvrtc: storedGl.getExtension('WEBGL_compressed_texture_pvrtc')\n            || storedGl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n        atc: storedGl.getExtension('WEBGL_compressed_texture_atc'),\n        astc: storedGl.getExtension('WEBGL_compressed_texture_astc')\n    } as Partial<CompressedTextureExtensions>;\n}\n\nexport const detectCompressedTextures = {\n    extension: {\n        type: ExtensionType.DetectionParser,\n        priority: 2,\n    },\n    test: async (): Promise<boolean> =>\n    {\n        // Auto-detect WebGL compressed-texture extensions\n        const canvas = settings.ADAPTER.createCanvas();\n        const gl = canvas.getContext('webgl');\n\n        if (!gl)\n        {\n            if (process.env.DEBUG)\n            {\n                console.warn('WebGL not available for compressed textures.');\n            }\n\n            return false;\n        }\n\n        storedGl = gl;\n\n        return true;\n    },\n    add: async (formats: string[]): Promise<string[]> =>\n    {\n        if (!extensions) getCompressedTextureExtensions();\n\n        const textureFormats = [];\n\n        // Assign all available compressed-texture formats\n        for (const extensionName in extensions)\n        {\n            const extension = extensions[extensionName as CompressedTextureExtensionRef];\n\n            if (!extension)\n            {\n                continue;\n            }\n\n            textureFormats.push(extensionName);\n        }\n\n        return [...textureFormats, ...formats];\n    },\n    remove: async (formats: string[]): Promise<string[]> =>\n    {\n        if (!extensions) getCompressedTextureExtensions();\n\n        return formats.filter((f) => !(f in extensions));\n    },\n} as FormatDetectionParser;\n\next.add(detectCompressedTextures);\n", "import { BufferResource, ViewableBuffer } from '@pixi/core';\n\nimport type { BufferType, IBufferResourceOptions } from '@pixi/core';\n\n/**\n * Constructor options for BlobResource.\n * @memberof PIXI\n */\nexport interface IBlobResourceOptions extends IBufferResourceOptions\n{\n    autoLoad?: boolean;\n}\n\n/**\n * Resource that fetches texture data over the network and stores it in a buffer.\n * @class\n * @extends PIXI.Resource\n * @memberof PIXI\n */\nexport abstract class BlobResource extends BufferResource\n{\n    /** The URL of the texture file. */\n    protected origin: string | null;\n\n    /** The viewable buffer on the data. */\n    protected buffer: ViewableBuffer | null;\n\n    protected loaded: boolean;\n\n    /**\n     * Promise when loading.\n     * @default null\n     */\n    private _load: Promise<this>;\n\n    /**\n     * @param source - The buffer/URL of the texture file.\n     * @param {PIXI.IBlobResourceOptions} [options]\n     * @param {boolean} [options.autoLoad=false] - Whether to fetch the data immediately;\n     *  you can fetch it later via {@link PIXI.BlobResource#load}.\n     * @param {number} [options.width=1] - The width in pixels.\n     * @param {number} [options.height=1] - The height in pixels.\n     * @param {1|2|4|8} [options.unpackAlignment=4] - The alignment of the pixel rows.\n     */\n    constructor(source: string | BufferType, options: IBlobResourceOptions = { width: 1, height: 1, autoLoad: true })\n    {\n        let origin: string | null;\n        let data: BufferType;\n\n        if (typeof source === 'string')\n        {\n            origin = source;\n            data = new Uint8Array();\n        }\n        else\n        {\n            origin = null;\n            data = source;\n        }\n\n        super(data, options);\n\n        this.origin = origin;\n        this.buffer = data ? new ViewableBuffer(data) : null;\n\n        this._load = null;\n        this.loaded = false;\n\n        // Allow autoLoad = \"undefined\" still load the resource by default\n        if (this.origin !== null && options.autoLoad !== false)\n        {\n            this.load();\n        }\n        if (this.origin === null && this.buffer)\n        {\n            this._load = Promise.resolve(this);\n            this.loaded = true;\n            this.onBlobLoaded(this.buffer.rawBinaryData);\n        }\n    }\n\n    protected onBlobLoaded(_data: ArrayBuffer): void\n    {\n        // TODO: Override this method\n    }\n\n    /** Loads the blob */\n    load(): Promise<this>\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        this._load = fetch(this.origin)\n            .then((response) => response.blob())\n            .then((blob) => blob.arrayBuffer())\n            .then((arrayBuffer) =>\n            {\n                this.data = new Uint32Array(arrayBuffer);\n                this.buffer = new ViewableBuffer(arrayBuffer);\n                this.loaded = true;\n\n                this.onBlobLoaded(arrayBuffer);\n                this.update();\n\n                return this;\n            });\n\n        return this._load;\n    }\n}\n", "import { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { BlobResource } from './BlobResource';\n\nimport type { BaseTexture, BufferType, GLTexture, Renderer } from '@pixi/core';\nimport type { INTERNAL_FORMATS } from '../const';\n\n/**\n * Used in parseKTX\n * @ignore\n */\nexport type CompressedLevelBuffer = {\n    levelID: number,\n    levelWidth: number,\n    levelHeight: number,\n    levelBuffer: Uint8Array\n};\n\n/**\n * @ignore\n */\nexport interface ICompressedTextureResourceOptions\n{\n    format: INTERNAL_FORMATS;\n    width: number;\n    height: number;\n    levels?: number;\n    levelBuffers?: CompressedLevelBuffer[];\n}\n\n/**\n * Resource for compressed texture formats, as follows: S3TC/DXTn (& their sRGB formats), ATC, ASTC, ETC 1/2, PVRTC.\n *\n * Compressed textures improve performance when rendering is texture-bound. The texture data stays compressed in\n * graphics memory, increasing memory locality and speeding up texture fetches. These formats can also be used to store\n * more detail in the same amount of memory.\n *\n * For most developers, container file formats are a better abstraction instead of directly handling raw texture\n * data. PixiJS provides native support for the following texture file formats\n * (via {@link PIXI.loadBasis}, {@link PIXI.loadKTX}, and {@link PIXI.loadDDS}):\n *\n * **.dds** - the DirectDraw Surface file format stores DXTn (DXT-1,3,5) data. See {@link PIXI.parseDDS}\n * **.ktx** - the Khronos Texture Container file format supports storing all the supported WebGL compression formats.\n *  See {@link PIXI.parseKTX}.\n * **.basis** - the BASIS supercompressed file format stores texture data in an internal format that is transcoded\n *  to the compression format supported on the device at _runtime_. It also supports transcoding into a uncompressed\n *  format as a fallback; you must install the `@pixi/basis-loader`, `@pixi/basis-transcoder` packages separately to\n *  use these files. See {@link PIXI.BasisParser}.\n *\n * The loaders for the aforementioned formats use `CompressedTextureResource` internally. It is strongly suggested that\n * they be used instead.\n *\n * ## Working directly with CompressedTextureResource\n *\n * Since `CompressedTextureResource` inherits `BlobResource`, you can provide it a URL pointing to a file containing\n * the raw texture data (with no file headers!):\n * @example\n * import { CompressedTextureResource, INTERNAL_FORMATS } from '@pixi/compressed-textures';\n * import { BaseTexture, Texture, ALPHA_MODES } from 'pixi.js';\n *\n * // The resource backing the texture data for your textures.\n * // NOTE: You can also provide a ArrayBufferView instead of a URL. This is used when loading data from a container file\n * //   format such as KTX, DDS, or BASIS.\n * const compressedResource = new CompressedTextureResource('bunny.dxt5', {\n *     format: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n *     width: 256,\n *     height: 256,\n * });\n *\n * // You can create a base-texture to the cache, so that future `Texture`s can be created using the `Texture.from` API.\n * const baseTexture = new BaseTexture(compressedResource, { pmaMode: ALPHA_MODES.NPM });\n *\n * // Create a Texture to add to the TextureCache\n * const texture = new Texture(baseTexture);\n *\n * // Add baseTexture & texture to the global texture cache\n * BaseTexture.addToCache(baseTexture, 'bunny.dxt5');\n * Texture.addToCache(texture, 'bunny.dxt5');\n * @memberof PIXI\n */\nexport class CompressedTextureResource extends BlobResource\n{\n    /** The compression format */\n    public format: INTERNAL_FORMATS;\n    /**\n     * The number of mipmap levels stored in the resource buffer.\n     * @default 1\n     */\n    public levels: number;\n\n    // Easy access to the WebGL extension providing support for the compression format via ContextSystem\n    private _extension: 's3tc' | 's3tc_sRGB' | 'atc' | 'astc' | 'etc' | 'etc1' | 'pvrtc';\n    // Buffer views for each mipmap level in the main buffer\n    private _levelBuffers: CompressedLevelBuffer[];\n\n    /**\n     * @param source - the buffer/URL holding the compressed texture data\n     * @param options\n     * @param {PIXI.INTERNAL_FORMATS} options.format - the compression format\n     * @param {number} options.width - the image width in pixels.\n     * @param {number} options.height - the image height in pixels.\n     * @param {number} [options.level=1] - the mipmap levels stored in the compressed texture, including level 0.\n     * @param {number} [options.levelBuffers] - the buffers for each mipmap level. `CompressedTextureResource` can allows you\n     *      to pass `null` for `source`, for cases where each level is stored in non-contiguous memory.\n     */\n    constructor(source: string | BufferType, options: ICompressedTextureResourceOptions)\n    {\n        super(source, options);\n\n        this.format = options.format;\n        this.levels = options.levels || 1;\n\n        this._width = options.width;\n        this._height = options.height;\n\n        this._extension = CompressedTextureResource._formatToExtension(this.format);\n\n        if (options.levelBuffers || this.buffer)\n        {\n            // ViewableBuffer doesn't support byteOffset :-( so allow source to be Uint8Array\n            this._levelBuffers = options.levelBuffers\n                || CompressedTextureResource._createLevelBuffers(\n                    source instanceof Uint8Array ? source : this.buffer.uint8View,\n                    this.format,\n                    this.levels,\n                    4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n                    this.width,\n                    this.height);\n        }\n    }\n\n    /**\n     * @override\n     * @param renderer - A reference to the current renderer\n     * @param _texture - the texture\n     * @param _glTexture - texture instance for this webgl context\n     */\n    upload(renderer: Renderer, _texture: BaseTexture, _glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n        const extension = renderer.context.extensions[this._extension];\n\n        if (!extension)\n        {\n            throw new Error(`${this._extension} textures are not supported on the current machine`);\n        }\n        if (!this._levelBuffers)\n        {\n            // Do not try to upload data before BlobResource loads, unless the levelBuffers were provided directly!\n            return false;\n        }\n\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n\n        for (let i = 0, j = this.levels; i < j; i++)\n        {\n            const { levelID, levelWidth, levelHeight, levelBuffer } = this._levelBuffers[i];\n\n            gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n        }\n\n        return true;\n    }\n\n    /** @protected */\n    protected onBlobLoaded(): void\n    {\n        this._levelBuffers = CompressedTextureResource._createLevelBuffers(\n            this.buffer.uint8View,\n            this.format,\n            this.levels,\n            4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n            this.width,\n            this.height);\n    }\n\n    /**\n     * Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format\n     * @private\n     * @param format - the compression format to get the extension for.\n     */\n    private static _formatToExtension(format: INTERNAL_FORMATS):\n    's3tc' | 's3tc_sRGB' | 'atc' |\n    'astc' | 'etc' | 'etc1' | 'pvrtc'\n    {\n        if (format >= 0x83F0 && format <= 0x83F3)\n        {\n            return 's3tc';\n        }\n        else if (format >= 0x9270 && format <= 0x9279)\n        {\n            return 'etc';\n        }\n        else if (format >= 0x8C00 && format <= 0x8C03)\n        {\n            return 'pvrtc';\n        }\n        else if (format >= 0x8D64)\n        {\n            return 'etc1';\n        }\n        else if (format >= 0x8C92 && format <= 0x87EE)\n        {\n            return 'atc';\n        }\n\n        throw new Error('Invalid (compressed) texture format given!');\n    }\n\n    /**\n     * Pre-creates buffer views for each mipmap level\n     * @private\n     * @param buffer -\n     * @param format - compression formats\n     * @param levels - mipmap levels\n     * @param blockWidth -\n     * @param blockHeight -\n     * @param imageWidth - width of the image in pixels\n     * @param imageHeight - height of the image in pixels\n     */\n    private static _createLevelBuffers(\n        buffer: Uint8Array,\n        format: INTERNAL_FORMATS,\n        levels: number,\n        blockWidth: number,\n        blockHeight: number,\n        imageWidth: number,\n        imageHeight: number\n    ): CompressedLevelBuffer[]\n    {\n        // The byte-size of the first level buffer\n        const buffers = new Array<CompressedLevelBuffer>(levels);\n\n        let offset = buffer.byteOffset;\n\n        let levelWidth = imageWidth;\n        let levelHeight = imageHeight;\n        let alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n        let alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n        let levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n\n        for (let i = 0; i < levels; i++)\n        {\n            buffers[i] = {\n                levelID: i,\n                levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n                levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n                levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n            };\n\n            offset += levelSize;\n\n            // Calculate levelBuffer dimensions for next iteration\n            levelWidth = (levelWidth >> 1) || 1;\n            levelHeight = (levelHeight >> 1) || 1;\n            alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n            alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n            levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n        }\n\n        return buffers;\n    }\n}\n", "import { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL, INTERNAL_FORMATS } from '../const';\nimport { CompressedTextureResource } from '../resources';\n\nconst DDS_MAGIC_SIZE = 4;\nconst DDS_HEADER_SIZE = 124;\nconst DDS_HEADER_PF_SIZE = 32;\nconst DDS_HEADER_DX10_SIZE = 20;\n\n// DDS file format magic word\nconst DDS_MAGIC = 0x20534444;\n\n/**\n * DWORD offsets of the DDS file header fields (relative to file start).\n * @ignore\n */\nconst DDS_FIELDS = {\n    SIZE: 1,\n    FLAGS: 2,\n    HEIGHT: 3,\n    WIDTH: 4,\n    MIPMAP_COUNT: 7,\n    PIXEL_FORMAT: 19,\n};\n\n/**\n * DWORD offsets of the DDS PIXEL_FORMAT fields.\n * @ignore\n */\nconst DDS_PF_FIELDS = {\n    SIZE: 0,\n    FLAGS: 1,\n    FOURCC: 2,\n    RGB_BITCOUNT: 3,\n    R_BIT_MASK: 4,\n    G_BIT_MASK: 5,\n    B_BIT_MASK: 6,\n    A_BIT_MASK: 7\n};\n\n/**\n * DWORD offsets of the DDS_HEADER_DX10 fields.\n * @ignore\n */\nconst DDS_DX10_FIELDS = {\n    DXGI_FORMAT: 0,\n    RESOURCE_DIMENSION: 1,\n    MISC_FLAG: 2,\n    ARRAY_SIZE: 3,\n    MISC_FLAGS2: 4\n};\n\n/**\n * @see https://docs.microsoft.com/en-us/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format\n * This is way over-blown for us! Lend us a hand, and remove the ones that aren't used (but set the remaining\n * ones to their correct value)\n * @ignore\n */\nenum DXGI_FORMAT\n    {\n    DXGI_FORMAT_UNKNOWN,\n    DXGI_FORMAT_R32G32B32A32_TYPELESS,\n    DXGI_FORMAT_R32G32B32A32_FLOAT,\n    DXGI_FORMAT_R32G32B32A32_UINT,\n    DXGI_FORMAT_R32G32B32A32_SINT,\n    DXGI_FORMAT_R32G32B32_TYPELESS,\n    DXGI_FORMAT_R32G32B32_FLOAT,\n    DXGI_FORMAT_R32G32B32_UINT,\n    DXGI_FORMAT_R32G32B32_SINT,\n    DXGI_FORMAT_R16G16B16A16_TYPELESS,\n    DXGI_FORMAT_R16G16B16A16_FLOAT,\n    DXGI_FORMAT_R16G16B16A16_UNORM,\n    DXGI_FORMAT_R16G16B16A16_UINT,\n    DXGI_FORMAT_R16G16B16A16_SNORM,\n    DXGI_FORMAT_R16G16B16A16_SINT,\n    DXGI_FORMAT_R32G32_TYPELESS,\n    DXGI_FORMAT_R32G32_FLOAT,\n    DXGI_FORMAT_R32G32_UINT,\n    DXGI_FORMAT_R32G32_SINT,\n    DXGI_FORMAT_R32G8X24_TYPELESS,\n    DXGI_FORMAT_D32_FLOAT_S8X24_UINT,\n    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,\n    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,\n    DXGI_FORMAT_R10G10B10A2_TYPELESS,\n    DXGI_FORMAT_R10G10B10A2_UNORM,\n    DXGI_FORMAT_R10G10B10A2_UINT,\n    DXGI_FORMAT_R11G11B10_FLOAT,\n    DXGI_FORMAT_R8G8B8A8_TYPELESS,\n    DXGI_FORMAT_R8G8B8A8_UNORM,\n    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,\n    DXGI_FORMAT_R8G8B8A8_UINT,\n    DXGI_FORMAT_R8G8B8A8_SNORM,\n    DXGI_FORMAT_R8G8B8A8_SINT,\n    DXGI_FORMAT_R16G16_TYPELESS,\n    DXGI_FORMAT_R16G16_FLOAT,\n    DXGI_FORMAT_R16G16_UNORM,\n    DXGI_FORMAT_R16G16_UINT,\n    DXGI_FORMAT_R16G16_SNORM,\n    DXGI_FORMAT_R16G16_SINT,\n    DXGI_FORMAT_R32_TYPELESS,\n    DXGI_FORMAT_D32_FLOAT,\n    DXGI_FORMAT_R32_FLOAT,\n    DXGI_FORMAT_R32_UINT,\n    DXGI_FORMAT_R32_SINT,\n    DXGI_FORMAT_R24G8_TYPELESS,\n    DXGI_FORMAT_D24_UNORM_S8_UINT,\n    DXGI_FORMAT_R24_UNORM_X8_TYPELESS,\n    DXGI_FORMAT_X24_TYPELESS_G8_UINT,\n    DXGI_FORMAT_R8G8_TYPELESS,\n    DXGI_FORMAT_R8G8_UNORM,\n    DXGI_FORMAT_R8G8_UINT,\n    DXGI_FORMAT_R8G8_SNORM,\n    DXGI_FORMAT_R8G8_SINT,\n    DXGI_FORMAT_R16_TYPELESS,\n    DXGI_FORMAT_R16_FLOAT,\n    DXGI_FORMAT_D16_UNORM,\n    DXGI_FORMAT_R16_UNORM,\n    DXGI_FORMAT_R16_UINT,\n    DXGI_FORMAT_R16_SNORM,\n    DXGI_FORMAT_R16_SINT,\n    DXGI_FORMAT_R8_TYPELESS,\n    DXGI_FORMAT_R8_UNORM,\n    DXGI_FORMAT_R8_UINT,\n    DXGI_FORMAT_R8_SNORM,\n    DXGI_FORMAT_R8_SINT,\n    DXGI_FORMAT_A8_UNORM,\n    DXGI_FORMAT_R1_UNORM,\n    DXGI_FORMAT_R9G9B9E5_SHAREDEXP,\n    DXGI_FORMAT_R8G8_B8G8_UNORM,\n    DXGI_FORMAT_G8R8_G8B8_UNORM,\n    DXGI_FORMAT_BC1_TYPELESS,\n    DXGI_FORMAT_BC1_UNORM,\n    DXGI_FORMAT_BC1_UNORM_SRGB,\n    DXGI_FORMAT_BC2_TYPELESS,\n    DXGI_FORMAT_BC2_UNORM,\n    DXGI_FORMAT_BC2_UNORM_SRGB,\n    DXGI_FORMAT_BC3_TYPELESS,\n    DXGI_FORMAT_BC3_UNORM,\n    DXGI_FORMAT_BC3_UNORM_SRGB,\n    DXGI_FORMAT_BC4_TYPELESS,\n    DXGI_FORMAT_BC4_UNORM,\n    DXGI_FORMAT_BC4_SNORM,\n    DXGI_FORMAT_BC5_TYPELESS,\n    DXGI_FORMAT_BC5_UNORM,\n    DXGI_FORMAT_BC5_SNORM,\n    DXGI_FORMAT_B5G6R5_UNORM,\n    DXGI_FORMAT_B5G5R5A1_UNORM,\n    DXGI_FORMAT_B8G8R8A8_UNORM,\n    DXGI_FORMAT_B8G8R8X8_UNORM,\n    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,\n    DXGI_FORMAT_B8G8R8A8_TYPELESS,\n    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,\n    DXGI_FORMAT_B8G8R8X8_TYPELESS,\n    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,\n    DXGI_FORMAT_BC6H_TYPELESS,\n    DXGI_FORMAT_BC6H_UF16,\n    DXGI_FORMAT_BC6H_SF16,\n    DXGI_FORMAT_BC7_TYPELESS,\n    DXGI_FORMAT_BC7_UNORM,\n    DXGI_FORMAT_BC7_UNORM_SRGB,\n    DXGI_FORMAT_AYUV,\n    DXGI_FORMAT_Y410,\n    DXGI_FORMAT_Y416,\n    DXGI_FORMAT_NV12,\n    DXGI_FORMAT_P010,\n    DXGI_FORMAT_P016,\n    DXGI_FORMAT_420_OPAQUE,\n    DXGI_FORMAT_YUY2,\n    DXGI_FORMAT_Y210,\n    DXGI_FORMAT_Y216,\n    DXGI_FORMAT_NV11,\n    DXGI_FORMAT_AI44,\n    DXGI_FORMAT_IA44,\n    DXGI_FORMAT_P8,\n    DXGI_FORMAT_A8P8,\n    DXGI_FORMAT_B4G4R4A4_UNORM,\n    DXGI_FORMAT_P208,\n    DXGI_FORMAT_V208,\n    DXGI_FORMAT_V408,\n    DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,\n    DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,\n    DXGI_FORMAT_FORCE_UINT\n}\n\n/**\n * Possible values of the field {@link DDS_DX10_FIELDS.RESOURCE_DIMENSION}\n * @ignore\n */\nenum D3D10_RESOURCE_DIMENSION\n    {\n    DDS_DIMENSION_TEXTURE1D = 2,\n    DDS_DIMENSION_TEXTURE2D = 3,\n    DDS_DIMENSION_TEXTURE3D = 6\n}\n\nconst PF_FLAGS = 1;\n\n// PIXEL_FORMAT flags\nconst DDPF_ALPHA = 0x2;\nconst DDPF_FOURCC = 0x4;\nconst DDPF_RGB = 0x40;\nconst DDPF_YUV = 0x200;\nconst DDPF_LUMINANCE = 0x20000;\n\n// Four character codes for DXTn formats\nconst FOURCC_DXT1 = 0x31545844;\nconst FOURCC_DXT3 = 0x33545844;\nconst FOURCC_DXT5 = 0x35545844;\nconst FOURCC_DX10 = 0x30315844;\n\n// Cubemap texture flag (for DDS_DX10_FIELDS.MISC_FLAG)\nconst DDS_RESOURCE_MISC_TEXTURECUBE = 0x4;\n\n/**\n * Maps `FOURCC_*` formats to internal formats (see {@link PIXI.INTERNAL_FORMATS}).\n * @ignore\n */\nconst FOURCC_TO_FORMAT: { [id: number]: number } = {\n    [FOURCC_DXT1]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [FOURCC_DXT3]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [FOURCC_DXT5]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n};\n\n/**\n * Maps {@link DXGI_FORMAT} to types/internal-formats (see {@link PIXI.TYPES}, {@link PIXI.INTERNAL_FORMATS})\n * @ignore\n */\nconst DXGI_TO_FORMAT: { [id: number]: number } = {\n    // WEBGL_compressed_texture_s3tc\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n\n    // WEBGL_compressed_texture_s3tc_srgb\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\n};\n\n/**\n * Parses the DDS file header, generates base-textures, and puts them into the texture cache.\n * @see https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide\n * @param arrayBuffer\n * @memberof PIXI\n */\nexport function parseDDS(arrayBuffer: ArrayBuffer): CompressedTextureResource[]\n{\n    const data = new Uint32Array(arrayBuffer);\n    const magicWord = data[0];\n\n    if (magicWord !== DDS_MAGIC)\n    {\n        throw new Error('Invalid DDS file magic word');\n    }\n\n    const header = new Uint32Array(arrayBuffer, 0, DDS_HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n\n    // DDS header fields\n    const height = header[DDS_FIELDS.HEIGHT];\n    const width = header[DDS_FIELDS.WIDTH];\n    const mipmapCount = header[DDS_FIELDS.MIPMAP_COUNT];\n\n    // PIXEL_FORMAT fields\n    const pixelFormat = new Uint32Array(\n        arrayBuffer,\n        DDS_FIELDS.PIXEL_FORMAT * Uint32Array.BYTES_PER_ELEMENT,\n        DDS_HEADER_PF_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n    const formatFlags = pixelFormat[PF_FLAGS];\n\n    // File contains compressed texture(s)\n    if (formatFlags & DDPF_FOURCC)\n    {\n        const fourCC = pixelFormat[DDS_PF_FIELDS.FOURCC];\n\n        // File contains one DXTn compressed texture\n        if (fourCC !== FOURCC_DX10)\n        {\n            const internalFormat = FOURCC_TO_FORMAT[fourCC];\n\n            const dataOffset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n            const texData = new Uint8Array(arrayBuffer, dataOffset);\n\n            const resource = new CompressedTextureResource(texData, {\n                format: internalFormat,\n                width,\n                height,\n                levels: mipmapCount // CompressedTextureResource will separate the levelBuffers for us!\n            });\n\n            return [resource];\n        }\n\n        // FOURCC_DX10 indicates there is a 20-byte DDS_HEADER_DX10 after DDS_HEADER\n        const dx10Offset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n        const dx10Header = new Uint32Array(\n            data.buffer,\n            dx10Offset,\n            DDS_HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n        const dxgiFormat = dx10Header[DDS_DX10_FIELDS.DXGI_FORMAT];\n        const resourceDimension = dx10Header[DDS_DX10_FIELDS.RESOURCE_DIMENSION];\n        const miscFlag = dx10Header[DDS_DX10_FIELDS.MISC_FLAG];\n        const arraySize = dx10Header[DDS_DX10_FIELDS.ARRAY_SIZE];\n\n        // Map dxgiFormat to PIXI.INTERNAL_FORMATS\n        const internalFormat = DXGI_TO_FORMAT[dxgiFormat];\n\n        if (internalFormat === undefined)\n        {\n            throw new Error(`DDSParser cannot parse texture data with DXGI format ${dxgiFormat}`);\n        }\n        if (miscFlag === DDS_RESOURCE_MISC_TEXTURECUBE)\n        {\n            // FIXME: Anybody excited about cubemap compressed textures?\n            throw new Error('DDSParser does not support cubemap textures');\n        }\n        if (resourceDimension === D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE3D)\n        {\n            // FIXME: Anybody excited about 3D compressed textures?\n            throw new Error('DDSParser does not supported 3D texture data');\n        }\n\n        // Uint8Array buffers of image data, including all mipmap levels in each image\n        const imageBuffers = new Array<Uint8Array>();\n        const dataOffset = DDS_MAGIC_SIZE\n                + DDS_HEADER_SIZE\n                + DDS_HEADER_DX10_SIZE;\n\n        if (arraySize === 1)\n        {\n            // No need bothering with the imageSize calculation!\n            imageBuffers.push(new Uint8Array(arrayBuffer, dataOffset));\n        }\n        else\n        {\n            // Calculate imageSize for each texture, and then locate each image's texture data\n\n            const pixelSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[internalFormat];\n            let imageSize = 0;\n            let levelWidth = width;\n            let levelHeight = height;\n\n            for (let i = 0; i < mipmapCount; i++)\n            {\n                const alignedLevelWidth = Math.max(1, (levelWidth + 3) & ~3);\n                const alignedLevelHeight = Math.max(1, (levelHeight + 3) & ~3);\n\n                const levelSize = alignedLevelWidth * alignedLevelHeight * pixelSize;\n\n                imageSize += levelSize;\n\n                levelWidth = levelWidth >>> 1;\n                levelHeight = levelHeight >>> 1;\n            }\n\n            let imageOffset = dataOffset;\n\n            // NOTE: Cubemaps have 6-images per texture (but they aren't supported so ^_^)\n            for (let i = 0; i < arraySize; i++)\n            {\n                imageBuffers.push(new Uint8Array(arrayBuffer, imageOffset, imageSize));\n                imageOffset += imageSize;\n            }\n        }\n\n        // Uint8Array -> CompressedTextureResource, and we're done!\n        return imageBuffers.map((buffer) => new CompressedTextureResource(buffer, {\n            format: internalFormat,\n            width,\n            height,\n            levels: mipmapCount\n        }));\n    }\n    if (formatFlags & DDPF_RGB)\n    {\n        // FIXME: We might want to allow uncompressed *.dds files?\n        throw new Error('DDSParser does not support uncompressed texture data.');\n    }\n    if (formatFlags & DDPF_YUV)\n    {\n        // FIXME: Does anybody need this feature?\n        throw new Error('DDSParser does not supported YUV uncompressed texture data.');\n    }\n    if (formatFlags & DDPF_LUMINANCE)\n    {\n        // FIXME: Microsoft says older DDS filers use this feature! Probably not worth the effort!\n        throw new Error('DDSParser does not support single-channel (lumninance) texture data!');\n    }\n    if (formatFlags & DDPF_ALPHA)\n    {\n        // FIXME: I'm tired! See above =)\n        throw new Error('DDSParser does not support single-channel (alpha) texture data!');\n    }\n\n    throw new Error('DDSParser failed to load a texture file due to an unknown reason!');\n}\n\n", "import { BufferResource, FORMATS, TYPES } from '@pixi/core';\nimport { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { CompressedTextureResource } from '../resources';\n\nimport type { CompressedLevelBuffer } from '../resources';\n\n/**\n * The 12-byte KTX file identifier\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.1\n * @ignore\n */\nconst FILE_IDENTIFIER = [0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A];\n\n/**\n * The value stored in the \"endianness\" field.\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.2\n * @ignore\n */\nconst ENDIANNESS = 0x04030201;\n\n/**\n * Byte offsets of the KTX file header fields\n * @ignore\n */\nconst KTX_FIELDS = {\n    FILE_IDENTIFIER: 0,\n    ENDIANNESS: 12,\n    GL_TYPE: 16,\n    GL_TYPE_SIZE: 20,\n    GL_FORMAT: 24,\n    GL_INTERNAL_FORMAT: 28,\n    GL_BASE_INTERNAL_FORMAT: 32,\n    PIXEL_WIDTH: 36,\n    PIXEL_HEIGHT: 40,\n    PIXEL_DEPTH: 44,\n    NUMBER_OF_ARRAY_ELEMENTS: 48,\n    NUMBER_OF_FACES: 52,\n    NUMBER_OF_MIPMAP_LEVELS: 56,\n    BYTES_OF_KEY_VALUE_DATA: 60\n};\n\n/**\n * Byte size of the file header fields in {@code KTX_FIELDS}\n * @ignore\n */\nconst FILE_HEADER_SIZE = 64;\n\n/**\n * Maps {@link PIXI.TYPES} to the bytes taken per component, excluding those ones that are bit-fields.\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_COMPONENT: { [id: number]: number } = {\n    [TYPES.UNSIGNED_BYTE]: 1,\n    [TYPES.UNSIGNED_SHORT]: 2,\n    [TYPES.INT]: 4,\n    [TYPES.UNSIGNED_INT]: 4,\n    [TYPES.FLOAT]: 4,\n    [TYPES.HALF_FLOAT]: 8\n};\n\n/**\n * Number of components in each {@link PIXI.FORMATS}\n * @ignore\n */\nexport const FORMATS_TO_COMPONENTS: { [id: number]: number } = {\n    [FORMATS.RGBA]: 4,\n    [FORMATS.RGB]: 3,\n    [FORMATS.RG]: 2,\n    [FORMATS.RED]: 1,\n    [FORMATS.LUMINANCE]: 1,\n    [FORMATS.LUMINANCE_ALPHA]: 2,\n    [FORMATS.ALPHA]: 1\n};\n\n/**\n * Number of bytes per pixel in bit-field types in {@link PIXI.TYPES}\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    [TYPES.UNSIGNED_SHORT_4_4_4_4]: 2,\n    [TYPES.UNSIGNED_SHORT_5_5_5_1]: 2,\n    [TYPES.UNSIGNED_SHORT_5_6_5]: 2\n};\n\nexport function parseKTX(url: string, arrayBuffer: ArrayBuffer, loadKeyValueData = false): {\n    compressed?: CompressedTextureResource[]\n    uncompressed?: { resource: BufferResource, type: TYPES, format: FORMATS }[]\n    kvData: Map<string, DataView> | null\n}\n{\n    const dataView = new DataView(arrayBuffer);\n\n    if (!validate(url, dataView))\n    {\n        return null;\n    }\n\n    const littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n    const glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian);\n    // const glTypeSize = dataView.getUint32(KTX_FIELDS.GL_TYPE_SIZE, littleEndian);\n    const glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n    const glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n    const pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n    const pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1;// \"pixelHeight = 0\" -> \"1\"\n    const pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1;// ^^\n    const numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1;// ^^\n    const numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n    const numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n    const bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n\n    // Whether the platform architecture is little endian. If littleEndian !== platformLittleEndian, then the\n    // file contents must be endian-converted!\n    // TODO: Endianness conversion\n    // const platformLittleEndian = new Uint8Array((new Uint32Array([ENDIANNESS])).buffer)[0] === 0x01;\n\n    if (pixelHeight === 0 || pixelDepth !== 1)\n    {\n        throw new Error('Only 2D textures are supported');\n    }\n    if (numberOfFaces !== 1)\n    {\n        throw new Error('CubeTextures are not supported by KTXLoader yet!');\n    }\n    if (numberOfArrayElements !== 1)\n    {\n        // TODO: Support splitting array-textures into multiple BaseTextures\n        throw new Error('WebGL does not support array textures');\n    }\n\n    // TODO: 8x4 blocks for 2bpp pvrtc\n    const blockWidth = 4;\n    const blockHeight = 4;\n\n    const alignedWidth = (pixelWidth + 3) & ~3;\n    const alignedHeight = (pixelHeight + 3) & ~3;\n    const imageBuffers = new Array<CompressedLevelBuffer[]>(numberOfArrayElements);\n    let imagePixels = pixelWidth * pixelHeight;\n\n    if (glType === 0)\n    {\n        // Align to 16 pixels (4x4 blocks)\n        imagePixels = alignedWidth * alignedHeight;\n    }\n\n    let imagePixelByteSize: number;\n\n    if (glType !== 0)\n    {\n        // Uncompressed texture format\n        if (TYPES_TO_BYTES_PER_COMPONENT[glType])\n        {\n            imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n        }\n        else\n        {\n            imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n        }\n    }\n    else\n    {\n        imagePixelByteSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n    }\n\n    if (imagePixelByteSize === undefined)\n    {\n        throw new Error('Unable to resolve the pixel format stored in the *.ktx file!');\n    }\n\n    const kvData: Map<string, DataView> | null = loadKeyValueData\n        ? parseKvData(dataView, bytesOfKeyValueData, littleEndian)\n        : null;\n\n    const imageByteSize = imagePixels * imagePixelByteSize;\n    let mipByteSize = imageByteSize;\n    let mipWidth = pixelWidth;\n    let mipHeight = pixelHeight;\n    let alignedMipWidth = alignedWidth;\n    let alignedMipHeight = alignedHeight;\n    let imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n\n    for (let mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++)\n    {\n        const imageSize = dataView.getUint32(imageOffset, littleEndian);\n        let elementOffset = imageOffset + 4;\n\n        for (let arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++)\n        {\n            // TODO: Maybe support 3D textures? :-)\n            // for (let zSlice = 0; zSlice < pixelDepth; zSlice)\n\n            let mips = imageBuffers[arrayElement];\n\n            if (!mips)\n            {\n                mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n            }\n\n            mips[mipmapLevel] = {\n                levelID: mipmapLevel,\n\n                // don't align mipWidth when texture not compressed! (glType not zero)\n                levelWidth: numberOfMipmapLevels > 1 || glType !== 0 ? mipWidth : alignedMipWidth,\n                levelHeight: numberOfMipmapLevels > 1 || glType !== 0 ? mipHeight : alignedMipHeight,\n                levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n            };\n            elementOffset += mipByteSize;\n        }\n\n        // HINT: Aligns to 4-byte boundary after jumping imageSize (in lieu of mipPadding)\n        imageOffset += imageSize + 4;// (+4 to jump the imageSize field itself)\n        imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - (imageOffset % 4) : imageOffset;\n\n        // Calculate mipWidth, mipHeight for _next_ iteration\n        mipWidth = (mipWidth >> 1) || 1;\n        mipHeight = (mipHeight >> 1) || 1;\n        alignedMipWidth = (mipWidth + blockWidth - 1) & ~(blockWidth - 1);\n        alignedMipHeight = (mipHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n        // Each mipmap level is 4-times smaller?\n        mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n    }\n\n    // We use the levelBuffers feature of CompressedTextureResource b/c texture data is image-major, not level-major.\n    if (glType !== 0)\n    {\n        return {\n            uncompressed: imageBuffers.map((levelBuffers) =>\n            {\n                let buffer: Float32Array | Uint32Array | Int32Array | Uint8Array = levelBuffers[0].levelBuffer;\n                let convertToInt = false;\n\n                if (glType === TYPES.FLOAT)\n                {\n                    buffer = new Float32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n                else if (glType === TYPES.UNSIGNED_INT)\n                {\n                    convertToInt = true;\n                    buffer = new Uint32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n                else if (glType === TYPES.INT)\n                {\n                    convertToInt = true;\n                    buffer = new Int32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n\n                return {\n                    resource: new BufferResource(\n                        buffer,\n                        {\n                            width: levelBuffers[0].levelWidth,\n                            height: levelBuffers[0].levelHeight,\n                        }\n                    ),\n                    type: glType,\n                    format: convertToInt ? convertFormatToInteger(glFormat) : glFormat,\n                };\n            }),\n            kvData\n        };\n    }\n\n    return {\n        compressed: imageBuffers.map((levelBuffers) => new CompressedTextureResource(null, {\n            format: glInternalFormat,\n            width: pixelWidth,\n            height: pixelHeight,\n            levels: numberOfMipmapLevels,\n            levelBuffers,\n        })),\n        kvData\n    };\n}\n\n/**\n * Checks whether the arrayBuffer contains a valid *.ktx file.\n * @param url\n * @param dataView\n */\nfunction validate(url: string, dataView: DataView): boolean\n{\n    // NOTE: Do not optimize this into 3 32-bit integer comparison because the endianness\n    // of the data is not specified.\n    for (let i = 0; i < FILE_IDENTIFIER.length; i++)\n    {\n        if (dataView.getUint8(i) !== FILE_IDENTIFIER[i])\n        {\n            if (process.env.DEBUG)\n            {\n                console.error(`${url} is not a valid *.ktx file!`);\n            }\n\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction convertFormatToInteger(format: FORMATS)\n{\n    switch (format)\n    {\n        case FORMATS.RGBA: return FORMATS.RGBA_INTEGER;\n        case FORMATS.RGB: return FORMATS.RGB_INTEGER;\n        case FORMATS.RG: return FORMATS.RG_INTEGER;\n        case FORMATS.RED: return FORMATS.RED_INTEGER;\n        default: return format;\n    }\n}\n\nfunction parseKvData(dataView: DataView, bytesOfKeyValueData: number, littleEndian: boolean): Map<string, DataView>\n{\n    const kvData = new Map<string, DataView>();\n    let bytesIntoKeyValueData = 0;\n\n    while (bytesIntoKeyValueData < bytesOfKeyValueData)\n    {\n        const keyAndValueByteSize = dataView.getUint32(FILE_HEADER_SIZE + bytesIntoKeyValueData, littleEndian);\n        const keyAndValueByteOffset = FILE_HEADER_SIZE + bytesIntoKeyValueData + 4;\n        const valuePadding = 3 - ((keyAndValueByteSize + 3) % 4);\n\n        // Bounds check\n        if (keyAndValueByteSize === 0 || keyAndValueByteSize > bytesOfKeyValueData - bytesIntoKeyValueData)\n        {\n            console.error('KTXLoader: keyAndValueByteSize out of bounds');\n            break;\n        }\n\n        // Note: keyNulByte can't be 0 otherwise the key is an empty string.\n        let keyNulByte = 0;\n\n        for (; keyNulByte < keyAndValueByteSize; keyNulByte++)\n        {\n            if (dataView.getUint8(keyAndValueByteOffset + keyNulByte) === 0x00)\n            {\n                break;\n            }\n        }\n\n        if (keyNulByte === -1)\n        {\n            console.error('KTXLoader: Failed to find null byte terminating kvData key');\n            break;\n        }\n\n        const key = new TextDecoder().decode(\n            new Uint8Array(dataView.buffer, keyAndValueByteOffset, keyNulByte)\n        );\n        const value = new DataView(\n            dataView.buffer,\n            keyAndValueByteOffset + keyNulByte + 1,\n            keyAndValueByteSize - keyNulByte - 1,\n        );\n\n        kvData.set(key, value);\n\n        // 4 = the keyAndValueByteSize field itself\n        // keyAndValueByteSize = the bytes taken by the key and value\n        // valuePadding = extra padding to align with 4 bytes\n        bytesIntoKeyValueData += 4 + keyAndValueByteSize + valuePadding;\n    }\n\n    return kvData;\n}\n", "import { checkExtension, createTexture, LoaderParserPriority } from '@pixi/assets';\nimport { ALPHA_MODES, BaseTexture, extensions, ExtensionType, MIPMAP_MODES, settings, utils } from '@pixi/core';\nimport { parseDDS } from '../parsers';\n\nimport type { Loader, LoaderParser, ResolvedAsset } from '@pixi/assets';\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\n\n/** Load our DDS textures! */\nexport const loadDDS: LoaderParser = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    name: 'loadDDS',\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.dds');\n    },\n\n    async load(url: string, asset: ResolvedAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const resources = parseDDS(arrayBuffer);\n\n        const textures = resources.map((resource) =>\n        {\n            const base = new BaseTexture(resource, {\n                mipmap: MIPMAP_MODES.OFF,\n                alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n                resolution: utils.getResolutionOfUrl(url),\n                ...asset.data,\n            });\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadDDS);\n", "import { checkExtension, createTexture, LoaderParserPriority } from '@pixi/assets';\nimport { ALPHA_MODES, BaseTexture, extensions, ExtensionType, MIPMAP_MODES, settings, utils } from '@pixi/core';\nimport { parseKTX } from '../parsers';\n\nimport type { Loader, LoaderParser, ResolvedAsset } from '@pixi/assets';\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\n\n/** Loads KTX textures! */\nexport const loadKTX = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    name: 'loadKTX',\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.ktx');\n    },\n\n    async load(url: string, asset: ResolvedAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const { compressed, uncompressed, kvData } = parseKTX(url, arrayBuffer);\n\n        const resources = compressed ?? uncompressed;\n\n        const options = {\n            mipmap: MIPMAP_MODES.OFF,\n            alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n            resolution: utils.getResolutionOfUrl(url),\n            ...asset.data,\n        };\n\n        const textures = resources.map((resource) =>\n        {\n            if (resources === uncompressed)\n            {\n                Object.assign(options, {\n                    type: (resource as typeof uncompressed[0]).type,\n                    format: (resource as typeof uncompressed[0]).format,\n                });\n            }\n\n            const res = (resource as typeof uncompressed[0]).resource ?? (resource as typeof compressed[0]);\n\n            const base = new BaseTexture(res, options);\n\n            base.ktxKeyValueData = kvData;\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadKTX);\n", "import { extensions, ExtensionType, settings, utils } from '@pixi/core';\n\nimport type { ResolveURLParser, UnresolvedAsset } from '@pixi/assets';\n\nexport const resolveCompressedTextureUrl = {\n    extension: ExtensionType.ResolveParser,\n    test: (value: string) =>\n    {\n        const extension = utils.path.extname(value).slice(1);\n\n        return ['basis', 'ktx', 'dds'].includes(extension);\n    },\n    parse: (value: string): UnresolvedAsset =>\n    {\n        const extension = utils.path.extname(value).slice(1);\n\n        if (extension === 'ktx')\n        {\n            const extensions = [\n                '.s3tc.ktx',\n                '.s3tc_sRGB.ktx',\n                '.etc.ktx',\n                '.etc1.ktx',\n                '.pvrt.ktx',\n                '.atc.ktx',\n                '.astc.ktx'\n            ];\n\n            // check if value ends with one of the extensions\n            if (extensions.some((ext) => value.endsWith(ext)))\n            {\n                return {\n                    resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                    format: extensions.find((ext) => value.endsWith(ext)),\n                    src: value,\n                };\n            }\n        }\n\n        return {\n            resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n            format: extension,\n            src: value,\n        };\n    },\n} as ResolveURLParser;\n\nextensions.add(resolveCompressedTextureUrl);\n", "import { extensions, ExtensionType, FORMATS, Rectangle, RenderTexture, utils } from '@pixi/core';\n\nimport type { ExtensionMetadata, ICanvas, ISystem, Renderer } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\nexport interface IExtract\n{\n    image(target?: DisplayObject | RenderTexture, format?: string, quality?: number,\n        frame?: Rectangle): Promise<HTMLImageElement>;\n    base64(target?: DisplayObject | RenderTexture, format?: string, quality?: number,\n        frame?: Rectangle): Promise<string>;\n    canvas(target?: DisplayObject | RenderTexture, frame?: Rectangle): ICanvas;\n    pixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): Uint8Array | Uint8ClampedArray;\n}\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.extract` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (extract will be auto-added to renderer)\n * const app = new Application();\n *\n * // Draw a red circle\n * const graphics = new Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = await app.renderer.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof PIXI\n */\n\nexport class Extract implements ISystem, IExtract\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'extract',\n        type: ExtensionType.RendererSystem,\n    };\n\n    private renderer: Renderer | null;\n\n    /** Does the renderer have alpha and are its color channels stored premultipled by the alpha channel? */\n    private _rendererPremultipliedAlpha: boolean;\n\n    /**\n     * @param renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this._rendererPremultipliedAlpha = false;\n    }\n\n    protected contextChange(): void\n    {\n        const attributes = this.renderer?.gl.getContextAttributes();\n\n        this._rendererPremultipliedAlpha = !!(attributes && attributes.alpha && attributes.premultipliedAlpha);\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - HTML Image of the target\n     */\n    public async image(target?: DisplayObject | RenderTexture, format?: string, quality?: number,\n        frame?: Rectangle): Promise<HTMLImageElement>\n    {\n        const image = new Image();\n\n        image.src = await this.base64(target, format, quality, frame);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     *  `Extract.canvas` and then running toDataURL on that.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - A base64 encoded string of the texture.\n     */\n    public async base64(target?: DisplayObject | RenderTexture, format?: string, quality?: number,\n        frame?: Rectangle): Promise<string>\n    {\n        const canvas = this.canvas(target, frame);\n\n        if (canvas.toBlob !== undefined)\n        {\n            return new Promise<string>((resolve, reject) =>\n            {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                canvas.toBlob!((blob) =>\n                {\n                    if (!blob)\n                    {\n                        reject(new Error('ICanvas.toBlob failed!'));\n\n                        return;\n                    }\n\n                    const reader = new FileReader();\n\n                    reader.onload = () => resolve(reader.result as string);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                }, format, quality);\n            });\n        }\n        if (canvas.toDataURL !== undefined)\n        {\n            return canvas.toDataURL(format, quality);\n        }\n        if (canvas.convertToBlob !== undefined)\n        {\n            const blob = await canvas.convertToBlob({ type: format, quality });\n\n            return new Promise<string>((resolve, reject) =>\n            {\n                const reader = new FileReader();\n\n                reader.onload = () => resolve(reader.result as string);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n\n        throw new Error('Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, '\n            + 'or ICanvas.convertToBlob to be implemented');\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(target?: DisplayObject | RenderTexture, frame?: Rectangle): ICanvas\n    {\n        const { pixels, width, height, flipY, premultipliedAlpha } = this._rawPixels(target, frame);\n\n        // Flipping pixels\n        if (flipY)\n        {\n            Extract._flipY(pixels, width, height);\n        }\n\n        if (premultipliedAlpha)\n        {\n            Extract._unpremultiplyAlpha(pixels);\n        }\n\n        const canvasBuffer = new utils.CanvasRenderTarget(width, height, 1);\n\n        // Add the pixels to the canvas\n        const imageData = new ImageData(new Uint8ClampedArray(pixels.buffer), width, height);\n\n        canvasBuffer.context.putImageData(imageData, 0, 0);\n\n        // Send the canvas back\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): Uint8Array\n    {\n        const { pixels, width, height, flipY, premultipliedAlpha } = this._rawPixels(target, frame);\n\n        if (flipY)\n        {\n            Extract._flipY(pixels, width, height);\n        }\n\n        if (premultipliedAlpha)\n        {\n            Extract._unpremultiplyAlpha(pixels);\n        }\n\n        return pixels;\n    }\n\n    private _rawPixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): {\n        pixels: Uint8Array, width: number, height: number, flipY: boolean, premultipliedAlpha: boolean\n    }\n    {\n        const renderer = this.renderer;\n\n        if (!renderer)\n        {\n            throw new Error('The Extract has already been destroyed');\n        }\n\n        let resolution;\n        let flipY = false;\n        let premultipliedAlpha = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target, {\n                    region: frame,\n                    resolution: renderer.resolution,\n                    multisample: renderer.multisample\n                });\n                generated = true;\n\n                if (frame)\n                {\n                    TEMP_RECT.width = frame.width;\n                    TEMP_RECT.height = frame.height;\n                    frame = TEMP_RECT;\n                }\n            }\n        }\n\n        const gl = renderer.gl;\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = frame ?? renderTexture.frame;\n            flipY = false;\n            premultipliedAlpha = renderTexture.baseTexture.alphaMode > 0\n                && renderTexture.baseTexture.format === FORMATS.RGBA;\n\n            if (!generated)\n            {\n                renderer.renderTexture.bind(renderTexture);\n\n                const fbo = renderTexture.framebuffer.glFramebuffers[renderer.CONTEXT_UID];\n\n                if (fbo.blitFramebuffer)\n                {\n                    renderer.framebuffer.bind(fbo.blitFramebuffer);\n                }\n            }\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            if (!frame)\n            {\n                frame = TEMP_RECT;\n                frame.width = renderer.width / resolution;\n                frame.height = renderer.height / resolution;\n            }\n\n            flipY = true;\n            premultipliedAlpha = this._rendererPremultipliedAlpha;\n            renderer.renderTexture.bind();\n        }\n\n        const width = Math.max(Math.round(frame.width * resolution), 1);\n        const height = Math.max(Math.round(frame.height * resolution), 1);\n\n        const pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // Read pixels to the array\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            pixels\n        );\n\n        if (generated)\n        {\n            renderTexture?.destroy(true);\n        }\n\n        return { pixels, width, height, flipY, premultipliedAlpha };\n    }\n\n    /** Destroys the extract. */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    private static _flipY(pixels: Uint8Array | Uint8ClampedArray, width: number, height: number): void\n    {\n        const w = width << 2;\n        const h = height >> 1;\n        const temp = new Uint8Array(w);\n\n        for (let y = 0; y < h; y++)\n        {\n            const t = y * w;\n            const b = (height - y - 1) * w;\n\n            temp.set(pixels.subarray(t, t + w));\n            pixels.copyWithin(t, b, b + w);\n            pixels.set(temp, b);\n        }\n    }\n\n    private static _unpremultiplyAlpha(pixels: Uint8Array | Uint8ClampedArray): void\n    {\n        if (pixels instanceof Uint8ClampedArray)\n        {\n            pixels = new Uint8Array(pixels.buffer);\n        }\n\n        const n = pixels.length;\n\n        for (let i = 0; i < n; i += 4)\n        {\n            const alpha = pixels[i + 3];\n\n            if (alpha !== 0)\n            {\n                const a = 255.001 / alpha;\n\n                pixels[i] = (pixels[i] * a) + 0.5;\n                pixels[i + 1] = (pixels[i + 1] * a) + 0.5;\n                pixels[i + 2] = (pixels[i + 2] * a) + 0.5;\n            }\n        }\n    }\n}\n\nextensions.add(Extract);\n", "/**\n * CountLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of items per frame.\n * @memberof PIXI\n */\nexport class CountLimiter\n{\n    /** The maximum number of items that can be prepared each frame. */\n    public maxItemsPerFrame: number;\n\n    /** The number of items that can be prepared in the current frame. */\n    public itemsLeft: number;\n\n    /**\n     * @param maxItemsPerFrame - The maximum number of items that can be prepared each frame.\n     */\n    constructor(maxItemsPerFrame: number)\n    {\n        this.maxItemsPerFrame = maxItemsPerFrame;\n        this.itemsLeft = 0;\n    }\n\n    /** Resets any counting properties to start fresh on a new frame. */\n    beginFrame(): void\n    {\n        this.itemsLeft = this.maxItemsPerFrame;\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @returns If the item is allowed to be uploaded.\n     */\n    allowedToUpload(): boolean\n    {\n        return this.itemsLeft-- > 0;\n    }\n}\n", "import { BaseTexture, Texture, Ticker, UPDATE_PRIORITY } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Text, TextMetrics, TextStyle } from '@pixi/text';\nimport { CountLimiter } from './CountLimiter';\n\nimport type { IRenderer } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\ninterface IArrowFunction\n{\n    (): void;\n}\ninterface IUploadHook\n{\n    (helper: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean;\n}\n\ninterface IFindHook\n{\n    (item: any, queue: Array<any>): boolean;\n}\n\nexport interface IDisplayObjectExtended extends DisplayObject\n{\n    _textures?: Array<Texture>;\n    _texture?: Texture;\n    style?: TextStyle | Partial<TextStyle>;\n}\n\n/**\n * Built-in hook to find multiple textures from objects like AnimatedSprites.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findMultipleBaseTextures(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    let result = false;\n\n    // Objects with multiple textures\n    if (item?._textures?.length)\n    {\n        for (let i = 0; i < item._textures.length; i++)\n        {\n            if (item._textures[i] instanceof Texture)\n            {\n                const baseTexture = item._textures[i].baseTexture;\n\n                if (!queue.includes(baseTexture))\n                {\n                    queue.push(baseTexture);\n                    result = true;\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * Built-in hook to find BaseTextures from Texture.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findBaseTexture(item: Texture, queue: Array<any>): boolean\n{\n    if (item.baseTexture instanceof BaseTexture)\n    {\n        const texture = item.baseTexture;\n\n        if (!queue.includes(texture))\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find textures from objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findTexture(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item._texture && item._texture instanceof Texture)\n    {\n        const texture = item._texture.baseTexture;\n\n        if (!queue.includes(texture))\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to draw PIXI.Text to its texture.\n * @private\n * @param _helper - Not used by this upload handler\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction drawText(_helper: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (item instanceof Text)\n    {\n        // updating text will return early if it is not dirty\n        item.updateText(true);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to calculate a text style for a PIXI.Text object.\n * @private\n * @param _helper - Not used by this upload handler\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction calculateTextStyle(_helper: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (item instanceof TextStyle)\n    {\n        const font = item.toFontString();\n\n        TextMetrics.measureFont(font);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find Text objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns if a PIXI.Text object was found.\n */\nfunction findText(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item instanceof Text)\n    {\n        // push the text style to prepare it - this can be really expensive\n        if (!queue.includes(item.style))\n        {\n            queue.push(item.style);\n        }\n        // also push the text object so that we can render it (to canvas/texture) if needed\n        if (!queue.includes(item))\n        {\n            queue.push(item);\n        }\n        // also push the Text's texture for upload to GPU\n        const texture = item._texture.baseTexture;\n\n        if (!queue.includes(texture))\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find TextStyle objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.TextStyle object was found.\n */\nfunction findTextStyle(item: TextStyle, queue: Array<any>): boolean\n{\n    if (item instanceof TextStyle)\n    {\n        if (!queue.includes(item))\n        {\n            queue.push(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * BasePrepare handles basic queuing functionality and is extended by\n * {@link PIXI.Prepare} and {@link PIXI.CanvasPrepare}\n * to provide preparation capabilities specific to their respective renderers.\n * @example\n * // Create a sprite\n * const sprite = PIXI.Sprite.from('something.png');\n *\n * // Load object into GPU\n * app.renderer.prepare.upload(sprite, () => {\n *     // Texture(s) has been uploaded to GPU\n *     app.stage.addChild(sprite);\n * });\n * @abstract\n * @memberof PIXI\n */\nexport class BasePrepare\n{\n    /**\n     * The default maximum uploads per frame.\n     * @static\n     */\n    public static uploadsPerFrame = 4;\n\n    /**\n     * The limiter to be used to control how quickly items are prepared.\n     * @type {PIXI.CountLimiter|PIXI.TimeLimiter}\n     */\n    private limiter: CountLimiter;\n\n    /** Reference to the renderer. */\n    protected renderer: IRenderer;\n\n    /**\n     * The only real difference between CanvasPrepare and Prepare is what they pass\n     * to upload hooks. That different parameter is stored here.\n     */\n    protected uploadHookHelper: any;\n\n    /** Collection of items to uploads at once. */\n    protected queue: Array<any>;\n\n    /**\n     * Collection of additional hooks for finding assets.\n     * @type {Array<Function>}\n     */\n    public addHooks: Array<any>;\n\n    /**\n     * Collection of additional hooks for processing assets.\n     * @type {Array<Function>}\n     */\n    public uploadHooks: Array<any>;\n\n    /**\n     * Callback to call after completed.\n     * @type {Array<Function>}\n     */\n    public completes: Array<any>;\n\n    /**\n     * If prepare is ticking (running).\n     * @type {boolean}\n     */\n    public ticking: boolean;\n\n    /**\n     * 'bound' call for prepareItems().\n     * @type {Function}\n     */\n    private delayedTick: IArrowFunction;\n\n    /**\n     * @param {PIXI.IRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: IRenderer)\n    {\n        this.limiter = new CountLimiter(BasePrepare.uploadsPerFrame);\n        this.renderer = renderer;\n        this.uploadHookHelper = null;\n        this.queue = [];\n        this.addHooks = [];\n        this.uploadHooks = [];\n        this.completes = [];\n        this.ticking = false;\n        this.delayedTick = (): void =>\n        {\n            // unlikely, but in case we were destroyed between tick() and delayedTick()\n            if (!this.queue)\n            {\n                return;\n            }\n            this.prepareItems();\n        };\n\n        // hooks to find the correct texture\n        this.registerFindHook(findText);\n        this.registerFindHook(findTextStyle);\n        this.registerFindHook(findMultipleBaseTextures);\n        this.registerFindHook(findBaseTexture);\n        this.registerFindHook(findTexture);\n\n        // upload hooks\n        this.registerUploadHook(drawText);\n        this.registerUploadHook(calculateTextStyle);\n    }\n\n    /**\n     * Upload all the textures and graphics to the GPU.\n     * @method PIXI.BasePrepare#upload\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} [item] -\n     *        Container or display object to search for items to upload or the items to upload themselves,\n     *        or optionally ommitted, if items have been added using {@link PIXI.BasePrepare#add `prepare.add`}.\n     */\n    upload(item?: IDisplayObjectExtended | Container | BaseTexture | Texture): Promise<void>\n    {\n        return new Promise((resolve) =>\n        {\n            // If a display object, search for items\n            // that we could upload\n            if (item)\n            {\n                this.add(item as IDisplayObjectExtended | Container | BaseTexture | Texture);\n            }\n\n            // Get the items for upload from the display\n            if (this.queue.length)\n            {\n                this.completes.push(resolve);\n\n                if (!this.ticking)\n                {\n                    this.ticking = true;\n                    Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n                }\n            }\n            else\n            {\n                resolve();\n            }\n        });\n    }\n\n    /**\n     * Handle tick update\n     * @private\n     */\n    tick(): void\n    {\n        setTimeout(this.delayedTick, 0);\n    }\n\n    /**\n     * Actually prepare items. This is handled outside of the tick because it will take a while\n     * and we do NOT want to block the current animation frame from rendering.\n     * @private\n     */\n    prepareItems(): void\n    {\n        this.limiter.beginFrame();\n        // Upload the graphics\n        while (this.queue.length && this.limiter.allowedToUpload())\n        {\n            const item = this.queue[0];\n            let uploaded = false;\n\n            if (item && !item._destroyed)\n            {\n                for (let i = 0, len = this.uploadHooks.length; i < len; i++)\n                {\n                    if (this.uploadHooks[i](this.uploadHookHelper, item))\n                    {\n                        this.queue.shift();\n                        uploaded = true;\n                        break;\n                    }\n                }\n            }\n\n            if (!uploaded)\n            {\n                this.queue.shift();\n            }\n        }\n\n        // We're finished\n        if (!this.queue.length)\n        {\n            this.ticking = false;\n\n            const completes = this.completes.slice(0);\n\n            this.completes.length = 0;\n\n            for (let i = 0, len = completes.length; i < len; i++)\n            {\n                completes[i]();\n            }\n        }\n        else\n        {\n            // if we are not finished, on the next rAF do this again\n            Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n        }\n    }\n\n    /**\n     * Adds hooks for finding items.\n     * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`\n     *          function must return `true` if it was able to add item to the queue.\n     * @returns Instance of plugin for chaining.\n     */\n    registerFindHook(addHook: IFindHook): this\n    {\n        if (addHook)\n        {\n            this.addHooks.push(addHook);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds hooks for uploading items.\n     * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and\n     *          function must return `true` if it was able to handle upload of item.\n     * @returns Instance of plugin for chaining.\n     */\n    registerUploadHook(uploadHook: IUploadHook): this\n    {\n        if (uploadHook)\n        {\n            this.uploadHooks.push(uploadHook);\n        }\n\n        return this;\n    }\n\n    /**\n     * Manually add an item to the uploading queue.\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to\n     *        add to the queue\n     * @returns Instance of plugin for chaining.\n     */\n    add(item: IDisplayObjectExtended | Container | BaseTexture | Texture): this\n    {\n        // Add additional hooks for finding elements on special\n        // types of objects that\n        for (let i = 0, len = this.addHooks.length; i < len; i++)\n        {\n            if (this.addHooks[i](item, this.queue))\n            {\n                break;\n            }\n        }\n\n        // Get children recursively\n        if (item instanceof Container)\n        {\n            for (let i = item.children.length - 1; i >= 0; i--)\n            {\n                this.add(item.children[i]);\n            }\n        }\n\n        return this;\n    }\n\n    /** Destroys the plugin, don't use after this. */\n    destroy(): void\n    {\n        if (this.ticking)\n        {\n            Ticker.system.remove(this.tick, this);\n        }\n        this.ticking = false;\n        this.addHooks = null;\n        this.uploadHooks = null;\n        this.renderer = null;\n        this.completes = null;\n        this.queue = null;\n        this.limiter = null;\n        this.uploadHookHelper = null;\n    }\n}\n", "import { settings, utils } from '@pixi/core';\nimport { BasePrepare } from './BasePrepare';\n\nObject.defineProperties(settings, {\n    /**\n     * Default number of uploads per frame using prepare plugin.\n     * @static\n     * @memberof PIXI.settings\n     * @name UPLOADS_PER_FRAME\n     * @deprecated since 7.1.0\n     * @see PIXI.BasePrepare.uploadsPerFrame\n     * @type {number}\n     */\n    UPLOADS_PER_FRAME:\n    {\n        get()\n        {\n            return BasePrepare.uploadsPerFrame;\n        },\n        set(value: number)\n        {\n            if (process.env.DEBUG)\n            {\n                // eslint-disable-next-line max-len\n                utils.deprecation('7.1.0', 'settings.UPLOADS_PER_FRAME is deprecated, use prepare.BasePrepare.uploadsPerFrame');\n            }\n            BasePrepare.uploadsPerFrame = value;\n        },\n    },\n});\n\nexport { settings };\n", "import { BaseTexture, extensions, ExtensionType } from '@pixi/core';\nimport { Graphics } from '@pixi/graphics';\nimport { BasePrepare } from './BasePrepare';\n\nimport type { ExtensionMetadata, IRenderer, ISystem, Renderer } from '@pixi/core';\nimport type { IDisplayObjectExtended } from './BasePrepare';\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction uploadBaseTextures(renderer: IRenderer | BasePrepare, item: IDisplayObjectExtended | BaseTexture): boolean\n{\n    if (item instanceof BaseTexture)\n    {\n        // if the texture already has a GL texture, then the texture has been prepared or rendered\n        // before now. If the texture changed, then the changer should be calling texture.update() which\n        // reuploads the texture without need for preparing it again\n        if (!item._glTextures[(renderer as Renderer).CONTEXT_UID])\n        {\n            (renderer as Renderer).texture.bind(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction uploadGraphics(renderer: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (!(item instanceof Graphics))\n    {\n        return false;\n    }\n\n    const { geometry } = item;\n\n    // update dirty graphics to get batches\n    item.finishPoly();\n    geometry.updateBatches();\n\n    const { batches } = geometry;\n\n    // upload all textures found in styles\n    for (let i = 0; i < batches.length; i++)\n    {\n        const { texture } = batches[i].style;\n\n        if (texture)\n        {\n            uploadBaseTextures(renderer, texture.baseTexture);\n        }\n    }\n\n    // if its not batchable - update vao for particular shader\n    if (!geometry.batchable)\n    {\n        (renderer as Renderer).geometry.bind(geometry, (item as any)._resolveDirectShader((renderer as Renderer)));\n    }\n\n    return true;\n}\n\n/**\n * Built-in hook to find graphics.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item instanceof Graphics)\n    {\n        queue.push(item);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * The prepare plugin provides renderer-specific plugins for pre-rendering DisplayObjects. These plugins are useful for\n * asynchronously preparing and uploading to the GPU assets, textures, graphics waiting to be displayed.\n *\n * Do not instantiate this plugin directly. It is available from the `renderer.prepare` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (prepare will be auto-added to renderer)\n * const app = new Application();\n * document.body.appendChild(app.view);\n *\n * // Don't start rendering right away\n * app.stop();\n *\n * // Create a display object\n * const rect = new Graphics()\n *     .beginFill(0x00ff00)\n *     .drawRect(40, 40, 200, 200);\n *\n * // Add to the stage\n * app.stage.addChild(rect);\n *\n * // Don't start rendering until the graphic is uploaded to the GPU\n * app.renderer.prepare.upload(app.stage, () => {\n *     app.start();\n * });\n * @memberof PIXI\n */\nexport class Prepare extends BasePrepare implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'prepare',\n        type: ExtensionType.RendererSystem,\n    };\n\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this.renderer;\n\n        // Add textures and graphics to upload\n        this.registerFindHook(findGraphics);\n        this.registerUploadHook(uploadBaseTextures);\n        this.registerUploadHook(uploadGraphics);\n    }\n}\n\nextensions.add(Prepare);\n", "/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n * @memberof PIXI\n */\nexport class TimeLimiter\n{\n    /** The maximum milliseconds that can be spent preparing items each frame. */\n    public maxMilliseconds: number;\n\n    /**\n     * The start time of the current frame.\n     * @readonly\n     */\n    public frameStart: number;\n\n    /** @param maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame. */\n    constructor(maxMilliseconds: number)\n    {\n        this.maxMilliseconds = maxMilliseconds;\n        this.frameStart = 0;\n    }\n\n    /** Resets any counting properties to start fresh on a new frame. */\n    beginFrame(): void\n    {\n        this.frameStart = Date.now();\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @returns - If the item is allowed to be uploaded.\n     */\n    allowedToUpload(): boolean\n    {\n        return Date.now() - this.frameStart < this.maxMilliseconds;\n    }\n}\n", "import { BaseTexture, Rectangle, Texture, utils } from '@pixi/core';\n\nimport type { ImageResource, IPointData, ITextureBorders } from '@pixi/core';\n\n/**\n * Represents the JSON data for a spritesheet atlas.\n * @memberof PIXI\n */\nexport interface ISpritesheetFrameData\n{\n    frame: {\n        h: number;\n        w: number;\n        x: number;\n        y: number;\n    };\n    trimmed?: boolean;\n    rotated?: boolean;\n    sourceSize?: {\n        h: number;\n        w: number;\n    };\n    spriteSourceSize?: {\n        h?: number;\n        w?: number;\n        x: number;\n        y: number;\n    };\n    anchor?: IPointData;\n    borders?: ITextureBorders;\n}\n\n/**\n * Atlas format.\n * @memberof PIXI\n */\nexport interface ISpritesheetData\n{\n    animations?: utils.Dict<string[]>;\n    frames: utils.Dict<ISpritesheetFrameData>;\n    meta: {\n        app?: string;\n        format?: string;\n        frameTags?: {\n            from: number;\n            name: string;\n            to: number;\n            direction: string;\n        }[];\n        image?: string;\n        layers?: {\n            blendMode: string;\n            name: string;\n            opacity: number;\n        }[];\n        scale: string;\n        size?: {\n            h: number;\n            w: number;\n        };\n        slices?: {\n            color: string;\n            name: string;\n            keys: {\n                frame: number,\n                bounds: {\n                    x: number;\n                    y: number;\n                    w: number;\n                    h: number;\n                };\n            }[];\n        }[];\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n        version?: string;\n    };\n}\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code you may pass its JSON data file to Pixi's loader:\n *\n * ```js\n * import { Assets } from 'pixi.js';\n *\n * const sheet = await Assets.load('images/spritesheet.json');\n * ```\n *\n * Alternately, you may circumvent the loader by instantiating the Spritesheet directly:\n *\n * ```js\n * import { Spritesheet } from 'pixi.js';\n *\n * const sheet = new Spritesheet(texture, spritesheetData);\n * await sheet.parse();\n * console.log('Spritesheet ready to use!');\n * ```\n *\n * With the `sheet.textures` you can create Sprite objects, and `sheet.animations` can be used to create an AnimatedSprite.\n *\n * Here's an example of a sprite sheet JSON data file:\n * ```json\n * {\n *     \"frames\": {\n *         \"enemy1.png\":\n *         {\n *             \"frame\": {\"x\":103,\"y\":1,\"w\":32,\"h\":32},\n *             \"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":32,\"h\":32},\n *             \"sourceSize\": {\"w\":32,\"h\":32},\n *             \"anchor\": {\"x\":16,\"y\":16}\n *         },\n *         \"enemy2.png\":\n *         {\n *             \"frame\": {\"x\":103,\"y\":35,\"w\":32,\"h\":32},\n *             \"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":32,\"h\":32},\n *             \"sourceSize\": {\"w\":32,\"h\":32},\n *             \"anchor\": {\"x\":16,\"y\":16}\n *         },\n *         \"button.png\":\n *         {\n *             \"frame\": {\"x\":1,\"y\":1,\"w\":100,\"h\":100},\n *             \"spriteSourceSize\": {\"x\":0,\"y\":0,\"w\":100,\"h\":100},\n *             \"sourceSize\": {\"w\":100,\"h\":100},\n *             \"anchor\": {\"x\":0,\"y\":0},\n *             \"borders\": {\"left\":35,\"top\":35,\"right\":35,\"bottom\":35}\n *         }\n *     },\n *\n *     \"animations\": {\n *         \"enemy\": [\"enemy1.png\",\"enemy2.png\"]\n *     },\n *\n *     \"meta\": {\n *         \"image\": \"sheet.png\",\n *         \"format\": \"RGBA8888\",\n *         \"size\": {\"w\":136,\"h\":102},\n *         \"scale\": \"1\"\n *     }\n * }\n * ```\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}), default 9-slice borders\n * (see {@link PIXI.Texture#defaultBorders}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n * @memberof PIXI\n */\nexport class Spritesheet<S extends ISpritesheetData = ISpritesheetData>\n{\n    /** The maximum number of Textures to build per process. */\n    static readonly BATCH_SIZE = 1000;\n\n    /** For multi-packed spritesheets, this contains a reference to all the other spritesheets it depends on. */\n    public linkedSheets: Spritesheet<S>[] = [];\n\n    /** Reference to ths source texture. */\n    public baseTexture: BaseTexture;\n\n    /**\n     * A map containing all textures of the sprite sheet.\n     * Can be used to create a {@link PIXI.Sprite|Sprite}:\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * new Sprite(sheet.textures['image.png']);\n     */\n    public textures: Record<keyof S['frames'], Texture>;\n\n    /**\n     * A map containing the textures for each animation.\n     * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:\n     * @example\n     * import { AnimatedSprite } from 'pixi.js';\n     *\n     * new AnimatedSprite(sheet.animations['anim_name']);\n     */\n    public animations: Record<keyof S['animations'], Texture[]>;\n\n    /**\n     * Reference to the original JSON data.\n     * @type {object}\n     */\n    public data: S;\n\n    /** The resolution of the spritesheet. */\n    public resolution: number;\n\n    /**\n     * Reference to original source image from the Loader. This reference is retained so we\n     * can destroy the Texture later on. It is never used internally.\n     */\n    private _texture: Texture;\n\n    /**\n     * Map of spritesheet frames.\n     * @type {object}\n     */\n    private _frames: S['frames'];\n\n    /** Collection of frame names. */\n    private _frameKeys: (keyof S['frames'])[];\n\n    /** Current batch index being processed. */\n    private _batchIndex: number;\n\n    /**\n     * Callback when parse is completed.\n     * @type {Function}\n     */\n    private _callback: (textures: utils.Dict<Texture>) => void;\n\n    /**\n     * @param texture - Reference to the source BaseTexture object.\n     * @param {object} data - Spritesheet image data.\n     * @param resolutionFilename - The filename to consider when determining\n     *        the resolution of the spritesheet. If not provided, the imageUrl will\n     *        be used on the BaseTexture.\n     */\n    constructor(texture: BaseTexture | Texture, data: S, resolutionFilename: string = null)\n    {\n        this._texture = texture instanceof Texture ? texture : null;\n        this.baseTexture = texture instanceof BaseTexture ? texture : this._texture.baseTexture;\n        this.textures = {} as Record<keyof S['frames'], Texture>;\n        this.animations = {} as Record<keyof S['animations'], Texture[]>;\n        this.data = data;\n\n        const resource = this.baseTexture.resource as ImageResource;\n\n        this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null));\n        this._frames = this.data.frames;\n        this._frameKeys = Object.keys(this._frames);\n        this._batchIndex = 0;\n        this._callback = null;\n    }\n\n    /**\n     * Generate the resolution from the filename or fallback\n     * to the meta.scale field of the JSON data.\n     * @param resolutionFilename - The filename to use for resolving\n     *        the default resolution.\n     * @returns Resolution to use for spritesheet.\n     */\n    private _updateResolution(resolutionFilename: string = null): number\n    {\n        const { scale } = this.data.meta;\n\n        // Use a defaultValue of `null` to check if a url-based resolution is set\n        let resolution = utils.getResolutionOfUrl(resolutionFilename, null);\n\n        // No resolution found via URL\n        if (resolution === null)\n        {\n            // Use the scale value or default to 1\n            resolution = parseFloat(scale ?? '1');\n        }\n\n        // For non-1 resolutions, update baseTexture\n        if (resolution !== 1)\n        {\n            this.baseTexture.setResolution(resolution);\n        }\n\n        return resolution;\n    }\n\n    /**\n     * Parser spritesheet from loaded data. This is done asynchronously\n     * to prevent creating too many Texture within a single process.\n     * @method PIXI.Spritesheet#parse\n     */\n    public parse(): Promise<utils.Dict<Texture>>\n    {\n        return new Promise((resolve) =>\n        {\n            this._callback = resolve;\n            this._batchIndex = 0;\n\n            if (this._frameKeys.length <= Spritesheet.BATCH_SIZE)\n            {\n                this._processFrames(0);\n                this._processAnimations();\n                this._parseComplete();\n            }\n            else\n            {\n                this._nextBatch();\n            }\n        });\n    }\n\n    /**\n     * Process a batch of frames\n     * @param initialFrameIndex - The index of frame to start.\n     */\n    private _processFrames(initialFrameIndex: number): void\n    {\n        let frameIndex = initialFrameIndex;\n        const maxFrames = Spritesheet.BATCH_SIZE;\n\n        while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length)\n        {\n            const i = this._frameKeys[frameIndex];\n            const data = this._frames[i];\n            const rect = data.frame;\n\n            if (rect)\n            {\n                let frame = null;\n                let trim = null;\n                const sourceSize = data.trimmed !== false && data.sourceSize\n                    ? data.sourceSize : data.frame;\n\n                const orig = new Rectangle(\n                    0,\n                    0,\n                    Math.floor(sourceSize.w) / this.resolution,\n                    Math.floor(sourceSize.h) / this.resolution\n                );\n\n                if (data.rotated)\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.h) / this.resolution,\n                        Math.floor(rect.w) / this.resolution\n                    );\n                }\n                else\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                //  Check to see if the sprite is trimmed\n                if (data.trimmed !== false && data.spriteSourceSize)\n                {\n                    trim = new Rectangle(\n                        Math.floor(data.spriteSourceSize.x) / this.resolution,\n                        Math.floor(data.spriteSourceSize.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                this.textures[i] = new Texture(\n                    this.baseTexture,\n                    frame,\n                    orig,\n                    trim,\n                    data.rotated ? 2 : 0,\n                    data.anchor,\n                    data.borders\n                );\n\n                // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n                Texture.addToCache(this.textures[i], i.toString());\n            }\n\n            frameIndex++;\n        }\n    }\n\n    /** Parse animations config. */\n    private _processAnimations(): void\n    {\n        const animations = this.data.animations || {};\n\n        for (const animName in animations)\n        {\n            this.animations[animName as keyof S['animations']] = [];\n            for (let i = 0; i < animations[animName].length; i++)\n            {\n                const frameName = animations[animName][i];\n\n                this.animations[animName].push(this.textures[frameName]);\n            }\n        }\n    }\n\n    /** The parse has completed. */\n    private _parseComplete(): void\n    {\n        const callback = this._callback;\n\n        this._callback = null;\n        this._batchIndex = 0;\n        callback.call(this, this.textures);\n    }\n\n    /** Begin the next batch of textures. */\n    private _nextBatch(): void\n    {\n        this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n        this._batchIndex++;\n        setTimeout(() =>\n        {\n            if (this._batchIndex * Spritesheet.BATCH_SIZE < this._frameKeys.length)\n            {\n                this._nextBatch();\n            }\n            else\n            {\n                this._processAnimations();\n                this._parseComplete();\n            }\n        }, 0);\n    }\n\n    /**\n     * Destroy Spritesheet and don't use after this.\n     * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    public destroy(destroyBase = false): void\n    {\n        for (const i in this.textures)\n        {\n            this.textures[i].destroy();\n        }\n        this._frames = null;\n        this._frameKeys = null;\n        this.data = null;\n        this.textures = null;\n        if (destroyBase)\n        {\n            this._texture?.destroy();\n            this.baseTexture.destroy();\n        }\n        this._texture = null;\n        this.baseTexture = null;\n        this.linkedSheets = [];\n    }\n}\n", "import { copySearchParams, LoaderParserPriority } from '@pixi/assets';\nimport { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { Spritesheet } from './Spritesheet';\n\nimport type { AssetExtension, Loader, ResolvedAsset, UnresolvedAsset } from '@pixi/assets';\nimport type { Texture } from '@pixi/core';\nimport type { ISpritesheetData } from './Spritesheet';\n\nexport interface SpriteSheetJson extends ISpritesheetData\n{\n    meta: {\n        image: string;\n        scale: string;\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n    };\n}\n\nconst validImages = ['jpg', 'png', 'jpeg', 'avif', 'webp'];\n\nfunction getCacheableAssets(keys: string[], asset: Spritesheet, ignoreMultiPack: boolean)\n{\n    const out: Record<string, any> = {};\n\n    keys.forEach((key: string) =>\n    {\n        out[key] = asset;\n    });\n\n    Object.keys(asset.textures).forEach((key) =>\n    {\n        out[key] = asset.textures[key];\n    });\n\n    if (!ignoreMultiPack)\n    {\n        const basePath = utils.path.dirname(keys[0]);\n\n        asset.linkedSheets.forEach((item: Spritesheet, i) =>\n        {\n            const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, true);\n\n            Object.assign(out, out2);\n        });\n    }\n\n    return out;\n}\n\n/**\n * Asset extension for loading spritesheets.\n * @memberof PIXI\n * @type {PIXI.AssetExtension}\n */\nexport const spritesheetAsset = {\n    extension: ExtensionType.Asset,\n    /** Handle the caching of the related Spritesheet Textures */\n    cache: {\n        test: (asset: Spritesheet) => asset instanceof Spritesheet,\n        getCacheableAssets: (keys: string[], asset: Spritesheet) => getCacheableAssets(keys, asset, false),\n    },\n    /** Resolve the the resolution of the asset. */\n    resolver: {\n        test: (value: string): boolean =>\n        {\n            const tempURL = value.split('?')[0];\n            const split = tempURL.split('.');\n            const extension = split.pop();\n            const format = split.pop();\n\n            return extension === 'json' && validImages.includes(format);\n        },\n        parse: (value: string): UnresolvedAsset =>\n        {\n            const split = value.split('.');\n\n            return {\n                resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                format: split[split.length - 2],\n                src: value,\n            };\n        },\n    },\n    /**\n     * Loader plugin that parses sprite sheets!\n     * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n     * If it is, we load the spritesheets image and parse the data into PIXI.Spritesheet\n     * All textures in the sprite sheet are then added to the cache\n     * @ignore\n     */\n    loader: {\n        name: 'spritesheetLoader',\n\n        extension: {\n            type: ExtensionType.LoadParser,\n            priority: LoaderParserPriority.Normal,\n        },\n\n        async testParse(asset: SpriteSheetJson, options: ResolvedAsset): Promise<boolean>\n        {\n            return (utils.path.extname(options.src).toLowerCase() === '.json' && !!asset.frames);\n        },\n\n        async parse(asset: SpriteSheetJson, options: ResolvedAsset, loader: Loader): Promise<Spritesheet>\n        {\n            let basePath = utils.path.dirname(options.src);\n\n            if (basePath && basePath.lastIndexOf('/') !== (basePath.length - 1))\n            {\n                basePath += '/';\n            }\n\n            let imagePath = basePath + asset.meta.image;\n\n            imagePath = copySearchParams(imagePath, options.src);\n\n            const assets = await loader.load<Texture>([imagePath]);\n            const texture = assets[imagePath];\n            const spritesheet = new Spritesheet(\n                texture.baseTexture,\n                asset,\n                options.src,\n            );\n\n            await spritesheet.parse();\n\n            // Check and add the multi atlas\n            // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n            // eslint-disable-next-line camelcase\n            const multiPacks = asset?.meta?.related_multi_packs;\n\n            if (Array.isArray(multiPacks))\n            {\n                const promises: Promise<Spritesheet<SpriteSheetJson>>[] = [];\n\n                for (const item of multiPacks)\n                {\n                    if (typeof item !== 'string')\n                    {\n                        continue;\n                    }\n\n                    let itemUrl = basePath + item;\n\n                    // Check if the file wasn't already added as multipack\n                    if (options.data?.ignoreMultiPack)\n                    {\n                        continue;\n                    }\n\n                    itemUrl = copySearchParams(itemUrl, options.src);\n\n                    promises.push(loader.load<Spritesheet<SpriteSheetJson>>({\n                        src: itemUrl,\n                        data: {\n                            ignoreMultiPack: true,\n                        }\n                    }));\n                }\n\n                const res = await Promise.all(promises);\n\n                spritesheet.linkedSheets = res;\n                res.forEach((item) =>\n                {\n                    item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => (sp !== item)));\n                });\n            }\n\n            return spritesheet;\n        },\n\n        unload(spritesheet: Spritesheet)\n        {\n            spritesheet.destroy(true);\n        },\n    },\n} as AssetExtension<Spritesheet | SpriteSheetJson>;\n\nextensions.add(spritesheetAsset);\n", "import { settings, utils } from '@pixi/core';\nimport { TextStyle } from '@pixi/text';\n\nimport type {\n    ITextStyle,\n    TextStyleFontStyle,\n    TextStyleFontWeight,\n    TextStyleLineJoin,\n    TextStyleTextBaseline\n} from '@pixi/text';\n\n/**\n * HTMLText support more white-space options.\n * @memberof PIXI\n * @since 7.2.0\n * @see PIXI.IHTMLTextStyle\n */\nexport type HTMLTextStyleWhiteSpace = 'normal' | 'pre' | 'pre-line' | 'nowrap' | 'pre-wrap';\n\n/**\n * FontFace display options.\n * @memberof PIXI\n * @since 7.3.0\n */\nexport type FontDisplay = 'auto' | 'block' | 'swap' | 'fallback' | 'optional';\n\n// Subset of ITextStyle\ntype ITextStyleIgnore = 'whiteSpace'\n| 'fillGradientStops'\n| 'fillGradientType'\n| 'miterLimit'\n| 'textBaseline'\n| 'trim'\n| 'leading'\n| 'lineJoin';\n\n/**\n * Modifed versions from ITextStyle.\n * @memberof PIXI\n * @extends PIXI.ITextStyle\n * @since 7.2.0\n */\nexport interface IHTMLTextStyle extends Omit<ITextStyle, ITextStyleIgnore>\n{\n    /** White-space with expanded options. */\n    whiteSpace: HTMLTextStyleWhiteSpace;\n}\n\nexport interface IHTMLTextFontOptions extends Pick<IHTMLFont, 'weight' | 'style' | 'family'>\n{\n    /** font-display property */\n    display: FontDisplay;\n}\n\n/**\n * Font information for HTMLText\n * @memberof PIXI\n * @since 7.2.0\n */\nexport interface IHTMLFont\n{\n    /** User-supplied URL request */\n    originalUrl: string;\n    /** Base64 string for font */\n    dataSrc: string;\n    /** FontFace installed in the document */\n    fontFace: FontFace | null;\n    /** Blob-based URL for font */\n    src: string;\n    /** Family name of font */\n    family: string;\n    /** Weight of the font */\n    weight: TextStyleFontWeight;\n    /** Style of the font */\n    style: TextStyleFontStyle;\n    /** Display property of the font */\n    display: FontDisplay;\n    /** Reference counter */\n    refs: number;\n}\n\n/**\n * Used internally to restrict text style usage and convert easily to CSS.\n * @class\n * @memberof PIXI\n * @param {PIXI.ITextStyle|PIXI.IHTMLTextStyle} [style] - Style to copy.\n * @since 7.2.0\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    /** The collection of installed fonts */\n    public static availableFonts: Record<string, IHTMLFont> = {};\n\n    /**\n     * List of default options, these are largely the same as TextStyle,\n     * with the exception of whiteSpace, which is set to 'normal' by default.\n     */\n    public static readonly defaultOptions: IHTMLTextStyle = {\n        /** Align */\n        align: 'left',\n        /** Break words */\n        breakWords: false,\n        /** Drop shadow */\n        dropShadow: false,\n        /** Drop shadow alpha */\n        dropShadowAlpha: 1,\n        /**\n         * Drop shadow angle\n         * @type {number}\n         * @default Math.PI / 6\n         */\n        dropShadowAngle: Math.PI / 6,\n        /** Drop shadow blur */\n        dropShadowBlur: 0,\n        /** Drop shadow color */\n        dropShadowColor: 'black',\n        /** Drop shadow distance */\n        dropShadowDistance: 5,\n        /** Fill */\n        fill: 'black',\n        /** Font family */\n        fontFamily: 'Arial',\n        /** Font size */\n        fontSize: 26,\n        /** Font style */\n        fontStyle: 'normal',\n        /** Font variant */\n        fontVariant: 'normal',\n        /** Font weight */\n        fontWeight: 'normal',\n        /** Letter spacing */\n        letterSpacing: 0,\n        /** Line height */\n        lineHeight: 0,\n        /** Padding */\n        padding: 0,\n        /** Stroke */\n        stroke: 'black',\n        /** Stroke thickness */\n        strokeThickness: 0,\n        /** White space */\n        whiteSpace: 'normal',\n        /** Word wrap */\n        wordWrap: false,\n        /** Word wrap width */\n        wordWrapWidth: 100,\n    };\n\n    /** For using custom fonts */\n    private _fonts: IHTMLFont[] = [];\n\n    /** List of internal style rules */\n    private _overrides: string[] = [];\n\n    /** Global rules or stylesheet, useful for creating rules for rendering */\n    private _stylesheet = '';\n\n    /** Track font changes internally */\n    private fontsDirty = false;\n\n    /**\n     * Convert a TextStyle to HTMLTextStyle\n     * @param originalStyle\n     * @example\n     * import {TextStyle } from 'pixi.js';\n     * import {HTMLTextStyle} from '@pixi/text-html';\n     * const style = new TextStyle();\n     * const htmlStyle = HTMLTextStyle.from(style);\n     */\n    static from(originalStyle: TextStyle | Partial<IHTMLTextStyle>): HTMLTextStyle\n    {\n        return new HTMLTextStyle(Object.keys(HTMLTextStyle.defaultOptions)\n            .reduce((obj, prop) => ({ ...obj, [prop]: originalStyle[prop as keyof IHTMLTextStyle] }), {})\n        );\n    }\n\n    /** Clear the current font */\n    public cleanFonts(): void\n    {\n        if (this._fonts.length > 0)\n        {\n            this._fonts.forEach((font) =>\n            {\n                URL.revokeObjectURL(font.src);\n                font.refs--;\n                if (font.refs === 0)\n                {\n                    if (font.fontFace)\n                    {\n                        document.fonts.delete(font.fontFace);\n                    }\n                    delete HTMLTextStyle.availableFonts[font.originalUrl];\n                }\n            });\n            this.fontFamily = 'Arial';\n            this._fonts.length = 0;\n            this.styleID++;\n            this.fontsDirty = true;\n        }\n    }\n\n    /**\n     * Because of how HTMLText renders, fonts need to be imported\n     * @param url\n     * @param options\n     */\n    public loadFont(url: string, options: Partial<IHTMLTextFontOptions> = {}): Promise<void>\n    {\n        const { availableFonts } = HTMLTextStyle;\n\n        // Font is already installed\n        if (availableFonts[url])\n        {\n            const font = availableFonts[url];\n\n            this._fonts.push(font);\n            font.refs++;\n            this.styleID++;\n            this.fontsDirty = true;\n\n            return Promise.resolve();\n        }\n\n        return settings.ADAPTER.fetch(url)\n            .then((response) => response.blob())\n            .then(async (blob) => new Promise<[string, string]>((resolve, reject) =>\n            {\n                const src = URL.createObjectURL(blob);\n                const reader = new FileReader();\n\n                reader.onload = () => resolve([src, reader.result as string]);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            }))\n            .then(async ([src, dataSrc]) =>\n            {\n                const font: IHTMLFont = Object.assign({\n                    family: utils.path.basename(url, utils.path.extname(url)),\n                    weight: 'normal',\n                    style: 'normal',\n                    display: 'auto',\n                    src,\n                    dataSrc,\n                    refs: 1,\n                    originalUrl: url,\n                    fontFace: null,\n                }, options);\n\n                availableFonts[url] = font;\n                this._fonts.push(font);\n                this.styleID++;\n\n                // Load it into the current DOM so we can properly measure it!\n                const fontFace = new FontFace(font.family, `url(${font.src})`, {\n                    weight: font.weight,\n                    style: font.style,\n                    display: font.display,\n                });\n\n                // Keep this reference so we can remove it later from document\n                font.fontFace = fontFace;\n\n                await fontFace.load();\n                document.fonts.add(fontFace);\n                await document.fonts.ready;\n\n                this.styleID++;\n                this.fontsDirty = true;\n            });\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this._overrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this._overrides.push(...toAdd);\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this._overrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this._overrides = this._overrides.filter((v) => !toRemove.includes(v));\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Internally converts all of the style properties into CSS equivalents.\n     * @param scale\n     * @returns The CSS style string, for setting `style` property of root HTMLElement.\n     */\n    public toCSS(scale: number): string\n    {\n        return [\n            `transform: scale(${scale})`,\n            `transform-origin: top left`,\n            'display: inline-block',\n            `color: ${this.normalizeColor(this.fill)}`,\n            `font-size: ${(this.fontSize as number)}px`,\n            `font-family: ${this.fontFamily}`,\n            `font-weight: ${this.fontWeight}`,\n            `font-style: ${this.fontStyle}`,\n            `font-variant: ${this.fontVariant}`,\n            `letter-spacing: ${this.letterSpacing}px`,\n            `text-align: ${this.align}`,\n            `padding: ${this.padding}px`,\n            `white-space: ${this.whiteSpace}`,\n            ...this.lineHeight ? [`line-height: ${this.lineHeight}px`] : [],\n            ...this.wordWrap ? [\n                `word-wrap: ${this.breakWords ? 'break-all' : 'break-word'}`,\n                `max-width: ${this.wordWrapWidth}px`\n            ] : [],\n            ...this.strokeThickness ? [\n                `-webkit-text-stroke-width: ${this.strokeThickness}px`,\n                `-webkit-text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n                `text-stroke-width: ${this.strokeThickness}px`,\n                `text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n                'paint-order: stroke',\n            ] : [],\n            ...this.dropShadow ? [this.dropShadowToCSS()] : [],\n            ...this._overrides,\n        ].join(';');\n    }\n\n    /** Get the font CSS styles from the loaded font, If available. */\n    public toGlobalCSS(): string\n    {\n        return this._fonts.reduce((result, font) => (\n            `${result}\n            @font-face {\n                font-family: \"${font.family}\";\n                src: url('${font.dataSrc}');\n                font-weight: ${font.weight};\n                font-style: ${font.style};\n                font-display: ${font.display};\n            }`\n        ), this._stylesheet);\n    }\n\n    /** Internal stylesheet contents, useful for creating rules for rendering */\n    public get stylesheet(): string\n    {\n        return this._stylesheet;\n    }\n    public set stylesheet(value: string)\n    {\n        if (this._stylesheet !== value)\n        {\n            this._stylesheet = value;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Convert numerical colors into hex-strings\n     * @param color\n     */\n    private normalizeColor(color: any): string\n    {\n        if (Array.isArray(color))\n        {\n            color = utils.rgb2hex(color);\n        }\n\n        if (typeof color === 'number')\n        {\n            return utils.hex2string(color);\n        }\n\n        return color;\n    }\n\n    /** Convert the internal drop-shadow settings to CSS text-shadow */\n    private dropShadowToCSS(): string\n    {\n        let color = this.normalizeColor(this.dropShadowColor);\n        const alpha = this.dropShadowAlpha;\n        const x = Math.round(Math.cos(this.dropShadowAngle) * this.dropShadowDistance);\n        const y = Math.round(Math.sin(this.dropShadowAngle) * this.dropShadowDistance);\n\n        // Append alpha to color\n        if (color.startsWith('#') && alpha < 1)\n        {\n            color += (alpha * 255 | 0).toString(16).padStart(2, '0');\n        }\n\n        const position = `${x}px ${y}px`;\n\n        if (this.dropShadowBlur > 0)\n        {\n            return `text-shadow: ${position} ${this.dropShadowBlur}px ${color}`;\n        }\n\n        return `text-shadow: ${position} ${color}`;\n    }\n\n    /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n    public reset(): void\n    {\n        Object.assign(this, HTMLTextStyle.defaultOptions);\n    }\n\n    /**\n     * Called after the image is loaded but before drawing to the canvas.\n     * Mostly used to handle Safari's font loading bug.\n     * @ignore\n     */\n    public onBeforeDraw()\n    {\n        const { fontsDirty: prevFontsDirty } = this;\n\n        this.fontsDirty = false;\n\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (this.isSafari && this._fonts.length > 0 && prevFontsDirty)\n        {\n            return new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Proving that Safari is the new IE\n     * @ignore\n     */\n    private get isSafari(): boolean\n    {\n        const { userAgent } = settings.ADAPTER.getNavigator();\n\n        return (/^((?!chrome|android).)*safari/i).test(userAgent);\n    }\n\n    override set fillGradientStops(_value: number[])\n    {\n        console.warn('[HTMLTextStyle] fillGradientStops is not supported by HTMLText');\n    }\n    override get fillGradientStops()\n    {\n        return super.fillGradientStops;\n    }\n\n    override set fillGradientType(_value: number)\n    {\n        console.warn('[HTMLTextStyle] fillGradientType is not supported by HTMLText');\n    }\n    override get fillGradientType()\n    {\n        return super.fillGradientType;\n    }\n\n    override set miterLimit(_value: number)\n    {\n        console.warn('[HTMLTextStyle] miterLimit is not supported by HTMLText');\n    }\n    override get miterLimit()\n    {\n        return super.miterLimit;\n    }\n\n    override set trim(_value: boolean)\n    {\n        console.warn('[HTMLTextStyle] trim is not supported by HTMLText');\n    }\n    override get trim()\n    {\n        return super.trim;\n    }\n\n    override set textBaseline(_value: TextStyleTextBaseline)\n    {\n        console.warn('[HTMLTextStyle] textBaseline is not supported by HTMLText');\n    }\n    override get textBaseline()\n    {\n        return super.textBaseline;\n    }\n\n    override set leading(_value: number)\n    {\n        console.warn('[HTMLTextStyle] leading is not supported by HTMLText');\n    }\n    override get leading()\n    {\n        return super.leading;\n    }\n\n    override set lineJoin(_value: TextStyleLineJoin)\n    {\n        console.warn('[HTMLTextStyle] lineJoin is not supported by HTMLText');\n    }\n    override get lineJoin()\n    {\n        return super.lineJoin;\n    }\n}\n", "import { Rectangle, settings, Texture, utils } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { TextStyle } from '@pixi/text';\nimport { HTMLTextStyle } from './HTMLTextStyle';\n\nimport type { ImageResource, IRenderer, ISize, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { ITextStyle } from '@pixi/text';\n\n/**\n * Alternative to {@link PIXI.Text|Text} but supports multi-style HTML text. There are\n * few key differences between this and {@link PIXI.Text|Text}:\n * <br>&bull; HTMLText not support {@link https://caniuse.com/mdn-svg_elements_foreignobject|Internet Explorer}.\n * <br>&bull; Rendering is text asynchronous. If statically rendering, listen to `update` event on BaseTexture.\n * <br>&bull; Does not support all style options (e.g., `lineJoin`, `leading`, `textBaseline`, `trim`, `miterLimit`,\n *   `fillGradientStops`, `fillGradientType`)\n * @example\n * import { HTMLText } from 'pixi.js';\n *\n * const text = new HTMLText(\"Hello <b>World</b>\", { fontSize: 20 });\n *\n * text.texture.baseTexture.on('update', () => {\n *   console.log('Text is redrawn!');\n * });\n * @class\n * @memberof PIXI\n * @extends PIXI.Sprite\n * @since 7.2.0\n */\nexport class HTMLText extends Sprite\n{\n    /**\n     * Default opens when destroying.\n     * @type {PIXI.IDestroyOptions}\n     * @property {boolean} [texture=true] - Whether to destroy the texture.\n     * @property {boolean} [children=false] - Whether to destroy the children.\n     * @property {boolean} [baseTexture=true] - Whether to destroy the base texture.\n     */\n    public static defaultDestroyOptions: IDestroyOptions = {\n        texture: true,\n        children: false,\n        baseTexture: true,\n    };\n\n    /** Default maxWidth, set at construction */\n    public static defaultMaxWidth = 2024;\n\n    /** Default maxHeight, set at construction */\n    public static defaultMaxHeight = 2024;\n\n    /** Default resolution, make sure autoResolution or defaultAutoResolution is `false`. */\n    public static defaultResolution: number | undefined;\n\n    /** Default autoResolution for all HTMLText objects */\n    public static defaultAutoResolution = true;\n\n    /** The maximum width in rendered pixels that the content can be, any larger will be hidden */\n    public maxWidth: number;\n\n    /** The maximum height in rendered pixels that the content can be, any larger will be hidden */\n    public maxHeight: number;\n\n    private _domElement: HTMLElement;\n    private _styleElement: HTMLElement;\n    private _svgRoot: SVGSVGElement;\n    private _foreignObject: SVGForeignObjectElement;\n    private _image: HTMLImageElement;\n    private _loadImage: HTMLImageElement;\n    private _resolution: number;\n    private _text: string | null = null;\n    private _style: HTMLTextStyle | null = null;\n    private _autoResolution = true;\n    private localStyleID = -1;\n    private dirty = false;\n    private _updateID = 0;\n\n    /** The HTMLTextStyle object is owned by this instance */\n    private ownsStyle = false;\n\n    /**\n     * @param {string} [text] - Text contents\n     * @param {PIXI.HTMLTextStyle|PIXI.TextStyle|PIXI.ITextStyle} [style] - Style setting to use.\n     *        Strongly recommend using an HTMLTextStyle object. Providing a PIXI.TextStyle\n     *        will convert the TextStyle to an HTMLTextStyle and will no longer be linked.\n     */\n    constructor(text = '', style: HTMLTextStyle | TextStyle | Partial<ITextStyle> = {})\n    {\n        super(Texture.EMPTY);\n\n        const image = new Image();\n        const texture = Texture.from<ImageResource>(image, {\n            scaleMode: settings.SCALE_MODE,\n            resourceOptions: {\n                autoLoad: false,\n            },\n        });\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        this.texture = texture;\n\n        const nssvg = 'http://www.w3.org/2000/svg';\n        const nsxhtml = 'http://www.w3.org/1999/xhtml';\n        const svgRoot = document.createElementNS(nssvg, 'svg');\n        const foreignObject = document.createElementNS(nssvg, 'foreignObject');\n        const domElement = document.createElementNS(nsxhtml, 'div');\n        const styleElement = document.createElementNS(nsxhtml, 'style');\n\n        // Arbitrary max size\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n        svgRoot.appendChild(foreignObject);\n\n        this.maxWidth = HTMLText.defaultMaxWidth;\n        this.maxHeight = HTMLText.defaultMaxHeight;\n        this._domElement = domElement;\n        this._styleElement = styleElement;\n        this._svgRoot = svgRoot;\n        this._foreignObject = foreignObject;\n        this._foreignObject.appendChild(styleElement);\n        this._foreignObject.appendChild(domElement);\n        this._image = image;\n        this._loadImage = new Image();\n        this._autoResolution = HTMLText.defaultAutoResolution;\n        this._resolution = HTMLText.defaultResolution ?? settings.RESOLUTION;\n        this.text = text;\n        this.style = style;\n    }\n\n    /**\n     * Calculate the size of the output text without actually drawing it.\n     * This includes the `padding` in the `style` object.\n     * This can be used as a fast-pass to do things like text-fitting.\n     * @param {object} [overrides] - Overrides for the text, style, and resolution.\n     * @param {string} [overrides.text] - The text to measure, if not specified, the current text is used.\n     * @param {PIXI.HTMLTextStyle} [overrides.style] - The style to measure, if not specified, the current style is used.\n     * @param {number} [overrides.resolution] - The resolution to measure, if not specified, the current resolution is used.\n     * @returns {PIXI.ISize} Width and height of the measured text.\n     */\n    measureText(overrides?: { text?: string, style?: HTMLTextStyle, resolution?: number }): ISize\n    {\n        const { text, style, resolution } = Object.assign({\n            text: this._text,\n            style: this._style,\n            resolution: this._resolution,\n        }, overrides);\n\n        Object.assign(this._domElement, {\n            innerHTML: text,\n            style: style.toCSS(resolution),\n        });\n        this._styleElement.textContent = style.toGlobalCSS();\n\n        // Measure the contents using the shadow DOM\n        document.body.appendChild(this._svgRoot);\n        const contentBounds = this._domElement.getBoundingClientRect();\n\n        this._svgRoot.remove();\n\n        const { width, height } = contentBounds;\n\n        if (process.env.DEBUG)\n        {\n            if (width > this.maxWidth || height > this.maxHeight)\n            {\n                console.warn('[HTMLText] Large expanse of text, increase HTMLText.maxWidth or HTMLText.maxHeight property.');\n            }\n        }\n\n        const contentWidth = Math.min(this.maxWidth, Math.ceil(width));\n        const contentHeight = Math.min(this.maxHeight, Math.ceil(height));\n\n        this._svgRoot.setAttribute('width', contentWidth.toString());\n        this._svgRoot.setAttribute('height', contentHeight.toString());\n\n        // Undo the changes to the DOM element\n        if (text !== this._text)\n        {\n            this._domElement.innerHTML = this._text as string;\n        }\n        if (style !== this._style)\n        {\n            Object.assign(this._domElement, { style: this._style?.toCSS(resolution) });\n            this._styleElement.textContent = this._style?.toGlobalCSS() as string;\n        }\n\n        return {\n            width: contentWidth + (style.padding * 2),\n            height: contentHeight + (style.padding * 2),\n        };\n    }\n\n    /**\n     * Manually refresh the text.\n     * @public\n     * @param {boolean} respectDirty - Whether to abort updating the\n     *        text if the Text isn't dirty and the function is called.\n     */\n    async updateText(respectDirty = true): Promise<void>\n    {\n        const { style, _image: image, _loadImage: loadImage } = this;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        const { width, height } = this.measureText();\n\n        // Make sure canvas is at least 1x1 so it drawable\n        // for sub-pixel sizes, round up to avoid clipping\n        // we update both images, to make sure bounds are correct synchronously\n        image.width = loadImage.width = Math.ceil((Math.max(1, width)));\n        image.height = loadImage.height = Math.ceil((Math.max(1, height)));\n\n        this._updateID++;\n\n        const updateID = this._updateID;\n\n        await new Promise<void>((resolve) =>\n        {\n            loadImage.onload = async () =>\n            {\n                if (updateID < this._updateID)\n                {\n                    resolve();\n\n                    return;\n                }\n\n                // Fake waiting for the image to load\n                await style.onBeforeDraw();\n\n                // Swap image and loadImage, we do this to avoid\n                // flashes between updateText calls, usually when\n                // the onload time is longer than updateText time\n                image.src = loadImage.src;\n                loadImage.onload = null;\n                loadImage.src = '';\n\n                // Force update the texture\n                this.updateTexture();\n                resolve();\n            };\n            const svgURL = new XMLSerializer().serializeToString(this._svgRoot);\n\n            loadImage.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(svgURL)}`;\n        });\n    }\n\n    /** The raw image element that is rendered under-the-hood. */\n    public get source(): HTMLImageElement\n    {\n        return this._image;\n    }\n\n    /**\n     * Update the texture resource.\n     * @private\n     */\n    updateTexture()\n    {\n        const { style, texture, _image: image, resolution } = this;\n        const { padding } = style;\n        const { baseTexture } = texture;\n\n        texture.trim.width = texture._frame.width = image.width / resolution;\n        texture.trim.height = texture._frame.height = image.height / resolution;\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(image.width, image.height, resolution);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param {PIXI.Renderer} renderer - The renderer\n     * @private\n     */\n    _render(renderer: Renderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Renders the object using the Canvas Renderer.\n     * @private\n     * @param {PIXI.CanvasRenderer} renderer - The renderer\n     */\n    _renderCanvas(renderer: IRenderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        super._renderCanvas(renderer);\n    }\n\n    /**\n     * Get the local bounds.\n     * @param {PIXI.Rectangle} rect - Input rectangle.\n     * @returns {PIXI.Rectangle} Local bounds\n     */\n    getLocalBounds(rect: Rectangle)\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds(rect);\n    }\n\n    _calculateBounds()\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        (this as any)._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Handle dirty style changes\n     * @private\n     */\n    _onStyleChange()\n    {\n        this.dirty = true;\n    }\n\n    /**\n     * Destroy this Text object. Don't use after calling.\n     * @param {boolean|object} options - Same as Sprite destroy options.\n     */\n    destroy(options?: boolean | IDestroyOptions | undefined)\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, HTMLText.defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        const forceClear: any = null;\n\n        // Remove any loaded fonts if we created the HTMLTextStyle\n        if (this.ownsStyle)\n        {\n            this._style?.cleanFonts();\n        }\n        this._style = forceClear;\n        this._svgRoot?.remove();\n        this._svgRoot = forceClear;\n        this._domElement?.remove();\n        this._domElement = forceClear;\n        this._foreignObject?.remove();\n        this._foreignObject = forceClear;\n        this._styleElement?.remove();\n        this._styleElement = forceClear;\n\n        this._loadImage.src = '';\n        this._loadImage.onload = null;\n        this._loadImage = forceClear;\n        this._image.src = '';\n        this._image = forceClear;\n    }\n\n    /**\n     * Get the width in pixels.\n     * @member {number}\n     */\n    get width()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._image.width / this.resolution;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._image.width / this.resolution;\n        this._width = value;\n    }\n\n    /**\n     * Get the height in pixels.\n     * @member {number}\n     */\n    get height()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._image.height / this.resolution;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._image.height / this.resolution;\n        this._height = value;\n    }\n\n    /** The base style to render with text. */\n    get style(): HTMLTextStyle\n    {\n        return this._style as HTMLTextStyle;\n    }\n\n    set style(style: HTMLTextStyle | TextStyle | Partial<ITextStyle>) // eslint-disable-line require-jsdoc\n    {\n        // Don't do anything if we're re-assigning\n        if (this._style === style)\n        {\n            return;\n        }\n\n        style = style || {};\n\n        if (style instanceof HTMLTextStyle)\n        {\n            this.ownsStyle = false;\n            this._style = style;\n        }\n        // Clone TextStyle\n        else if (style instanceof TextStyle)\n        {\n            console.warn('[HTMLText] Cloning TextStyle, if this is not what you want, use HTMLTextStyle');\n\n            this.ownsStyle = true;\n            this._style = HTMLTextStyle.from(style);\n        }\n        else\n        {\n            this.ownsStyle = true;\n            this._style = new HTMLTextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /**\n     * Contents of text. This can be HTML text and include tags.\n     * @example\n     * const text = new HTMLText('This is a <em>styled</em> text!');\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(text) // eslint-disable-line require-jsdoc\n    {\n        text = String(text === '' || text === null || text === undefined ? ' ' : text);\n        text = this.sanitiseText(text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number) // eslint-disable-line require-jsdoc\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n\n    /**\n     * Sanitise text - replace `<br>` with `<br/>`, `&nbsp;` with `&#160;`\n     * @param text\n     * @see https://www.sitepoint.com/community/t/xhtml-1-0-transitional-xml-parsing-error-entity-nbsp-not-defined/3392/3\n     */\n    private sanitiseText(text: string): string\n    {\n        return text\n            .replace(/<br>/gi, '<br/>')\n            .replace(/<hr>/gi, '<hr/>')\n            .replace(/&nbsp;/gi, '&#160;');\n    }\n}\n"],
  "mappings": "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IAAM,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,GACtE,IAAI,CAAC,IAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,GACtE,IAAI,CAAC,IAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,GACtE,IAAI,CAAC,IAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,GACtE,IAAI,CAAC,IAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,IAAK,EAAE,CAAC,GAG9E,IAAI,CAAC,IAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,GACtE,IAAI,CAAC,IAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,GACtE,IAAI,CAAC,IAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,GACtE,IAAI,CAAC,IAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,GACtE,IAAI,CAAC,IAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,CAAC,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,IAAM,EAAE,CAAC,IAAI,EAAE,EAAE,IAAK,EAAE,CAAC,GAG9E,IAAI,EAAE,IAAK,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,GAC3E,IAAI,EAAE,IAAK,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,GAC3E,IAAI,EAAE,IAAK,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,GAC3E,IAAI,EAAE,IAAK,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,GAC3E,IAAI,EAAE,IAAK,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,IAAK,EAAE,EAAE,GAGpF,IAAI,EAAE,IAAK,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,GAC3E,IAAI,EAAE,IAAK,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,GAC3E,IAAI,EAAE,IAAK,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,GAC3E,IAAI,EAAE,IAAK,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,GAC3E,IAAI,EAAE,IAAK,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,CAAC,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,IAAM,EAAE,EAAE,IAAI,EAAE,EAAE,IAAK,EAAE,EAAE,GAE7E;EACX;;;;;;EAOQ,aAAa,QACrB;AAEU,UAAA,IAAI,IAAI,aAAa,MAAM;AAEjC,WAAA,EAAE,CAAC,KAAK,KACR,EAAE,CAAC,KAAK,KACR,EAAE,EAAE,KAAK,KACT,EAAE,EAAE,KAAK,KAEF;EACX;;;;;;;EAQO,WAAW,GAAW,UAC7B;AACI,UAAM,SAAsB;MACxB;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;;;;EAUO,KAAK,OAAe,UAC3B;AACI,UAAM,CAAC,GAAG,GAAG,CAAC,IAAI,MAAM,OAAO,SAAS,KAAK,EAAE,QAAQ,GACjD,SAAsB;MACxB;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;;EAQO,UAAU,OAAe,UAChC;AACI,UAAM,SAAsB;MACxB;MAAO;MAAO;MAAO;MAAG;MACxB;MAAO;MAAO;MAAO;MAAG;MACxB;MAAO;MAAO;MAAO;MAAG;MACxB;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;EAkBO,cAAc,UACrB;AACI,UAAM,SAAsB;MACxB;MAAK;MAAK;MAAK;MAAG;MAClB;MAAK;MAAK;MAAK;MAAG;MAClB;MAAK;MAAK;MAAK;MAAG;MAClB;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;;EAQO,IAAI,UAAkB,UAC7B;AACgB,gBAAA,YAAY,KAAK,MAAM,KAAK;AAExC,UAAM,OAAO,KAAK,IAAI,QAAQ,GACxB,OAAO,KAAK,IAAI,QAAQ,GACxB,OAAO,KAAK,MAeZ,IAAI,IAAI,GACR,OAAO,KAAK,CAAC,GAEb,MAAM,QAAS,IAAM,QAAQ,GAC7B,MAAO,KAAK,IAAM,QAAU,OAAO,MACnC,MAAO,KAAK,IAAM,QAAU,OAAO,MAEnC,MAAO,KAAK,IAAM,QAAU,OAAO,MACnC,MAAM,OAAQ,KAAK,IAAM,OACzB,MAAO,KAAK,IAAM,QAAU,OAAO,MAEnC,MAAO,KAAK,IAAM,QAAU,OAAO,MACnC,MAAO,KAAK,IAAM,QAAU,OAAO,MACnC,MAAM,OAAQ,KAAK,IAAM,OAEzB,SAAsB;MACxB;MAAK;MAAK;MAAK;MAAG;MAClB;MAAK;MAAK;MAAK;MAAG;MAClB;MAAK;MAAK;MAAK;MAAG;MAClB;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;;;;EAUO,SAAS,QAAgB,UAChC;AACU,UAAA,KAAK,UAAU,KAAK,GACpB,IAAI,QAAQ,IAAI,IAEhB,SAAsB;MACxB;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;;;EASO,SAAS,SAAS,GAAG,UAC5B;AACU,UAAA,IAAK,SAAS,IAAI,IAAK,GACvB,KAAM,IAAI,KAAK,MAEf,SAAsB;MACxB;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;EAGO,aACP;AACI,SAAK,SAAS,EAAE;EACpB;;;;;;EAOO,SAAS,UAChB;AACI,UAAM,SAAsB;MACxB;MAAI;MAAG;MAAG;MAAG;MACb;MAAG;MAAI;MAAG;MAAG;MACb;MAAG;MAAG;MAAI;MAAG;MACb;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;EAOO,MAAM,UACb;AACI,UAAM,SAAsB;MACxB;MAAO;MAAW;MAAY;MAAG;MACjC;MAAO;MAAW;MAAY;MAAG;MACjC;MAAO;MAAW;MAAY;MAAG;MACjC;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;EAOO,YAAY,UACnB;AACI,UAAM,SAAsB;MACxB;MAAoB;MAAqB;MAAsB;MAAG;MAClE;MAAqB;MAAoB;MAAsB;MAAG;MAClE;MAAoB;MAAqB;MAAmB;MAAG;MAC/D;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;EAOO,SAAS,UAChB;AACI,UAAM,SAAsB;MACxB;MAAO;MAAQ;MAAQ;MAAG;MAC1B;MAAQ;MAAO;MAAQ;MAAG;MAC1B;MAAQ;MAAQ;MAAO;MAAG;MAC1B;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;EAOO,MAAM,UACb;AACI,UAAM,SAAsB;MACxB;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;EAOO,WAAW,UAClB;AACI,UAAM,SAAsB;MACxB;MAAoB;MAAqB;MAAsB;MAAG;MAClE;MAAsB;MAAoB;MAAsB;MAAG;MACnE;MAAsB;MAAqB;MAAoB;MAAG;MAClE;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;EAOO,OAAO,UACd;AACI,UAAM,SAAsB;MACxB;MAAoB;MAAqB;MAAqB;MAAG;MACjE;MAAuB;MAAoB;MAAqB;MAAG;MACnE;MAAqB;MAAsB;MAAqB;MAAG;MACnE;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;EAOO,QAAQ,UACf;AACI,UAAM,SAAsB;MACxB;MAAoB;MAAoB;MAAsB;MAAG;MACjE;MAAqB;MAAoB;MAAqB;MAAG;MACjE;MAAoB;MAAqB;MAAoB;MAAG;MAChE;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;;;;;EAWO,UAAU,cAAsB,OAAe,YAAoB,WAAmB,UAC7F;AACmB,mBAAA,gBAAgB,KAC/B,QAAQ,SAAS,MACjB,aAAa,cAAc,UAC3B,YAAY,aAAa;AAEnB,UAAA,OAAO,MAAM,QACb,CAAC,IAAI,IAAI,EAAE,IAAI,KAAK,SAAS,UAAU,EAAE,QACzC,GAAA,CAAC,IAAI,IAAI,EAAE,IAAI,KAAK,SAAS,SAAS,EAAE,QAAQ,GAEhD,SAAsB;MACxB;MAAK;MAAM;MAAM;MAAG;MACpB;MAAI;MAAI;MAAI;MAAc;MAC1B;MAAI;MAAI;MAAI;MAAO;MACnB,KAAK;MAAI,KAAK;MAAI,KAAK;MAAI;MAAG;IAAA;AAG7B,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;;EAQO,MAAM,WAAmB,UAChC;AACI,gBAAY,aAAa;AAEzB,UAAM,SAAsB;MACxB,YAAa;MAAO,CAAC;MAAW;MAAG;MAAG;MACtC,CAAC;MAAW;MAAG;MAAW;MAAG;MAC7B;MAAG;MAAW,YAAY;MAAK;MAAG;MAClC;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;;;;EAUO,SAAS,QAAgB,UAChC;AACI,UAAM,SAAsB;;MAExB,qBAAqB;MACrB,qBAAqB;MACrB,sBAAsB;MACtB,IAAI;MACJ,sBAAsB;;MAEtB,sBAAsB;MACtB,oBAAoB;MACpB,qBAAqB;MACrB,IAAI;MACJ,qBAAqB;;MAErB,sBAAsB;MACtB,sBAAsB;MACtB,oBAAoB;MACpB,IAAI;MACJ,qBAAqB;;MAErB;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;;;;;;;EASO,IAAI,UACX;AACI,UAAM,SAAsB;MACxB;MAAG;MAAM;MAAK;MAAG;MACjB;MAAM;MAAG;MAAM;MAAG;MAClB;MAAM;MAAM;MAAG;MAAG;MAClB;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,QAAQ;EACrC;;EAGO,QACP;AACI,UAAM,SAAsB;MACxB;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;MACZ;MAAG;MAAG;MAAG;MAAG;IAAA;AAGX,SAAA,YAAY,QAAQ,KAAK;EAClC;;;;;;EAOA,IAAI,SACJ;AACI,WAAO,KAAK,SAAS;EACzB;EAEA,IAAI,OAAO,OACX;AACI,SAAK,SAAS,IAAI;EACtB;;;;;;;;;EAUA,IAAI,QACJ;AACI,WAAO,KAAK,SAAS;EACzB;EAEA,IAAI,MAAM,OACV;AACI,SAAK,SAAS,SAAS;EAC3B;AACJ;AAGA,kBAAkB,UAAU,YAAY,kBAAkB,UAAU;;;;;;ACjlBpE,IAAIC,YAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAf,IAAI,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACqBN,IAAM,qBAAN,cAAiC,OACxC;;;;;EASI,YAAY,QAA2B,OACvC;AACU,UAAA,aAAa,IAAI,OAAA;AAEvB,WAAO,aAAa,OAEpB,MAAM,QAAQC,WAAU;MACpB,YAAY,OAAO;MACnB,cAAc;MACd,OAAO,EAAE,GAAG,GAAG,GAAG,EAAE;MACpB,UAAU,IAAI,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;IAAA,CAC1C,GAED,KAAK,aAAa,QAClB,KAAK,aAAa,YAEd,SAAU,SAEV,QAAQ,KAOZ,KAAK,QAAQ,IAAI,MAAM,OAAO,KAAK;EACvC;;;;;;;;EASO,MACH,eAA6B,OAAsB,QAAuB,WAE9E;AAES,SAAA,SAAS,eAAe,cAAc,sBAAsB,KAAK,YAAY,KAAK,UAAU,GACjG,KAAK,SAAS,MAAM,IAAI,KAAK,MAAM,GACnC,KAAK,SAAS,MAAM,IAAI,KAAK,MAAM;AAG7B,UAAA,KAAK,KAAK,WAAW,gBACrB,OAAO,KAAK,KAAM,GAAG,IAAI,GAAG,IAAM,GAAG,IAAI,GAAG,CAAE,GAC9C,OAAO,KAAK,KAAM,GAAG,IAAI,GAAG,IAAM,GAAG,IAAI,GAAG,CAAE;AAEhD,aAAS,KAAK,SAAS,MAEvB,KAAK,SAAS,SAAS,CAAC,IAAI,GAAG,IAAI,MACnC,KAAK,SAAS,SAAS,CAAC,IAAI,GAAG,IAAI,MACnC,KAAK,SAAS,SAAS,CAAC,IAAI,GAAG,IAAI,MACnC,KAAK,SAAS,SAAS,CAAC,IAAI,GAAG,IAAI,OAIvC,cAAc,YAAY,MAAM,OAAO,QAAQ,SAAS;EAC5D;;EAGA,IAAI,MACJ;AACI,WAAO,KAAK,SAAS;EACzB;EAEA,IAAI,IAAI,OACR;AACI,SAAK,SAAS,aAAa;EAC/B;AACJ;;;;;;ACtf,IAAIC,UAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACUN,IAAM,aAAN,cAAyB,OAChC;EACI,cACA;AAEI,UAAMC,SAAQC,SAAQ;EAC1B;AACJ;;;;;;ACjBA,IAAIC,YAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACUR,IAAM,cAAN,cAA0B,OACjC;;;;;EAKI,YAAY,QAAQ,KAAK,OAAO,KAAK,OAAA,GACrC;AACI,UAAM,qBAAqBC,WAAU;MACjC,QAAQ;MACR,OAAO;IAAA,CACV,GAED,KAAK,QAAQ,OACb,KAAK,OAAO;EAChB;;;;;EAMA,IAAI,QACJ;AACI,WAAO,KAAK,SAAS;EACzB;EAEA,IAAI,MAAM,OACV;AACI,SAAK,SAAS,SAAS;EAC3B;;EAGA,IAAI,OACJ;AACI,WAAO,KAAK,SAAS;EACzB;EAEA,IAAI,KAAK,OACT;AACI,SAAK,SAAS,QAAQ;EAC1B;AACJ;;;ACtCA,IAAM,UAAU;;;;;;;EAOZ;;;;;;;EAOA;;;;;;;EAOA;;;;;;;EAOA;;;;;;;EAOA;;;;;;;EAOA;;;;;;;EAOA;AACJ;AAEA,OAAO,QAAQ,OAAO,EAAE,QAAQ,CAAC,CAAC,KAAK,WAAW,MAClD;AACW,SAAA,eAAe,SAAS,KAAK;IAChC,MACA;AAEI,aAAA,YAAM,YAAY,SAAS,WAAW,GAAG,iBAAiB,GAAG,EAAE,GAGxD;IACX;EAAA,CACH;AACL,CAAC;;;;;;;;;;;ACjED,IAAM,oBAAN,MACA;EADA,cAAA;AAOI,SAAO,uBAAuB,IAE9B,KAAQ,aAAa,GACrB,KAAQ,WAAW,OACnB,KAAQ,cAAc,OACtB,KAAQ,eAAe;EAAA;;;;;EAMhB,KAAK,QACZ;AACI,SAAK,qBAAA,GACL,KAAK,SAAS,QACd,KAAK,uBAAuB,IAC5B,KAAK,aAAa,GAClB,KAAK,WAAW,OAChB,KAAK,cAAc,OACnB,KAAK,eAAe;EACxB;;EAGA,IAAI,cACJ;AACI,WAAO,KAAK;EAChB;EAEA,IAAI,YAAY,QAChB;AACI,SAAK,eAAe;EACxB;;EAGO,oBACP;AACQ,SAAK,eAAe,CAAC,KAAK,eAK9B,OAAO,OAAO,IAAI,KAAK,cAAc,MAAM,gBAAgB,WAAW,GAEtE,KAAK,cAAc;EACvB;;EAGO,uBACP;AACS,SAAK,gBAKV,OAAO,OAAO,OAAO,KAAK,cAAc,IAAI,GAE5C,KAAK,cAAc;EACvB;;EAGO,eACP;AACI,SAAK,WAAW;EACpB;;EAGQ,SACR;AACQ,QAAA,CAAC,KAAK,cAAc,KAAK;AAEzB;AAIJ,QAAI,KAAK,UACT;AACI,WAAK,WAAW;AAEhB;IACJ;AAGM,UAAA,mBAAmB,KAAK,OAAO;AAEjC,SAAK,OAAO,uBAAwB,iBAAkC,gBAAgB,WAK1F,WAAW,SAAS,cAAc,IAAI,aAAa,eAAe;MAC9D,SAAS,iBAAiB;MAC1B,SAAS,iBAAiB;IAC7B,CAAA,CAAC;EACN;;;;;;;;EASQ,aAAa,WACrB;AACI,SAAK,cAAc,WAEf,EAAK,KAAA,aAAa,KAAK,0BAK3B,KAAK,aAAa,GAElB,KAAK,OAAO;EAChB;AACJ;AAUa,IAAA,eAAe,IAAI,kBAAkB;;;;;;;AC/G3C,IAAM,iBAAN,MAAM,gBACb;;;;;EAsGI,YAAY,SACZ;AArGA,SAAO,UAAU,MAGjB,KAAO,eAAe,MAMtB,KAAgB,aAAa,OAO7B,KAAgB,WAAW,OAM3B,KAAO,mBAAmB,OAMnB,KAAA,aAAa,gBAAe,UAAU,MA2B7C,KAAO,qBAAqB,OAG5B,KAAO,gCAAgC,OAqBhC,KAAA,QAAe,IAAI,MAAA,GASnB,KAAA,OAAc,IAAI,MAAA,GAgGzB,KAAS,OAAO,GAChB,KAAS,kBAAkB,GAC3B,KAAS,YAAY,GACrB,KAAS,iBAAiB,GArFtB,KAAK,UAAU;EACnB;;EArBA,IAAI,SAAiB;AAAE,WAAO,KAAK,MAAM;EAAG;;EAG5C,IAAI,SAAiB;AAAE,WAAO,KAAK,MAAM;EAAG;;EAM5C,IAAI,QAAgB;AAAE,WAAO,KAAK,KAAK;EAAG;;EAG1C,IAAI,QAAgB;AAAE,WAAO,KAAK,KAAK;EAAG;;;;;EAe1C,IAAI,OACJ;AACW,WAAA;EACX;;EAGA,eACA;AAGQ,WAAA,KAAK,YAAY,CAAC,KAAK,QAAQ,KAAK,KAAK,KAAK,KAAK,SAAS,CAAC,MAAM,KAAK,YAExE,KAAK,OAAO,KAAK,SAAS,KAAK,QAAQ,gBAAgB,KAAK,MAAM,IAAI,CAAC,IAGpE,KAAK;EAChB;;;;;;;;EASA,UAAU,OAAe,UAAoB,aAC7C;AACU,UAAA,IAAI,MAAM,qFAAqF;EACzG;;;;;;;;;;EAWA,YAAY,UAAkB,aAAuB,gBAA0B,UAC3E,YACJ;AACU,UAAA,IAAI,MAAM,uFAAuF;EAC3G;;EAGA,iBACA;AACQ,SAAK,uBAAuB,SAAS,KAAK,YAAY,cAEtD,KAAK,YAAY,eAGrB,GAAA,KAAK,mBAAmB;EAC5B;;;;;;EAOA,2BACA;AACI,SAAK,gCAAgC;EACzC;;;;;EAMA,kBACA;AACI,SAAK,qBAAqB;EAC9B;AAMJ;;;ACrNO,IAAM,sBAAN,cAAkC,eAGzC;EAHO,cAAA;AAAA,UAAA,GAAA,SAAA,GA0BI,KAAA,SAAgB,IAAI,MAAA,GAwBpB,KAAA,WAAkB,IAAI,MAAA,GAYtB,KAAA,SAAgB,IAAI,MAAA,GASpB,KAAA,SAAgB,IAAI,MAAA,GAYpB,KAAA,SAAgB,IAAI,MAAA;EAAM;;EAtDjC,IAAW,UAAkB;AAAE,WAAO,KAAK,OAAO;EAAG;;EAGrD,IAAW,UAAkB;AAAE,WAAO,KAAK,OAAO;EAAG;;;;;EAMrD,IAAI,IAAY;AAAE,WAAO,KAAK;EAAS;;;;;EAMvC,IAAI,IAAY;AAAE,WAAO,KAAK;EAAS;;EASvC,IAAI,YAAoB;AAAE,WAAO,KAAK,SAAS;EAAG;;EAGlD,IAAI,YAAoB;AAAE,WAAO,KAAK,SAAS;EAAG;;EASlD,IAAI,UAAkB;AAAE,WAAO,KAAK,OAAO;EAAG;;EAG9C,IAAI,UAAkB;AAAE,WAAO,KAAK,OAAO;EAAG;;EAM9C,IAAI,UAAkB;AAAE,WAAO,KAAK,OAAO;EAAG;;EAG9C,IAAI,UAAkB;AAAE,WAAO,KAAK,OAAO;EAAG;;;;;EAY9C,IAAI,UAAkB;AAAE,WAAO,KAAK,OAAO;EAAG;;;;;EAM9C,IAAI,UAAkB;AAAE,WAAO,KAAK,OAAO;EAAG;;;;;;;;;;;;EAavC,iBAA+C,eAA8B,OAAW,WAC/F;AACI,WAAO,cAAc,eAAe,aAAgB,aAAa,KAAK,QAAQ,KAAK;EACvF;;;;;EAMA,iBAAiB,KACjB;AACI,WAAO,sBAAsB,KAAK,eAAe,KAAK,YAAY,iBAAiB,GAAG;EAC1F;;;;;;;;;;;;;;;;;;;;;EAsBA,eACI,UACA,eACA,gBACA,UACA,YACA,aACA,aACA,aACA,aACA,aACA,YACA,cACA,aACA,YACA,mBAEJ;AACU,UAAA,IAAI,MAAM,yBAAyB;EAC7C;AACJ;;;ACvKO,IAAM,wBAAN,cAAoC,oBAC3C;EADO,cAAA;AAAA,UAAA,GAAA,SAAA,GAaH,KAAO,QAAQ,GAOf,KAAO,SAAS,GAMhB,KAAO,YAAY;EAAA;;EA4CnB,qBACA;AACI,WAAI,KAAK,SAAS,iBAAiB,KAAK,SAAS,eAAe,KAAK,SAAS,cAEnE,CAAC,IAAI,IAGT,CAAA;EACX;;EAGA,qBACA;AACU,UAAA,IAAI,MAAM,sCAAsC;EAC1D;AACJ;;;ACrFO,IAAM,sBAAN,cAAkC,oBACzC;EADO,cAAA;AAAA,UAAA,GAAA,SAAA,GAqBH,KAAS,kBAAkB,GAM3B,KAAS,iBAAiB,GAM1B,KAAS,iBAAiB;EAAA;AAC9B;AAlCa,oBAkBO,kBAAkB;AAlBzB,oBAwBO,iBAAiB;AAxBxB,oBA8BO,iBAAiB;;;ACpBrC,IAAM,oBAAoB;AAA1B,IAEM,kBAAkB,IAAI,MAAA;AAF5B,IAGM,mBAAmB,IAAI,MAAA;AA0DtB,IAAM,gBAAN,MACP;;;;EAsEI,YAAY,YACZ;AAtDO,SAAA,WAA+B,IAAI,YAAM,aAAa,GAW7D,KAAO,YAAY,OAGnB,KAAO,yBAAyB,MAkBhC,KAAU,eAAoC;MAC1C,cAAc,CAAC;IAAA,GAQT,KAAA,YAAA,oBAA8D,IAAA,GAGxE,KAAQ,0BAAkD,CAAA,GAE1D,KAAQ,eAAuC,CAAA,GAE/C,KAAQ,sBAAsB,OAOrB,KAAA,aAAa,YAElB,KAAK,aAAa,KAAK,WAAW,KAAK,IAAI,GAC3C,KAAK,YAAY,KAAK,UAAU,KAAK,IAAI,GACzC,KAAK,iBAAiB,KAAK,eAAe,KAAK,IAAI,GACnD,KAAK,iBAAiB,KAAK,eAAe,KAAK,IAAI,GACnD,KAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI,GACjD,KAAK,iBAAiB,KAAK,eAAe,KAAK,IAAI,GACnD,KAAK,eAAe,KAAK,aAAa,KAAK,IAAI,GAC/C,KAAK,sBAAsB,KAAK,oBAAoB,KAAK,IAAI,GAC7D,KAAK,WAAW,KAAK,SAAS,KAAK,IAAI,GAEvC,KAAK,eAAe,CAAA,GACpB,KAAK,gBAAgB,eAAe,KAAK,cAAc,GACvD,KAAK,gBAAgB,eAAe,KAAK,cAAc,GACvD,KAAK,gBAAgB,cAAc,KAAK,aAAa,GACrD,KAAK,gBAAgB,gBAAgB,KAAK,aAAa,GACvD,KAAK,gBAAgB,eAAe,KAAK,cAAc,GACvD,KAAK,gBAAgB,aAAa,KAAK,YAAY,GACnD,KAAK,gBAAgB,oBAAoB,KAAK,mBAAmB,GACjE,KAAK,gBAAgB,SAAS,KAAK,QAAQ;EAC/C;;;;;;;;;;;;;EAcO,gBAAgB,MAAc,IACrC;AACS,SAAK,aAAa,IAAI,MAEvB,KAAK,aAAa,IAAI,IAAI,CAAA,IAG9B,KAAK,aAAa,IAAI,EAAE,KAAK;MACzB;MACA,UAAU;IACb,CAAA,GACD,KAAK,aAAa,IAAI,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,WAAW,EAAE,QAAQ;EAClE;;;;;;EAOO,cAAc,GAAmB,MACxC;AACI,MAAE,qBAAqB,OACvB,EAAE,gCAAgC,OAElC,KAAK,UAAU,GAAG,IAAI,GACtB,KAAK,SAAS,KAAK,QAAQ,EAAE,MAAM,CAAC;EACxC;;;;;EAMO,SAAS,GAChB;AACI,QAAI,CAAC,KAAK;AAEN;AAGJ,UAAM,UAAU,KAAK,aAAa,EAAE,IAAI;AAEpC,QAAA;AAEA,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,IAAI,GAAG;AAE/B,gBAAA,CAAC,EAAE,GAAG,CAAC;;AAKnB,cAAQ,KAAK,kDAAkD,EAAE,IAAI,EAAE;EAE/E;;;;;;;;EASO,QACH,GACA,GAEJ;AACI,iBAAa,cAAc;AAGrB,UAAA,KADU,KAAK,uBAAuB,KAAK,yBAC5B,yBAAyB,oBACxC,eAAe,KAAK,EAAE;MACxB,KAAK;MACL,KAAK,WAAW;MAChB,gBAAgB,IAAI,GAAG,CAAC;MACxB,KAAK;MACL,KAAK;IAAA;AAGF,WAAA,gBAAgB,aAAa,CAAC;EACzC;;;;;;;EAQO,UAAU,GAAmB,MACpC;AACI,QAAI,CAAC,EAAE;AAGH;AAGE,UAAA,eAAe,EAAE,aAAA;AAGvB,MAAE,aAAa,EAAE;AAEjB,aAAS,IAAI,GAAG,IAAI,aAAa,SAAS,GAAG,IAAI,GAAG;AAMhD,UAJA,EAAE,gBAAgB,aAAa,CAAC,GAEhC,KAAK,aAAa,GAAG,IAAI,GAErB,EAAE,sBAAsB,EAAE;AAA+B;AASjE,QALA,EAAE,aAAa,EAAE,WACjB,EAAE,gBAAgB,EAAE,QAEpB,KAAK,aAAa,GAAG,IAAI,GAErB,EAAE,EAAA,sBAAsB,EAAE,gCAG9B;AAAA,QAAE,aAAa,EAAE;AAEjB,eAAS,IAAI,aAAa,SAAS,GAAG,KAAK,GAAG;AAM1C,YAJA,EAAE,gBAAgB,aAAa,CAAC,GAEhC,KAAK,aAAa,GAAG,IAAI,GAErB,EAAE,sBAAsB,EAAE;AAA+B;IAAA;EAErE;;;;;;;;;EAUO,IAAI,GAAmB,MAA0B,UAAU,KAAK,yBACvE;AACI,QAAI,QAAQ,WAAW;AAAG;AAE1B,MAAE,aAAa,EAAE;AAEjB,UAAM,SAAS,MAAM,QAAQ,IAAI,IAAI,OAAO,CAAC,IAAI;AAIjD,aAAS,IAAI,QAAQ,SAAS,GAAG,KAAK,GAAG;AAE9B,aAAA,QAAQ,CAAC,UAChB;AACI,UAAE,gBAAgB,QAAQ,CAAC,GAC3B,KAAK,aAAa,GAAG,KAAK;MAAA,CAC7B;EAET;;;;;;EAOO,gBAAgB,QACvB;AACU,UAAA,kBAAkB,CAAC,MAAM;AAE/B,aAAS,IAAI,GAAG,IAAI,qBAAqB,WAAW,KAAK,YAAY,KACrE;AACI,UAAI,CAAC,OAAO;AAEF,cAAA,IAAI,MAAM,qDAAqD;AAGzE,sBAAgB,KAAK,OAAO,MAAM,GAElC,SAAS,OAAO;IACpB;AAEA,WAAA,gBAAgB,QAET,GAAA;EACX;EAEU,qBACN,eACA,WACA,UACA,QACA,SACA,SAAS,OAEb;AACI,QAAI,eAAe;AAGf,QAAA,KAAK,kBAAkB,aAAa;AAAU,aAAA;AAE9C,SAAA,cAAc,cAAc,aAAa,cAAc,eAEvD,aAAa,cAAc,QAG3B,cAAc,uBAAuB,cAAc,UACvD;AACI,YAAM,WAAW,cAAc;AAE/B,eAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAC1C;AACI,cAAM,QAAQ,SAAS,CAAC,GAElB,YAAY,KAAK;UACnB;UACA,KAAK,eAAe,SAAS,IAAI,YAAY,MAAM;UACnD;UACA;UACA;UACA,UAAU,QAAQ,eAAe,QAAQ;QAAA;AAG7C,YAAI,WACJ;AAGQ,cAAA,UAAU,SAAS,KAAK,CAAC,UAAU,UAAU,SAAS,CAAC,EAAE;AAEzD;AAME,gBAAA,gBAAgB,cAAc,cAAA;AAEhC,WAAA,UAAU,SAAS,KAAK,mBAEpB,iBAAe,KAAK,wBAAwB,KAAK,aAAa,GAClE,UAAU,KAAK,aAAa,IAI5B,KAAK,aAAa,WAAW,MAAG,KAAK,eAAe,YAExD,eAAe;QACnB;MACJ;IACJ;AAEA,UAAM,oBAAoB,KAAK,eAAe,SAAS,GACjD,sBAAsB,cAAc,cAAA;AAM1C,WAJI,qBAAqB,uBAAqB,KAAK,wBAAwB,KAAK,aAAa,GAIzF,UAAU,KAAK,aAAa,SAAS,IAAU,OAE/C,eAAqB,KAAK,eAG1B,qBAAsB,CAAC,QAAQ,eAAe,QAAQ,KAAK,OAAO,eAAe,QAAQ,IAIlF,sBAAsB,CAAC,aAAa,IAAI,CAAA,IAG5C;EACX;;;;;;;;;;;;;;;EAgBU,iBACN,eACA,WACA,UACA,QACA,SAEJ;AAEI,QAAI,KAAK,kBAAkB,aAAa,KAAK,QAAQ,eAAe,QAAQ;AAEjE,aAAA;AAGP,SAAA,cAAc,cAAc,aAAa,cAAc,eAEvD,aAAa,cAAc,QAI3B,cAAc,uBAAuB,cAAc,UACvD;AACI,YAAM,WAAW,cAAc;AAE/B,eAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAC1C;AACI,cAAM,QAAQ,SAAS,CAAC,GAElB,YAAY,KAAK;UACnB;UACA,KAAK,eAAe,SAAS,IAAI,YAAY,MAAM;UACnD;UACA;UACA;QAAA;AAGJ,YAAI,WACJ;AAGQ,cAAA,UAAU,SAAS,KAAK,CAAC,UAAU,UAAU,SAAS,CAAC,EAAE;AAEzD;AAME,gBAAA,gBAAgB,cAAc,cAAA;AAEpC,kBAAI,UAAU,SAAS,KAAK,kBAAe,UAAU,KAAK,aAAa,GAEhE;QACX;MACJ;IACJ;AAEA,UAAM,oBAAoB,KAAK,eAAe,SAAS,GACjD,sBAAsB,cAAc,cAAA;AAGtC,WAAA,qBAAqB,OAAO,eAAe,QAAQ,IAI5C,sBAAsB,CAAC,aAAa,IAAI,CAG5C,IAAA;EACX;EAEQ,eAAe,KACvB;AACW,WAAA,QAAQ,YAAY,QAAQ;EACvC;EAEQ,kBAAkB,eAC1B;AAoBI,WAlBI,CAAA,EAAA,CAAC,iBAAiB,cAAc,UAAU,CAAC,cAAc,WAAW,CAAC,cAAc,cAMnF,cAAc,cAAc,UAM5B,cAAc,cAAc,aAAa,CAAC,cAAc,uBAMxD,cAAc;EAMtB;;;;;;;;;EAUU,WAAW,eAA8B,UACnD;;AACI,QAAI,cAAc,YAEd,cAAc,eAAe,aAAa,UAAU,gBAAgB,GAEhE,CAAC,cAAc,QAAQ,SAAS,iBAAiB,GAAG,iBAAiB,CAAC;AAE/D,aAAA;AAIf,QAAI,cAAc,OAClB;AACI,YAAM,aAAe,cAAc,MAAc,aAC1C,cAAc,MAAc,aAAa,cAAc;AAE9D,UAAI,cAAc,GAAC,gBAAW,kBAAX,oCAA2B;AAEnC,eAAA;IAEf;AAEO,WAAA;EACX;;;;;;;EAQU,UAAU,eAA8B,UAClD;AAEI,WAAI,cAAc,cAAc,YAErB,QAIP,cAAc,UAEP,OAGN,cAAsB,gBAEf,cAAsB,cAAc,QAAQ,IAKjD;EACX;;;;;;;;;EAUU,aAAa,GAAmB,MAC1C;;AACI,WAAO,QAAQ,EAAE;AAGX,UAAA,aAAa,KAAK,IAAI;AAE3B,kBAAE,eAAc,gBAAhB,4BAAwE;AAEnE,UAAA,MAAM,EAAE,eAAe,EAAE,mBAAmB,EAAE,eAAe,EAAE,YAAY,GAAG,IAAI,YAAY;AAE/F,SAAA,gBAAgB,GAAG,GAAG,GAEvB,EAAE,eAAe,EAAE,aAEnB,KAAK,gBAAgB,GAAG,IAAI;EAEpC;;;;;;;EAQU,eAAe,MACzB;AACQ,QAAA,EAAE,gBAAgB,wBACtB;AACI,cAAQ,KAAK,iEAAiE;AAE9E;IACJ;AAEM,UAAA,IAAI,KAAK,mBAAmB,IAAI;AAItC,QAFA,KAAK,cAAc,GAAG,aAAa,GAE/B,EAAE,gBAAgB;AAEb,WAAA,cAAc,GAAG,YAAY;aAE7B,EAAE,gBAAgB,WAAW,EAAE,gBAAgB,OACxD;AACU,YAAA,gBAAgB,EAAE,WAAW;AAEnC,WAAK,cAAc,GAAG,gBAAgB,cAAc,WAAW;IACnE;AAEA,UAAM,eAAe,KAAK,aAAa,KAAK,SAAS;AAExC,iBAAA,qBAAqB,KAAK,MAAM,IAAI,EAAE,aAAa,GAEhE,KAAK,UAAU,CAAC;EACpB;;;;;;;;EASU,eAAe,MACzB;;AACQ,QAAA,EAAE,gBAAgB,wBACtB;AACI,cAAQ,KAAK,iEAAiE;AAE9E;IACJ;AAEK,SAAA,wBAAwB,SAAS,GACtC,KAAK,aAAa,SAAS,GAC3B,KAAK,sBAAsB;AACrB,UAAA,IAAI,KAAK,mBAAmB,IAAI;AAEtC,SAAK,sBAAsB;AAC3B,UAAM,UAAU,EAAE,gBAAgB,WAAW,EAAE,gBAAgB,OACzD,eAAe,KAAK,aAAa,KAAK,SAAS,GAC/C,YAAY,KAAK,kBAAkB,aAAa,WAAW;AAGjE,UAAI,kBAAa,gBAAb,mBAA0B,UAAS,KAAK,cAAc,EAAE,QAC5D;AAEU,YAAA,UAAU,KAAK,SAAS,cAAc,aAAa,cACnD,WAAW,KAAK,mBAAmB,MAAM,SAAS,SAAS;AAOjE,UALA,KAAK,cAAc,UAAU,YAAY,GACrC,WAAS,KAAK,cAAc,UAAU,UAAU,GAIhD,CAAC,EAAE,aAAA,EAAe,SAAS,SAAS,GACxC;AACI,cAAM,aAAa,KAAK,mBAAmB,MAAM,gBAAgB,SAAS;AAI1E,aAFA,WAAW,aAAa,WAAW,WAE5B,WAAW,UAAU,CAAC,EAAE,aAAa,EAAE,SAAS,WAAW,MAAM;AAEpE,qBAAW,gBAAgB,WAAW,QAEtC,KAAK,aAAa,UAAU,GACxB,WAAS,KAAK,aAAa,YAAY,YAAY,GAEvD,WAAW,SAAS,WAAW,OAAO;AAG1C,aAAK,UAAU,UAAU;MAC7B;AAEA,WAAK,UAAU,QAAQ;IAC3B;AAGI,QAAA,cAAc,EAAE,QACpB;AAEU,YAAA,WAAW,KAAK,SAAS,cAAc,cAAc,eACrD,YAAY,KAAK,kBAAkB,GAAG,QAAQ;AAE/C,WAAA,cAAc,WAAW,aAAa,GACvC,WAAS,KAAK,cAAc,WAAW,WAAW;AAGtD,UAAI,qBAAqB,uCAAW;AAEpC,aAAO,sBAAsB,uBAAuB,KAAK,WAAW,UAE5D,uBAAuB,EAAE;AAE7B,6BAAqB,mBAAmB;AAO5C,UAFwB,CAAC,sBAAsB,uBAAuB,KAAK,WAAW,QAGtF;AACI,cAAM,aAAa,KAAK,kBAAkB,GAAG,cAAc;AAI3D,aAFA,WAAW,aAAa,WAAW,WAE5B,WAAW,UACP,WAAW,WAAW,aACtB,WAAW,WAAW,KAAK,WAAW;AAE7C,qBAAW,gBAAgB,WAAW,QAEtC,KAAK,aAAa,UAAU,GACxB,WAAS,KAAK,aAAa,YAAY,YAAY,GAEvD,WAAW,SAAS,WAAW,OAAO;AAG1C,aAAK,UAAU,UAAU;MAC7B;AAEA,WAAK,UAAU,SAAS;IAC5B;AAEA,UAAM,aAAuB,CAAA,GACvB,2BAA2B,KAAK,0BAA0B;AAGhE,SAAK,YAAY,WAAW,KAAK,aAAa,IAAI,KAAK,cAAc,GAAG,aAAa,GACrF,4BAA4B,WAAW,KAAK,mBAAmB,GAG3D,EAAE,gBAAgB,YAElB,KAAK,YAAY,WAAW,OAAO,GAAG,GAAG,WAAW,IAAI,KAAK,cAAc,GAAG,WAAW,GACzF,4BAA4B,WAAW,KAAK,iBAAiB,IAG7D,YAEA,KAAK,YAAY,WAAW,OAAO,GAAG,GAAG,WAAW,IAAI,KAAK,cAAc,GAAG,WAAW,GACzF,4BAA4B,WAAW,KAAK,iBAAiB,GAC7D,KAAK,UAAS,OAAE,WAAF,mBAAU,SAGxB,WAAW,SAAS,KAEpB,KAAK,IAAI,GAAG,UAAU,GAE1B,KAAK,wBAAwB,SAAS,GACtC,KAAK,aAAa,SAAS,GAG3B,aAAa,cAAc,EAAE,aAAA,GAE7B,KAAK,UAAU,CAAC;EACpB;;;;;;;EAQU,eAAe,MACzB;;AACQ,QAAA,EAAE,gBAAgB,wBACtB;AACI,cAAQ,KAAK,iEAAiE;AAE9E;IACJ;AAEA,UAAM,eAAe,KAAK,aAAa,KAAK,SAAS,GAC/C,IAAI,KAAK,mBAAmB,IAAI,GAChC,UAAU,EAAE,gBAAgB,WAAW,EAAE,gBAAgB;AAE/D,SAAK,cAAc,GAAG,aAAa,GAC/B,WAAS,KAAK,cAAc,GAAG,WAAW,GAC1C,EAAE,gBAAgB,YAAS,KAAK,UAAS,OAAE,WAAF,mBAAU;AAGvD,UAAM,aAAa,KAAK,kBAAkB,GAAG,cAAc;AAE3D,SAAA,WAAW,aAAa,WAAW,WAE5B,WAAW,UAAU,WAAW,WAAW,KAAK,WAAW;AAE9D,iBAAW,gBAAgB,WAAW,QAEtC,KAAK,aAAa,UAAU,GACxB,WAAS,KAAK,aAAa,YAAY,YAAY,GAEvD,WAAW,SAAS,WAAW,OAAO;AAG7B,iBAAA,cAAc,EAAE,aAE7B,GAAA,KAAK,UAAU,CAAC,GAChB,KAAK,UAAU,UAAU;EAC7B;;;;;;;EAQU,cAAc,MACxB;AACQ,QAAA,EAAE,gBAAgB,wBACtB;AACI,cAAQ,KAAK,iEAAiE;AAE9E;IACJ;AAEA,UAAM,eAAe,KAAK,aAAa,KAAK,SAAS;AAErD,QAAI,aAAa,aACjB;AACI,YAAM,UAAU,KAAK,gBAAgB,WAAW,KAAK,gBAAgB,OAC/D,YAAY,KAAK,kBAAkB,aAAa,WAAW,GAG3D,WAAW,KAAK,mBAAmB,MAAM,cAAc,SAAS;AAEtE,WAAK,cAAc,QAAQ,GACvB,WAAS,KAAK,cAAc,UAAU,UAAU;AAIpD,YAAM,aAAa,KAAK,mBAAmB,MAAM,gBAAgB,SAAS;AAE1E,WAAA,WAAW,aAAa,WAAW,WAE5B,WAAW,UAAU,WAAW,WAAW,KAAK,WAAW;AAE9D,mBAAW,gBAAgB,WAAW,QAEtC,KAAK,aAAa,UAAU,GACxB,WAAS,KAAK,aAAa,YAAY,YAAY,GAEvD,WAAW,SAAS,WAAW,OAAO;AAG7B,mBAAA,cAAc,MAE3B,KAAK,UAAU,QAAQ,GACvB,KAAK,UAAU,UAAU;IAC7B;AAEA,SAAK,SAAS;EAClB;;;;;;;;;;;EAYU,aAAa,MACvB;AACQ,QAAA,EAAE,gBAAgB,wBACtB;AACI,cAAQ,KAAK,iEAAiE;AAE9E;IACJ;AAEA,UAAM,MAAM,YAAY,IAAA,GAClB,IAAI,KAAK,mBAAmB,IAAI;AAItC,QAFA,KAAK,cAAc,GAAG,WAAW,GAE7B,EAAE,gBAAgB;AAEb,WAAA,cAAc,GAAG,UAAU;aAE3B,EAAE,gBAAgB,WAAW,EAAE,gBAAgB,OACxD;AACU,YAAA,gBAAgB,EAAE,WAAW;AAEnC,WAAK,cAAc,GAAG,gBAAgB,YAAY,SAAS;IAC/D;AAEA,UAAM,eAAe,KAAK,aAAa,KAAK,SAAS,GAC/C,cAAc,KAAK,kBAAkB,aAAa,qBAAqB,KAAK,MAAM,CAAC;AAEzF,QAAI,cAAc;AAIlB,QAAI,eAAe,CAAC,EAAE,aAAA,EAAe,SAAS,WAAW,GACzD;AACI,UAAI,gBAAgB;AAEpB,aAAO,iBAAiB,CAAC,EAAE,aAAA,EAAe,SAAS,aAAa,KAChE;AACI,YAAA,EAAE,gBAAgB,eAElB,KAAK,aAAa,GAAG,kBAAkB,GAEnC,EAAE,gBAAgB;AAEb,eAAA,aAAa,GAAG,iBAAiB;iBAEjC,EAAE,gBAAgB,WAAW,EAAE,gBAAgB,OACxD;AACU,gBAAA,gBAAgB,EAAE,WAAW;AAEnC,eAAK,aAAa,GAAG,gBAAgB,mBAAmB,gBAAgB;QAC5E;AAEA,wBAAgB,cAAc;MAClC;AAEA,aAAO,aAAa,qBAAqB,KAAK,MAAM,GAIpD,cAAc;IAClB;AAGA,QAAI,aACJ;AACI,YAAM,aAAa,KAAK,kBAAkB,GAAG,OAAO;AAEpD,iBAAW,SAAS,aACpB,WAAW,OAAO,MAEb,aAAa,eAAe,KAAK,MAAM,MAExC,aAAa,eAAe,KAAK,MAAM,IAAI;QACvC,YAAY;QACZ,QAAQ,WAAW;QACnB,WAAW;MAAA;AAInB,YAAM,eAAe,aAAa,eAAe,KAAK,MAAM;AAExD,UAAA,aAAa,WAAW,WAAW,UAChC,MAAM,aAAa,YAAY,MAElC,EAAE,aAAa,aAIf,aAAa,aAAa,GAG9B,aAAa,SAAS,WAAW,QACjC,aAAa,YAAY,KAEzB,WAAW,SAAS,aAAa,YAE7B,WAAW,gBAAgB,SAC/B;AACU,cAAA,gBAAgB,WAAW,WAAW;AAE5C,aAAK,cAAc,YAAY,gBAAgB,eAAe,OAAO;MACzE;AACS,mBAAW,gBAAgB,WAEhC,KAAK,cAAc,YAAY,KAAK;AAGxC,WAAK,cAAc,YAAY,YAAY,GAE3C,KAAK,UAAU,UAAU;IAC7B;AAEA,SAAK,UAAU,CAAC;EACpB;;;;;;;;;;;;EAaU,oBAAoB,MAC9B;AACQ,QAAA,EAAE,gBAAgB,wBACtB;AACI,cAAQ,KAAK,iEAAiE;AAE9E;IACJ;AAEA,UAAM,eAAe,KAAK,aAAa,KAAK,SAAS,GAC/C,cAAc,KAAK,kBAAkB,aAAa,qBAAqB,KAAK,MAAM,CAAC,GACnF,IAAI,KAAK,mBAAmB,IAAI;AAEtC,QAAI,aACJ;AACI,UAAI,gBAAgB;AAEb,aAAA;AAEH,UAAE,gBAAgB,eAElB,KAAK,aAAa,GAAG,kBAAkB,GAEnC,EAAE,gBAAgB,UAElB,KAAK,aAAa,GAAG,iBAAiB,KAEjC,EAAE,gBAAgB,WAAW,EAAE,gBAAgB,UAEpD,KAAK,aAAa,GAAG,EAAE,WAAW,IAAI,mBAAmB,gBAAgB,GAG7E,gBAAgB,cAAc;AAG3B,aAAA,aAAa,qBAAqB,KAAK,MAAM;IACxD;AAEA,SAAK,UAAU,CAAC;EACpB;;;;;EAMU,SAAS,MACnB;AACQ,QAAA,EAAE,gBAAgB,sBACtB;AACI,cAAQ,KAAK,6DAA6D;AAE1E;IACJ;AAEM,UAAA,aAAa,KAAK,iBAAiB,IAAI;AAE7C,SAAK,cAAc,UAAU,GAC7B,KAAK,UAAU,UAAU;EAC7B;;;;;;;;;EAUU,kBAAkB,iBAC5B;AACI,QAAI,CAAC;AAEM,aAAA;AAGP,QAAA,gBAAgB,gBAAgB,CAAC;AAE5B,aAAA,IAAI,GAAG,IAAI,gBAAgB,UAI5B,gBAAgB,CAAC,EAAE,WAAW,eAJM;AAMpC,sBAAgB,gBAAgB,CAAC;AAQlC,WAAA;EACX;;;;;;;;;EAUU,mBACN,MACA,MACA,QAEJ;AACU,UAAA,QAAQ,KAAK,cAAc,qBAAqB;AAEtD,WAAA,KAAK,gBAAgB,MAAM,KAAK,GAChC,KAAK,cAAc,MAAM,KAAK,GAC9B,KAAK,SAAS,MAAM,KAAK,GAEzB,MAAM,cAAc,KAAK,aACzB,MAAM,gBAAgB,MACtB,MAAM,SAAS,UACR,KAAK,QAAQ,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,KAC3C,KAAK,aAAa,CAAC,GAEtB,OAAO,QAAS,aAEhB,MAAM,OAAO,OAGV;EACX;;;;;;;EAQU,iBAAiB,MAC3B;AACU,UAAA,QAAQ,KAAK,cAAc,mBAAmB;AAEpD,WAAA,KAAK,cAAc,MAAM,KAAK,GAC9B,KAAK,cAAc,MAAM,KAAK,GAC9B,KAAK,SAAS,MAAM,KAAK,GAEzB,MAAM,cAAc,KAAK,aACzB,MAAM,gBAAgB,MACtB,MAAM,SAAS,KAAK,QAAQ,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAEnD;EACX;;;;;;;;EASU,kBAAkB,MAA6B,MACzD;AACU,UAAA,QAAQ,KAAK,cAAc,qBAAqB;AAEtD,WAAA,MAAM,cAAc,KAAK,aACzB,MAAM,gBAAgB,KAAK,eAE3B,KAAK,gBAAgB,MAAM,KAAK,GAChC,KAAK,cAAc,MAAM,KAAK,GAC9B,KAAK,SAAS,MAAM,KAAK,GAGzB,MAAM,SAAS,KAAK,QACpB,MAAM,OAAO,KAAK,aAAA,EAAe,MAAM,GACvC,MAAM,OAAO,QAAQ,MAAM,MAEpB;EACX;;;;;;;;;;;;EAaU,cAAc,MAA2B,IACnD;AACI,OAAG,YAAY,KAAK,WACpB,GAAG,SAAS,KAAK,QACjB,GAAG,SAAS,KAAK,QACjB,GAAG,SAAS,KAAK;EACrB;;;;;;;;;;;;;;;;;EAkBU,gBAAgB,MAAsB,IAChD;AACU,oBAAgB,yBAAyB,cAAc,0BAE7D,GAAG,YAAY,KAAK,WACpB,GAAG,QAAQ,KAAK,OAChB,GAAG,SAAS,KAAK,QACjB,GAAG,YAAY,KAAK,WACpB,GAAG,cAAc,KAAK,aACtB,GAAG,WAAW,KAAK,UACnB,GAAG,qBAAqB,KAAK,oBAC7B,GAAG,QAAQ,KAAK,OAChB,GAAG,QAAQ,KAAK,OAChB,GAAG,QAAQ,KAAK;EACpB;;;;;;;;;;;;;;;;;;;;;;;EAwBU,cAAc,MAAsB,IAC9C;AACU,oBAAgB,uBAAuB,cAAc,wBAE3D,GAAG,SAAS,KAAK,QACjB,GAAG,SAAS,KAAK,QACjB,GAAG,UAAU,KAAK,SAClB,GAAG,OAAO,SAAS,KAAK,MAAM,GAC9B,GAAG,UAAU,KAAK,SAClB,GAAG,UAAU,KAAK,SAClB,GAAG,SAAS,SAAS,KAAK,QAAQ,GAClC,GAAG,OAAO,SAAS,KAAK,MAAM,GAC9B,GAAG,WAAW,KAAK,UACnB,GAAG,OAAO,SAAS,KAAK,MAAM;EAClC;;;;;;;;;;;;EAaU,SAAS,MAAsB,IACzC;AACI,OAAG,YAAY,KAAK,WACpB,GAAG,aAAa,KAAK,YACrB,GAAG,YAAY,YAAY,IAC3B,GAAA,GAAG,OAAO,KAAK,MACf,GAAG,SAAS,KAAK,QACjB,GAAG,OAAO,KAAK,MACf,GAAG,QAAQ,KAAK,OAChB,GAAG,MAAM,SAAS,KAAK,KAAK,GAC5B,GAAG,KAAK,SAAS,KAAK,IAAI;EAC9B;;;;;;EAOU,aAAa,IACvB;AACS,WAAA,KAAK,aAAa,aAAa,EAAE,MAElC,KAAK,aAAa,aAAa,EAAE,IAAI;MACjC,sBAAsB,CAAC;MACvB,gBAAgB,CAAC;MACjB,YAAY;IAIb,IAAA,KAAK,aAAa,aAAa,EAAE;EAC5C;;;;;;;;EASU,cACN,aAEJ;AACS,SAAK,UAAU,IAAI,WAAkB,KAEtC,KAAK,UAAU,IAAI,aAAoB,CAAA,CAAE;AAGvC,UAAA,QAAQ,KAAK,UAAU,IAAI,WAAkB,EAAE,IAAA,KAC9C,IAAI,YAAY,IAAI;AAErB,WAAA,MAAA,aAAa,MAAM,MACzB,MAAM,gBAAgB,MACtB,MAAM,OAAO,MACb,MAAM,SAAS,MAER;EACX;;;;;;;;;;;;EAaU,UAAoC,OAC9C;AACI,QAAI,MAAM,YAAY;AAAY,YAAA,IAAI,MAAM,mEAAmE;AAE/G,UAAM,cAAc,MAAM;AAErB,SAAK,UAAU,IAAI,WAAkB,KAEtC,KAAK,UAAU,IAAI,aAAoB,CAAA,CAAE,GAG7C,KAAK,UAAU,IAAI,WAAkB,EAAE,KAAK,KAAK;EACrD;;;;;;;EAQQ,gBAAgB,GAAmB,MAC3C;AACI,UAAM,YAAc,EAAE,cAAsB,QAA6B,IAAI;AAExE,QAAA,aACA,EAAE,cAAc,cAAc;AAEnC,UAAI,QAAQ;AAEJ,kBAAU,QAAM,EAAE,cAAc,eAAe,MAAM,UAAU,IAAI,QAAW,IAAI,GACtF,UAAU,GAAG,KAAK,UAAU,SAAS,CAAC;;AAK9B,iBAAA,IAAI,GAAG,IAAI,UAAU,QACzB,IAAI,KAAK,CAAC,EAAE,+BACZ;AAEI,oBAAU,CAAC,EAAE,QAAM,EAAE,cAAc,eAAe,MAAM,UAAU,CAAC,EAAE,IAAI,QAAW,IAAI,GAC5F,UAAU,CAAC,EAAE,GAAG,KAAK,UAAU,CAAC,EAAE,SAAS,CAAC;EAGxD;AACJ;;;;AC/6CA,IAAM,mBAAmB;AAAzB,IACM,mBAA2C;EAC7C,YAAY;EACZ,UAAU;EACV,iBAAiB;EACjB,WAAW;EACX,aAAa;AACjB;AAPA,IA+Ea,eAAN,MAAMC,cACb;;;;EA+GI,YAAY,UACZ;AA9DA,SAAgB,sBAAsB,kBAAkB,YAGxC,KAAA,wBAAwB,CAAC,CAAC,WAAW,cAuBrD,KAAO,aAA0B,MAGjC,KAAO,aAAa,GAkChB,KAAK,WAAW,UAChB,KAAK,eAAe,IAAI,cAAc,IAAI,GAC1C,aAAa,KAAK,IAAI,GAEtB,KAAK,qBAAqB,MAC1B,KAAK,cAAc,OAEnB,KAAK,mBAAmB,IAAI,sBAAsB,IAAI,GACtD,KAAK,iBAAiB,IAAI,oBAAoB,IAAI,GAElD,KAAK,eAAe;MAChB,SAAS;MACT,SAAS;IAAA,GAGb,KAAK,WAAW,IAAI,MAAM,EAAE,GAAGA,cAAY,qBAAA,GAAwB;MAC/D,KAAK,CAAC,QAAQ,KAAK,WAEX,QAAQ,iBAER,KAAK,aAAa,yBAAyB,QAE/C,OAAO,GAAgC,IAAI,OAEpC;IAAA,CAEd,GAED,KAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI,GACjD,KAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI,GACjD,KAAK,cAAc,KAAK,YAAY,KAAK,IAAI,GAC7C,KAAK,mBAAmB,KAAK,iBAAiB,KAAK,IAAI,GACvD,KAAK,UAAU,KAAK,QAAQ,KAAK,IAAI;EACzC;;;;;;;;EAlHA,WAAkB,mBAClB;AACI,WAAO,KAAK;EAChB;;;;;EAqHA,KAAK,SACL;AACI,UAAM,EAAE,MAAM,WAAA,IAAe,KAAK;AAE7B,SAAA,iBAAiB,IAAyB,GAC/C,KAAK,aAAa,YAClBA,cAAY,oBAAoB,QAAQ,aAAa,QACrD,OAAO,OAAO,KAAK,UAAU,QAAQ,iBAAiB,CAAE,CAAA,GACxD,KAAK,aAAa,yBAAyB,KAAK,SAAS;EAC7D;;;;;EAMA,iBAAiB,YACjB;AACI,SAAK,aAAa;EACtB;;EAGA,UACA;AACI,SAAK,iBAAiB,IAAI,GAC1B,KAAK,WAAW;EACpB;;;;;EAMO,UAAU,MACjB;AACI,WAAO,QAAQ;AACf,QAAI,cAAc;AAId,QAAA,WAAW,mBAAmB,KAAK,sBAAsB,oBAEzD,cAAc,QAGd,KAAK,kBAAkB;AAEvB;AAEJ,SAAK,gBAAgB;AACf,UAAA,QAAQ,KAAK,aAAa,IAAI;AAGhC,QAAA;AAEA,cAAQ,OAAO,OACf;QACI,KAAK;AAEG,0BAEA,KAAK,WAAW,MAAM,SAAS;AAEnC;QACJ,KAAK;AAED,gBAAM,IAAI;AACV;QACJ,KAAK;AAGG,yBAEA,OAAO,OAAO,KAAK,WAAW,OAAO,KAAK;AAE9C;MACR;;AAEK,qBAAe,OAAO,QAAS,YAAY,CAAC,OAAO,UAAU,eAAe,KAAK,KAAK,cAAc,IAAI,MAI7G,KAAK,WAAW,MAAM,SAAS;EAEvC;;;;;;EAOA,IAAW,UACX;AACI,WAAO,KAAK;EAChB;;;;;EAMQ,cAAc,aACtB;AACQ,QAAA,CAAC,KAAK,SAAS;AAAO;AACrB,SAAA,aAAa,aAAa,KAAK,SAAS;AAEvC,UAAA,SAAS,KAAK,uBAAuB,WAAW;AAUlD,SAAK,sBAAuB,OAAO,CAAC,EAAU,iBAE3B,YAAY,cAAc,EAAE,gBAAgB,iBAI3D,YAAY,eAAe;AAInC,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAI,GAAG,KAC1C;AACUC,YAAAA,eAAc,OAAO,CAAC,GACtB,iBAAiB,KAAK,eAAe,KAAK,kBAAkBA,YAAW;AAExE,WAAA,aAAa,SAAS,cAAc;IAC7C;AAEK,SAAA,UAAU,KAAK,aAAa,MAAM;EAC3C;;;;;EAMQ,cAAc,aACtB;AACQ,QAAA,CAAC,KAAK,SAAS;AAAM;AACzB,SAAK,aAAa,aAAa,KAAK,SAAS,oBAE7C,aAAa,aAAA;AAEP,UAAA,mBAAmB,KAAK,uBAAuB,WAAW;AAEhE,aAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,IAAI,GAAG,KACpD;AACI,YAAM,QAAQ,KAAK,eAAe,KAAK,kBAAkB,iBAAiB,CAAC,CAAC;AAEvE,WAAA,aAAa,SAAS,KAAK;IACpC;AAEK,SAAA,UAAU,KAAK,aAAa,MAAM;EAC3C;;;;;EAMQ,YAAY,aACpB;AACQ,QAAA,CAAC,KAAK,SAAS;AAAO;AACrB,SAAA,aAAa,aAAa,KAAK,SAAS;AAE7C,QAAI,SAAS,YAAY;AAGrB,gBAAY,gBAAgB,YAAY,aAAa,EAAE,SAAS,MAEhE,SAAS,YAAY,aAAA,EAAe,CAAC;AAGnC,UAAA,UAAU,WAAW,KAAK,aAAa,YAAY,IACnD,mBAAmB,KAAK,uBAAuB,WAAW;AAEhE,aAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,IAAI,GAAG,KACpD;AACI,YAAM,QAAQ,KAAK,eAAe,KAAK,kBAAkB,iBAAiB,CAAC,CAAC;AAE5E,YAAM,QAAQ,SAEd,KAAK,aAAa,SAAS,KAAK;IACpC;AAEK,SAAA,UAAU,KAAK,aAAa,MAAM;EAC3C;;;;;EAMQ,iBAAiB,aACzB;AACQ,QAAA,CAAC,KAAK,SAAS;AAAO;AACrB,SAAA,aAAa,aAAa,KAAK,SAAS;AAEvC,UAAA,mBAAmB,KAAK,uBAAuB,WAAW;AAEhE,aAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,IAAI,GAAG,KACpD;AACI,YAAM,QAAQ,KAAK,eAAe,KAAK,kBAAkB,iBAAiB,CAAC,CAAC;AAEvE,WAAA,aAAa,SAAS,KAAK;IACpC;AAEK,SAAA,UAAU,KAAK,aAAa,MAAM;EAC3C;;;;;EAMU,QAAQ,aAClB;AACQ,QAAA,CAAC,KAAK,SAAS;AAAO;AACpB,UAAA,aAAa,KAAK,oBAAoB,WAAW;AAElD,SAAA,aAAa,aAAa,KAAK,SAAS,oBAC7C,KAAK,aAAa,SAAS,UAAU;EACzC;;;;;;;EAQO,iBAAiB,SACxB;AACS,SAAA,aAAA,GACL,KAAK,aAAa,SAClB,aAAa,aAAa,SAC1B,KAAK,UAAU;EACnB;;EAGQ,YACR;AACQ,QAAA,KAAK,eAAe,CAAC,KAAK;AAE1B;AAGJ,iBAAa,kBAAkB;AAEzB,UAAA,QAAQ,KAAK,WAAW;AAE1B,cAEK,WAAW,UAAkB,oBAE9B,MAAM,mBAAmB,QACzB,MAAM,gBAAgB,UAEjB,KAAK,0BAEV,MAAM,cAAc,UAQxB,KAAK,yBAEL,WAAW,SAAS,iBAAiB,eAAe,KAAK,eAAe,IAAI,GAC5E,KAAK,WAAW,iBAAiB,eAAe,KAAK,eAAe,IAAI,GAIxE,KAAK,WAAW,iBAAiB,gBAAgB,KAAK,kBAAkB,IAAI,GAC5E,KAAK,WAAW,iBAAiB,eAAe,KAAK,kBAAkB,IAAI,GAE3E,WAAW,iBAAiB,aAAa,KAAK,aAAa,IAAI,MAI/D,WAAW,SAAS,iBAAiB,aAAa,KAAK,eAAe,IAAI,GAC1E,KAAK,WAAW,iBAAiB,aAAa,KAAK,eAAe,IAAI,GACtE,KAAK,WAAW,iBAAiB,YAAY,KAAK,kBAAkB,IAAI,GACxE,KAAK,WAAW,iBAAiB,aAAa,KAAK,kBAAkB,IAAI,GACzE,WAAW,iBAAiB,WAAW,KAAK,aAAa,IAAI,GAEzD,KAAK,wBAEL,KAAK,WAAW,iBAAiB,cAAc,KAAK,eAAe,IAAI,GAEvE,KAAK,WAAW,iBAAiB,YAAY,KAAK,aAAa,IAAI,GACnE,KAAK,WAAW,iBAAiB,aAAa,KAAK,eAAe,IAAI,KAI9E,KAAK,WAAW,iBAAiB,SAAS,KAAK,SAAS;MACpD,SAAS;MACT,SAAS;IACZ,CAAA,GAED,KAAK,cAAc;EACvB;;EAGQ,eACR;AACI,QAAI,CAAC,KAAK,eAAe,CAAC,KAAK;AAE3B;AAGJ,iBAAa,qBAAqB;AAE5B,UAAA,QAAQ,KAAK,WAAW;AAEzB,eAAW,UAAkB,oBAE9B,MAAM,mBAAmB,IACzB,MAAM,gBAAgB,MAEjB,KAAK,0BAEV,MAAM,cAAc,KAGpB,KAAK,yBAEL,WAAW,SAAS,oBAAoB,eAAe,KAAK,eAAe,IAAI,GAC/E,KAAK,WAAW,oBAAoB,eAAe,KAAK,eAAe,IAAI,GAC3E,KAAK,WAAW,oBAAoB,gBAAgB,KAAK,kBAAkB,IAAI,GAC/E,KAAK,WAAW,oBAAoB,eAAe,KAAK,kBAAkB,IAAI,GAE9E,WAAW,oBAAoB,aAAa,KAAK,aAAa,IAAI,MAIlE,WAAW,SAAS,oBAAoB,aAAa,KAAK,eAAe,IAAI,GAC7E,KAAK,WAAW,oBAAoB,aAAa,KAAK,eAAe,IAAI,GACzE,KAAK,WAAW,oBAAoB,YAAY,KAAK,kBAAkB,IAAI,GAC3E,KAAK,WAAW,oBAAoB,aAAa,KAAK,kBAAkB,IAAI,GAC5E,WAAW,oBAAoB,WAAW,KAAK,aAAa,IAAI,GAE5D,KAAK,wBAEL,KAAK,WAAW,oBAAoB,cAAc,KAAK,eAAe,IAAI,GAE1E,KAAK,WAAW,oBAAoB,YAAY,KAAK,aAAa,IAAI,GACtE,KAAK,WAAW,oBAAoB,aAAa,KAAK,eAAe,IAAI,KAIjF,KAAK,WAAW,oBAAoB,SAAS,KAAK,SAAS,IAAI,GAE/D,KAAK,aAAa,MAClB,KAAK,cAAc;EACvB;;;;;;;;;EAUO,mBAAmB,OAAmB,GAAW,GACxD;AACI,UAAM,OAAO,KAAK,WAAW,cACvB,KAAK,WAAW,sBAAA,IAChB;MACE,GAAG;MACH,GAAG;MACH,OAAQ,KAAK,WAAmB;MAChC,QAAS,KAAK,WAAmB;MACjC,MAAM;MACN,KAAK;IACT,GAEE,uBAAuB,IAAM,KAAK;AAExC,UAAM,KAAM,IAAI,KAAK,SAAU,KAAK,WAAmB,QAAQ,KAAK,SAAU,sBAC9E,MAAM,KAAM,IAAI,KAAK,QAAS,KAAK,WAAmB,SAAS,KAAK,UAAW;EACnF;;;;;;;EAQQ,uBAAuB,OAC/B;AACI,UAAM,mBAAmB,CAAA;AAErB,QAAA,KAAK,uBAAuB,iBAAiB;AAEpC,eAAA,IAAI,GAAG,KAAK,MAAM,eAAe,QAAQ,IAAI,IAAI,KAC1D;AACU,cAAA,QAAQ,MAAM,eAAe,CAAC;AAEhC,eAAO,MAAM,SAAW,QAAa,MAAM,SAAS,IACpD,OAAO,MAAM,UAAY,QAAa,MAAM,UAAU,IACtD,OAAO,MAAM,YAAc,QAE3B,MAAM,YAAY,MAAM,QAAQ,WAAW,KAAK,MAAM,SAAS,eAE/D,OAAO,MAAM,QAAU,QAAa,MAAM,QAAQ,MAAM,WAAW,IACnE,OAAO,MAAM,SAAW,QAAa,MAAM,SAAS,MAAM,WAAW,IACrE,OAAO,MAAM,QAAU,QAAa,MAAM,QAAQ,IAClD,OAAO,MAAM,QAAU,QAAa,MAAM,QAAQ,IAClD,OAAO,MAAM,cAAgB,QAAa,MAAM,cAAc,UAC9D,OAAO,MAAM,YAAc,QAAa,MAAM,YAAY,MAAM,cAAc,IAC9E,OAAO,MAAM,WAAa,QAAa,MAAM,WAAW,MAAM,SAAS,MACvE,OAAO,MAAM,QAAU,QAAa,MAAM,QAAQ,IAClD,OAAO,MAAM,qBAAuB,QAAa,MAAM,qBAAqB,IAK5E,OAAO,MAAM,SAAW,QAAa,MAAM,SAAS,MAAM,UAAU,MAAM,UAC1E,OAAO,MAAM,SAAW,QAAa,MAAM,SAAS,MAAM,UAAU,MAAM,UAG9E,MAAM,eAAe,MACrB,MAAM,OAAO,MAAM,MAEnB,iBAAiB,KAAK,KAAK;MAC/B;aAGK,CAAC,WAAW,cACb,iBAAiB,eAAe,CAAC,KAAK,yBAAyB,EAAE,iBAAiB,WAAW,gBACrG;AACI,YAAM,YAAY;AAEd,aAAO,UAAU,YAAc,QAAa,UAAU,YAAY,OAClE,OAAO,UAAU,QAAU,QAAa,UAAU,QAAQ,IAC1D,OAAO,UAAU,SAAW,QAAa,UAAU,SAAS,IAC5D,OAAO,UAAU,QAAU,QAAa,UAAU,QAAQ,IAC1D,OAAO,UAAU,QAAU,QAAa,UAAU,QAAQ,IAC1D,OAAO,UAAU,cAAgB,QAAa,UAAU,cAAc,UACtE,OAAO,UAAU,YAAc,QAAa,UAAU,YAAY,mBAClE,OAAO,UAAU,WAAa,QAAa,UAAU,WAAW,MAChE,OAAO,UAAU,QAAU,QAAa,UAAU,QAAQ,IAC1D,OAAO,UAAU,qBAAuB,QAAa,UAAU,qBAAqB,IAGxF,UAAU,eAAe,MAEzB,iBAAiB,KAAK,SAAS;IACnC;AAGI,uBAAiB,KAAK,KAAK;AAGxB,WAAA;EACX;;;;;;;;;EAUU,oBAAoB,aAC9B;AACI,UAAM,QAAQ,KAAK;AAEd,WAAA,KAAA,kBAAkB,OAAO,WAAW,GASzC,MAAM,SAAS,YAAY,QAC3B,MAAM,SAAS,YAAY,QAC3B,MAAM,SAAS,YAAY,QAC3B,MAAM,YAAY,YAAY,WAE9B,KAAK,mBAAmB,MAAM,QAAQ,YAAY,SAAS,YAAY,OAAO,GAC9E,MAAM,OAAO,SAAS,MAAM,MAAM,GAClC,MAAM,OAAO,SAAS,MAAM,MAAM,GAElC,MAAM,cAAc,aACpB,MAAM,OAAO,YAAY,MAElB;EACX;;;;;;EAOQ,eAAe,OAA8B,aACrD;AACU,WAAA,MAAA,gBAAgB,MACtB,MAAM,cAAc,aAEpB,MAAM,YAAY,YAAY,WAC9B,MAAM,QAAQ,YAAY,OAC1B,MAAM,SAAS,YAAY,QAC3B,MAAM,YAAY,YAAY,WAC9B,MAAM,cAAc,YAAY,aAChC,MAAM,WAAW,YAAY,UAC7B,MAAM,qBAAqB,YAAY,oBACvC,MAAM,QAAQ,YAAY,OAC1B,MAAM,QAAQ,YAAY,OAC1B,MAAM,QAAQ,YAAY,OAC1B,KAAK,kBAAkB,OAAO,WAAW,GAEzC,KAAK,mBAAmB,MAAM,QAAQ,YAAY,SAAS,YAAY,OAAO,GAC9E,MAAM,OAAO,SAAS,MAAM,MAAM,GAClC,MAAM,OAAO,SAAS,MAAM,MAAM,GAElC,MAAM,YAAY,YAAY,WAC1B,MAAM,SAAS,mBAEf,MAAM,OAAO,eAEb,MAAM,KAAK,WAAW,OAAO,MAE7B,MAAM,OAAO,MAAM,KAAK,QAAQ,SAAS,SAAS,IAElD,MAAM,KAAK,WAAW,OAAO,MAE7B,MAAM,OAAO,iBAAiB,MAAM,IAAI,KAAK,MAAM,OAGhD;EACX;;;;;;EAOQ,kBAAkB,OAA4B,aACtD;AACI,UAAM,YAAY,YAAY,WAC9B,MAAM,aAAa,YAAY,YAC/B,MAAM,YAAY,YAAY,IAC9B,GAAA,MAAM,OAAO,YAAY,MAEzB,MAAM,SAAS,YAAY,QAC3B,MAAM,SAAS,YAAY,QAC3B,MAAM,UAAU,YAAY,SAC5B,MAAM,OAAO,IAAI,YAAY,SAC7B,MAAM,OAAO,IAAI,YAAY,SAC7B,MAAM,UAAU,YAAY,SAC5B,MAAM,UAAU,YAAY,SAC5B,MAAM,SAAS,IAAI,YAAY,WAC/B,MAAM,SAAS,IAAI,YAAY,WAC/B,MAAM,KAAK,IAAI,YAAY,OAC3B,MAAM,KAAK,IAAI,YAAY,OAC3B,MAAM,gBAAgB,MACtB,MAAM,WAAW,YAAY;EACjC;AACJ;AA7sBa,aAGF,YAA+B;EAClC,MAAM;EACN,MAAM;IACF,cAAc;IACd,cAAc;EAClB;AACJ;;;;;;AATS,aAiBK,uBAA4C;EACtD,MAAM;EACN,YAAY;EACZ,OAAO;EACP,OAAO;AACX;AAtBG,IAAM,cAAN;AAquBP,WAAW,IAAI,WAAW;;;;;ACtnB1B,SAAS,kCAAkC,MAC3C;AACW,SAAA,SAAS,aAAa,SAAS;AAC1C;AAEO,IAAM,yBAAkD;;;;;;;;;;EAW3D,SAAS;;;;;;;;;;EAWT,aAAa;;;;;;;;;;EAWb,cAAc;;;;;;;;;;EAWd,cAAc;;;;;;;;;;EAWd,aAAa;;;;;;;;;;EAWb,mBAAmB;;;;;;;;;;EAWnB,YAAY;;;;;;;;;;EAWZ,aAAc;;;;;;;;;;EAWd,WAAY;;;;;;;;;;EAWZ,kBAAmB;;;;;;;;;;EAWnB,iBAAkB;;;;;;;;;;EAWlB,eAAgB;;;;;;;;;;EAWhB,gBAAiB;;;;;;;;;;EAWjB,gBAAiB;;;;;;;;;;EAWjB,eAAgB;;;;;;;;;;EAWhB,qBAAsB;;;;;;;;;;EAWtB,cAAe;;;;;;;;;;EAWf,eAAgB;;;;;;;;;;EAWhB,cAAe;;;;;;;;;;EAWf,aAAc;;;;;;;;;;EAWd,oBAAqB;;;;;;;;;;EAWrB,cAAe;;;;;;;;;;EAWf,aAAc;;;;;;;;;;EAWd,WAAY;;;;;;;;;;EAWZ,kBAAmB;;;;;;;;;;EAWnB,OAAQ;;;;;;;;;;EAWR,eAAgB;;;;;;;;;;EAWhB,YAAa;;;;;;;;;;EAWb,mBAAoB;;;;;;;;;;EAWpB,aAAc;;;;;;;;;;EAWd,mBAAoB;;;;;;;;;;EAWpB,cAAe;;;;;;;;;;EAWf,SAAU;;;;EAIV,sBAAsB;;;;;EAKtB,IAAI,cACJ;AACI,WAAO,KAAK,wBAAwB,kCAAkC,YAAY,gBAAgB;EACtG;EACA,IAAI,YAAY,OAChB;AAGc,gBAAA;MACF;;MAEA;IAAA,GAIR,KAAK,uBAAuB,OAC5B,KAAK,YAAY,QAAQ,WAAW;EACxC;;;;EAIA,oBAAoB;;;;;;;;;;;;;;;;;;;;;;;EAuBpB,IAAI,YACJ;AACW,WAAA,KAAK,sBAAsB,YAAY;EAClD;EACA,IAAI,UAAU,OACd;AACI,SAAK,uBAAuB,kCAAkC,KAAK,GACnE,KAAK,qBAAqB;EAC9B;;;;;;;;;;;;;;;;;;;;;;;;EAyBA,gBACA;AACI,WAAO,KAAK,cAAc,YAAY,KAAK,cAAc;EAC7D;;;;;;EAOA,qBAAqB;;;;;;;;;;;;;EAcrB,SAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmCT,iBACI,MACA,UACA,SAEJ;AACI,UAAM,UAAW,OAAO,WAAY,aAAa,WACzC,OAAO,WAAY,YAAY,QAAQ,SACzC,UAAU,OAAO,YAAa,aAAa,SAAY;AAE7D,WAAO,UAAU,GAAG,IAAI,YAAY,MACpC,WAAW,OAAO,YAAa,aAAa,WAAW,SAAS,aAE/D,KAAuC,GAAG,MAAM,UAAU,OAAO;EACtE;;;;;;;;;;EAWA,oBACI,MACA,UACA,SAEJ;AACI,UAAM,UAAW,OAAO,WAAY,aAAa,WACzC,OAAO,WAAY,YAAY,QAAQ,SACzC,UAAU,OAAO,YAAa,aAAa,SAAY;AAE7D,WAAO,UAAU,GAAG,IAAI,YAAY,MACpC,WAAW,OAAO,YAAa,aAAa,WAAW,SAAS,aAE/D,KAAuC,IAAI,MAAM,UAAU,OAAO;EACvE;;;;;;;;;;;;;;EAeA,cAAc,GACd;AACI,QAAI,EAAE,aAAa;AAET,YAAA,IAAI,MAAM,2EAA2E;AAG/F,WAAA,EAAE,mBAAmB,OACrB,EAAE,OAAO,MACT,EAAE,SAAS,MACX,EAAE,QAAQ,cAAc,CAAC,GAElB,CAAC,EAAE;EACd;AACJ;AAEA,cAAc,MAAM,sBAAsB;;;ACluBnC,IAAM,mBAAsC;;;;;;;EAO/C,YAAY;;;;;;;EAQZ,iBAAiB;;;;;;EAOjB,gBAAgB;;;;;;;EAQhB,UAAU;;;;;;EAOV,mBAAmB;;;;;;EAOnB,gBAAgB;;;;;;;;EAShB,gBAAgB;;;;;;;;EAShB,yBAAyB;;;;;;;;EASzB,oBAAoB;EAEpB,UAAU;AACd;;;AC/GA,cAAc,MAAM,gBAAgB;AAEpC,IAAM,eAAe;AAArB,IAEM,iBAAiB;AAFvB,IAGM,kBAAkB;AAHxB,IAIM,kBAAkB;AAJxB,IAKM,mBAAmB;AALzB,IAOM,gBAAgB;AAPtB,IAQM,iBAAiB;AARvB,IASM,iBAAiB;AATvB,IAUM,kBAAkB;AAajB,IAAM,uBAAN,MACP;;;;;EAiDI,YAAY,UACZ;AAvCA,SAAO,QAAQ,OASf,KAAQ,YAAY,OAGpB,KAAQ,yBAAyB,OASjC,KAAQ,OAAiC,CAAA,GAGzC,KAAQ,WAAW,GAGnB,KAAQ,WAA4B,CAAA,GAGpC,KAAQ,qBAAqB,GAG7B,KAAQ,yBAAyB,KAOxB,KAAA,WAAW,OAEZ,YAAM,SAAS,UAAU,YAAM,SAAS,UAExC,KAAK,gBAAgB;AAInB,UAAA,MAAM,SAAS,cAAc,KAAK;AAEpC,QAAA,MAAM,QAAQ,GAAG,cAAc,MACnC,IAAI,MAAM,SAAS,GAAG,cAAc,MACpC,IAAI,MAAM,WAAW,YACrB,IAAI,MAAM,MAAM,GAAG,eAAe,MAClC,IAAI,MAAM,OAAO,GAAG,eAAe,MACnC,IAAI,MAAM,SAAS,iBAAiB,SAAA,GAEpC,KAAK,MAAM,KACX,KAAK,WAAW,UAOhB,KAAK,aAAa,KAAK,WAAW,KAAK,IAAI,GAO3C,KAAK,eAAe,KAAK,aAAa,KAAK,IAAI,GAG/C,WAAW,iBAAiB,WAAW,KAAK,YAAY,KAAK;EACjE;;;;;;EAOA,IAAI,WACJ;AACI,WAAO,KAAK;EAChB;;;;;;EAOA,IAAI,wBACJ;AACI,WAAO,KAAK;EAChB;;;;;EAMQ,kBACR;AACU,UAAA,UAAU,SAAS,cAAc,QAAQ;AAE/C,YAAQ,MAAM,QAAQ,GAAG,aAAa,MACtC,QAAQ,MAAM,SAAS,GAAG,aAAa,MACvC,QAAQ,MAAM,WAAW,YACzB,QAAQ,MAAM,MAAM,GAAG,cAAc,MACrC,QAAQ,MAAM,OAAO,GAAG,cAAc,MACtC,QAAQ,MAAM,SAAS,gBAAgB,SAAA,GACvC,QAAQ,MAAM,kBAAkB,WAChC,QAAQ,QAAQ,mDAEhB,QAAQ,iBAAiB,SAAS,MAClC;AACI,WAAK,yBAAyB,MAC9B,KAAK,SAAA,GACL,KAAK,iBAAA;IAAiB,CACzB,GAED,SAAS,KAAK,YAAY,OAAO,GACjC,KAAK,WAAW;EACpB;;;;;EAMQ,mBACR;AACS,SAAK,aAIV,SAAS,KAAK,YAAY,KAAK,QAAQ,GACvC,KAAK,WAAW;EACpB;;;;;;EAOQ,WACR;;AACQ,SAAK,cAKT,KAAK,YAAY,MAEjB,WAAW,SAAS,iBAAiB,aAAa,KAAK,cAAc,IAAI,GACzE,WAAW,oBAAoB,WAAW,KAAK,YAAY,KAAK,GAEhE,KAAK,SAAS,GAAG,cAAc,KAAK,QAAQ,IAAI,IAChD,UAAK,SAAS,KAAK,eAAnB,mBAA+B,YAAY,KAAK;EACpD;;;;;;EAOQ,aACR;;AACQ,KAAC,KAAK,aAAa,KAAK,2BAK5B,KAAK,YAAY,OAEjB,WAAW,SAAS,oBAAoB,aAAa,KAAK,cAAc,IAAI,GAC5E,WAAW,iBAAiB,WAAW,KAAK,YAAY,KAAK,GAE7D,KAAK,SAAS,IAAI,cAAc,KAAK,MAAM,IAC3C,UAAK,IAAI,eAAT,mBAAqB,YAAY,KAAK;EAC1C;;;;;;EAOQ,wBAAwB,eAChC;AACI,QAAI,CAAC,cAAc,WAAW,CAAC,cAAc;AAEzC;AAGA,kBAAc,cAAc,cAAc,cAAA,MAErC,cAAc,qBAEf,KAAK,SAAS,aAAa,GAG/B,cAAc,WAAW,KAAK;AAGlC,UAAM,WAAW,cAAc;AAE3B,QAAA;AAEA,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ;AAE5B,aAAA,wBAAwB,SAAS,CAAC,CAAc;EAGjE;;;;;EAMQ,SACR;AAKU,UAAA,MAAM,YAAY,IAAA;AASxB,QAPI,YAAM,SAAS,QAAQ,UAAU,MAAM,KAAK,uBAKhD,KAAK,qBAAqB,MAAM,KAAK,wBAEjC,CAAC,KAAK,SAAS;AAEf;AAIA,SAAK,SAAS,sBAEd,KAAK,wBAAwB,KAAK,SAAS,kBAA+B;AAGxE,UAAA,EAAE,GAAG,GAAG,OAAO,OAAW,IAAA,KAAK,SAAS,KAAK,sBAAA,GAC7C,EAAE,OAAO,WAAW,QAAQ,YAAY,WAAW,IAAI,KAAK,UAE5D,KAAM,QAAQ,YAAa,YAC3B,KAAM,SAAS,aAAc;AAEnC,QAAI,MAAM,KAAK;AAEX,QAAA,MAAM,OAAO,GAAG,CAAC,MACrB,IAAI,MAAM,MAAM,GAAG,CAAC,MACpB,IAAI,MAAM,QAAQ,GAAG,SAAS,MAC9B,IAAI,MAAM,SAAS,GAAG,UAAU;AAEhC,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAC1C;AACU,YAAA,QAAQ,KAAK,SAAS,CAAC;AAEzB,UAAA,MAAM,aAAa,KAAK;AAElB,cAAA,oBAAoB,OAE1B,YAAM,YAAY,KAAK,UAAU,GAAG,CAAC,GACrC,KAAK,IAAI,YAAY,MAAM,cAAc,GACzC,KAAK,KAAK,KAAK,MAAM,cAAc,GACnC,MAAM,iBAAiB,MAEvB;WAGJ;AAEI,cAAM,MAAM;AACZ,YAAI,UAAU,MAAM;AACpB,cAAM,KAAK,MAAM;AAEb,cAAM,WAEN,IAAI,MAAM,OAAO,IAAI,GAAG,KAAM,QAAQ,IAAI,GAAG,KAAM,EAAE,MACrD,IAAI,MAAM,MAAM,IAAI,GAAG,KAAM,QAAQ,IAAI,GAAG,KAAM,EAAE,MAEpD,IAAI,MAAM,QAAQ,GAAG,QAAQ,QAAQ,GAAG,IAAI,EAAE,MAC9C,IAAI,MAAM,SAAS,GAAG,QAAQ,SAAS,GAAG,IAAI,EAAE,SAIhD,UAAU,MAAM,UAEhB,GAAA,KAAK,WAAW,OAAO,GAEvB,IAAI,MAAM,OAAO,GAAG,QAAQ,IAAI,EAAE,MAClC,IAAI,MAAM,MAAM,GAAG,QAAQ,IAAI,EAAE,MAEjC,IAAI,MAAM,QAAQ,GAAG,QAAQ,QAAQ,EAAE,MACvC,IAAI,MAAM,SAAS,GAAG,QAAQ,SAAS,EAAE,MAGrC,IAAI,UAAU,MAAM,mBAAmB,MAAM,oBAAoB,SAEjE,IAAI,QAAQ,MAAM,kBAElB,IAAI,aAAa,YAAY,MAAM,MAAM,kBACtC,MAAM,mBAAmB,QAE5B,IAAI,aAAa,cAAc,MAAM,cAAc,KAKvD,MAAM,oBAAoB,IAAI,SAAS,MAAM,aAAa,IAAI,cAE9D,IAAI,QAAQ,MAAM,iBAClB,IAAI,WAAW,MAAM,UACjB,KAAK,SAAO,KAAK,gBAAgB,GAAG;MAEhD;IACJ;AAGK,SAAA;EACT;;;;;;EAOO,gBAAgB,KACvB;AACQ,QAAA,YAAY,SAAS,IAAI,IAAI,iBAAiB,IAAI,KAAK,mBAAmB,IAAI,QAAQ;EAC9F;;;;;EAMO,WAAW,SAClB;AACQ,YAAQ,IAAI,MAEZ,QAAQ,SAAS,QAAQ,GACzB,QAAQ,IAAI,IAGZ,QAAQ,IAAI,MAEZ,QAAQ,UAAU,QAAQ,GAC1B,QAAQ,IAAI;AAGhB,UAAM,EAAE,OAAO,WAAW,QAAQ,WAAA,IAAe,KAAK;AAElD,YAAQ,IAAI,QAAQ,QAAQ,cAE5B,QAAQ,QAAQ,YAAY,QAAQ,IAGpC,QAAQ,IAAI,QAAQ,SAAS,eAE7B,QAAQ,SAAS,aAAa,QAAQ;EAE9C;;;;;;EAOQ,SAAkC,eAC1C;AAGQ,QAAA,MAAM,KAAK,KAAK,IAAI;AAEnB,YAED,MAAM,SAAS,cAAc,QAAQ,GAErC,IAAI,MAAM,QAAQ,GAAG,cAAc,MACnC,IAAI,MAAM,SAAS,GAAG,cAAc,MACpC,IAAI,MAAM,kBAAkB,KAAK,QAAQ,0BAA0B,eACnE,IAAI,MAAM,WAAW,YACrB,IAAI,MAAM,SAAS,iBAAiB,SAAS,GAC7C,IAAI,MAAM,cAAc,QAGpB,UAAU,UAAU,YAAY,EAAE,SAAS,QAAQ,IAGnD,IAAI,aAAa,aAAa,KAAK,IAInC,IAAI,aAAa,aAAa,QAAQ,GAGtC,UAAU,UAAU,MAAM,cAAc,IAGxC,IAAI,aAAa,iBAAiB,WAAW,IAK7C,IAAI,aAAa,iBAAiB,MAAM,GAG5C,IAAI,iBAAiB,SAAS,KAAK,SAAS,KAAK,IAAI,CAAC,GACtD,IAAI,iBAAiB,SAAS,KAAK,SAAS,KAAK,IAAI,CAAC,GACtD,IAAI,iBAAiB,YAAY,KAAK,YAAY,KAAK,IAAI,CAAC,IAIhE,IAAI,MAAM,gBAAgB,cAAc,yBAExC,IAAI,OAAO,cAAc,gBAErB,cAAc,mBAAmB,cAAc,oBAAoB,OAEnE,IAAI,QAAQ,cAAc,mBAErB,CAAC,cAAc,kBACZ,cAAc,mBAAmB,UAEzC,IAAI,QAAQ,iBAAiB,cAAc,QAAQ,KAGnD,cAAc,kBACX,cAAc,mBAAmB,QAEpC,IAAI,aAAa,cAAc,cAAc,cAAc,GAG3D,KAAK,SAAO,KAAK,gBAAgB,GAAG,GAExC,cAAc,oBAAoB,MAClC,cAAc,iBAAiB,KAC/B,IAAI,gBAAgB,eAEpB,KAAK,SAAS,KAAK,aAAa,GAChC,KAAK,IAAI,YAAY,cAAc,cAAc,GACjD,cAAc,eAAe,WAAW,cAAc;EAC1D;;;;;;;EAQQ,eAAe,GAAY,MACnC;AACU,UAAA,EAAE,eAAe,OAAA,IAAW,EAAE,QAC9B,UAAU,KAAK,SAAS,OAAO,cAC/B,QAAwB,OAAO,OAAO,IAAI,eAAe,OAAO,GAAG,EAAE,OAAA,CAAQ;AAEnF,YAAQ,aAAa,KAAK,SAAS,oBACnC,KAAK,QAAQ,CAACC,UAAS,QAAQ,cAAc,OAAOA,KAAI,CAAC;EAC7D;;;;;;EAOQ,SAAS,GACjB;AACI,SAAK,eAAe,GAAG,CAAC,SAAS,cAAc,KAAK,CAAC;EACzD;;;;;;EAOQ,SAAS,GACjB;AACU,MAAE,OAAmB,aAAa,WAAW,KAE9C,EAAE,OAAmB,aAAa,aAAa,WAAW,GAG/D,KAAK,eAAe,GAAG,CAAC,WAAW,CAAC;EACxC;;;;;;EAOQ,YAAY,GACpB;AACU,MAAE,OAAmB,aAAa,WAAW,KAE9C,EAAE,OAAmB,aAAa,aAAa,QAAQ,GAG5D,KAAK,eAAe,GAAG,CAAC,UAAU,CAAC;EACvC;;;;;;EAOQ,WAAW,GACnB;AACQ,MAAE,YAAY,gBAKlB,KAAK,SAAS;EAClB;;;;;;EAOQ,aAAa,GACrB;AACQ,MAAE,cAAc,KAAK,EAAE,cAAc,KAKzC,KAAK,WAAA;EACT;;EAGO,UACP;AACS,SAAA,iBACL,GAAA,KAAK,MAAM,MAEX,WAAW,SAAS,oBAAoB,aAAa,KAAK,cAAc,IAAI,GAC5E,WAAW,oBAAoB,WAAW,KAAK,UAAU,GAEzD,KAAK,OAAO,MACZ,KAAK,WAAW,MAChB,KAAK,WAAW;EACpB;AACJ;AA/iBa,qBAGF,YAA+B;EAClC,MAAM;EACN,MAAM;IACF,cAAc;IACd,cAAc;EAClB;AACJ;AAwiBJ,WAAW,IAAI,oBAAoB;;;AC/kBnCC;AACAA;;;ACCY,IAAA,oBAAAC,CAAAA,uBAORA,kBAAA,kBAAA,+BAA+B,KAAA,IAA/B,gCAIAA,kBAAAA,kBAAA,gCAAgC,KAAA,IAAhC,iCAIAA,kBAAAA,kBAAA,gCAAgC,KAAhC,IAAA,iCAIAA,kBAAA,kBAAA,gCAAgC,KAAhC,IAAA,iCAMAA,kBAAAA,kBAAA,sCAAsC,KAAA,IAAtC,uCAIAA,kBAAAA,kBAAA,sCAAsC,KAAA,IAAtC,uCAIAA,kBAAA,kBAAA,sCAAsC,KAAtC,IAAA,uCAIAA,kBAAA,kBAAA,gCAAgC,KAAA,IAAhC,iCAMAA,kBAAAA,kBAAA,qBAAqB,KAAA,IAArB,sBAIAA,kBAAAA,kBAAA,4BAA4B,KAA5B,IAAA,6BAIAA,kBAAA,kBAAA,sBAAsB,KAAtB,IAAA,uBAIAA,kBAAA,kBAAA,6BAA6B,KAA7B,IAAA,8BAIAA,kBAAA,kBAAA,uBAAuB,KAAvB,IAAA,wBAIAA,kBAAAA,kBAAA,4BAA4B,KAAA,IAA5B,6BAIAA,kBAAAA,kBAAA,wBAAwB,KAAA,IAAxB,yBAIAA,kBAAA,kBAAA,mCAAmC,KAAnC,IAAA,oCAIAA,kBAAA,kBAAA,2CAA2C,KAAA,IAA3C,4CAIAA,kBAAAA,kBAAA,4CAA4C,KAAA,IAA5C,6CAMAA,kBAAAA,kBAAA,kCAAkC,KAAA,IAAlC,mCAIAA,kBAAAA,kBAAA,mCAAmC,KAAA,IAAnC,oCAIAA,kBAAAA,kBAAA,kCAAkC,KAAlC,IAAA,mCAIAA,kBAAA,kBAAA,mCAAmC,KAAnC,IAAA,oCAMAA,kBAAAA,kBAAA,4BAA4B,KAAA,IAA5B,6BAMAA,kBAAAA,kBAAA,2BAA2B,KAAA,IAA3B,4BAIAA,kBAAA,kBAAA,2CAA2C,KAA3C,IAAA,4CAIAA,kBAAA,kBAAA,+CAA+C,KAA/C,IAAA,gDAOAA,kBAAA,kBAAA,+BAA+B,KAA/B,IAAA,gCA5HQA,oBAAA,oBAAA,CAAA,CAAA;AAsIL,IAAM,qCAA+D;;EAEvE,OAAgD;EAChD,OAAiD;EACjD,OAAiD;EACjD,OAAiD;;EAGjD,OAAiD;EACjD,OAAuD;EACvD,OAAuD;EACvD,OAAuD;;EAGvD,OAAsC;EACtC,OAA6C;EAC7C,OAAuC;EACvC,OAA8C;EAC9C,OAAwC;EACxC,OAA6C;EAC7C,OAAyC;EACzC,OAAoD;EACpD,OAA4D;;EAC5D,OAA6D;;;EAG7D,OAAmD;EACnD,OAAoD;EACpD,OAAmD;EACnD,OAAoD;;EAGpD,OAA6C;;;EAI7C,OAA4C;EAC5C,OAA4D;EAC5D,OAAgE;;;;EAKhE,OAAgD;AACrD;;;;ACpLA,IAAI;AAAJ,IACIC;AAEJ,SAAS,iCACT;AACiB,EAAAA,cAAA;IACT,MAAM,SAAS,aAAa,+BAA+B;IAC3D,WAAW,SAAS,aAAa,oCAAoC;;IACrE,KAAK,SAAS,aAAa,8BAA8B;IACzD,MAAM,SAAS,aAAa,+BAA+B;IAC3D,OAAO,SAAS,aAAa,gCAAgC,KACtD,SAAS,aAAa,uCAAuC;IACpE,KAAK,SAAS,aAAa,8BAA8B;IACzD,MAAM,SAAS,aAAa,+BAA+B;EAAA;AAEnE;AAEO,IAAM,2BAA2B;EACpC,WAAW;IACP,MAAM,cAAc;IACpB,UAAU;EACd;EACA,MAAM,YACN;AAGI,UAAM,KADS,SAAS,QAAQ,aAAa,EAC3B,WAAW,OAAO;AAEpC,WAAK,MAUL,WAAW,IAEJ,SARC,QAAQ,KAAK,8CAA8C,GAGxD;EAMf;EACA,KAAK,OAAO,YACZ;AACS,IAAAA,eAAY,+BAA+B;AAEhD,UAAM,iBAAiB,CAAA;AAGvB,eAAW,iBAAiBA;AAEN,MAAAA,YAAW,aAA8C,KAO3E,eAAe,KAAK,aAAa;AAGrC,WAAO,CAAC,GAAG,gBAAgB,GAAG,OAAO;EACzC;EACA,QAAQ,OAAO,aAENA,eAAY,+BAA+B,GAEzC,QAAQ,OAAO,CAAC,MAAM,EAAE,KAAKA,YAAW;AAEvD;AAEAC,WAAI,IAAI,wBAAwB;;;;;;;;ACzDzB,IAAe,eAAf,cAAoC,eAC3C;;;;;;;;;;EAwBI,YAAY,QAA6B,UAAgC,EAAE,OAAO,GAAG,QAAQ,GAAG,UAAU,KAAA,GAC1G;AACI,QAAI,QACA;AAEA,WAAO,UAAW,YAElB,SAAS,QACT,OAAO,IAAI,WAAW,MAItB,SAAS,MACT,OAAO,SAGX,MAAM,MAAM,OAAO,GAEnB,KAAK,SAAS,QACd,KAAK,SAAS,OAAO,IAAI,eAAe,IAAI,IAAI,MAEhD,KAAK,QAAQ,MACb,KAAK,SAAS,OAGV,KAAK,WAAW,QAAQ,QAAQ,aAAa,SAE7C,KAAK,KAAA,GAEL,KAAK,WAAW,QAAQ,KAAK,WAE7B,KAAK,QAAQ,QAAQ,QAAQ,IAAI,GACjC,KAAK,SAAS,MACd,KAAK,aAAa,KAAK,OAAO,aAAa;EAEnD;EAEU,aAAa,OACvB;EAEA;;EAGA,OACA;AACQ,WAAA,KAAK,QAEE,KAAK,SAGhB,KAAK,QAAQ,MAAM,KAAK,MAAM,EACzB,KAAK,CAAC,aAAa,SAAS,KAAA,CAAM,EAClC,KAAK,CAAC,SAAS,KAAK,YAAY,CAAC,EACjC,KAAK,CAAC,iBAEH,KAAK,OAAO,IAAI,YAAY,WAAW,GACvC,KAAK,SAAS,IAAI,eAAe,WAAW,GAC5C,KAAK,SAAS,MAEd,KAAK,aAAa,WAAW,GAC7B,KAAK,OAAO,GAEL,KACV,GAEE,KAAK;EAChB;AACJ;;;AChCO,IAAM,4BAAN,MAAM,mCAAkC,aAC/C;;;;;;;;;;;EAwBI,YAAY,QAA6B,SACzC;AACI,UAAM,QAAQ,OAAO,GAErB,KAAK,SAAS,QAAQ,QACtB,KAAK,SAAS,QAAQ,UAAU,GAEhC,KAAK,SAAS,QAAQ,OACtB,KAAK,UAAU,QAAQ,QAEvB,KAAK,aAAa,2BAA0B,mBAAmB,KAAK,MAAM,IAEtE,QAAQ,gBAAgB,KAAK,YAG7B,KAAK,gBAAgB,QAAQ,gBACtB,2BAA0B;MACzB,kBAAkB,aAAa,SAAS,KAAK,OAAO;MACpD,KAAK;MACL,KAAK;MACL;MAAG;;MACH,KAAK;MACL,KAAK;IAAA;EAErB;;;;;;;EAQA,OAAO,UAAoB,UAAuB,YAClD;AACI,UAAM,KAAK,SAAS;AAGpB,QAAI,CAFc,SAAS,QAAQ,WAAW,KAAK,UAAU;AAIzD,YAAM,IAAI,MAAM,GAAG,KAAK,UAAU,oDAAoD;AAE1F,QAAI,CAAC,KAAK;AAGC,aAAA;AAGR,OAAA,YAAY,GAAG,kBAAkB,CAAC;AAErC,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,KACxC;AACU,YAAA,EAAE,SAAS,YAAY,aAAa,YAAA,IAAgB,KAAK,cAAc,CAAC;AAE3E,SAAA,qBAAqB,GAAG,YAAY,SAAS,KAAK,QAAQ,YAAY,aAAa,GAAG,WAAW;IACxG;AAEO,WAAA;EACX;;EAGU,eACV;AACI,SAAK,gBAAgB,2BAA0B;MAC3C,KAAK,OAAO;MACZ,KAAK;MACL,KAAK;MACL;MAAG;;MACH,KAAK;MACL,KAAK;IAAA;EACb;;;;;;EAOA,OAAe,mBAAmB,QAGlC;AACQ,QAAA,UAAU,SAAU,UAAU;AAEvB,aAAA;AAEF,QAAA,UAAU,SAAU,UAAU;AAE5B,aAAA;AAEF,QAAA,UAAU,SAAU,UAAU;AAE5B,aAAA;AAEN,QAAI,UAAU;AAER,aAAA;AAEF,QAAA,UAAU,SAAU,UAAU;AAE5B,aAAA;AAGL,UAAA,IAAI,MAAM,4CAA4C;EAChE;;;;;;;;;;;;EAaA,OAAe,oBACX,QACA,QACA,QACA,YACA,aACA,YACA,aAEJ;AAEU,UAAA,UAAU,IAAI,MAA6B,MAAM;AAEnD,QAAA,SAAS,OAAO,YAEhB,aAAa,YACb,cAAc,aACd,oBAAqB,aAAa,aAAa,IAAK,EAAE,aAAa,IACnE,qBAAsB,cAAc,cAAc,IAAK,EAAE,cAAc,IAEvE,YAAY,oBAAoB,qBAAqB,mCAAmC,MAAM;AAEzF,aAAA,IAAI,GAAG,IAAI,QAAQ;AAExB,cAAQ,CAAC,IAAI;QACT,SAAS;QACT,YAAY,SAAS,IAAI,aAAa;QACtC,aAAa,SAAS,IAAI,cAAc;QACxC,aAAa,IAAI,WAAW,OAAO,QAAQ,QAAQ,SAAS;MAGhE,GAAA,UAAU,WAGV,aAAc,cAAc,KAAM,GAClC,cAAe,eAAe,KAAM,GACpC,oBAAqB,aAAa,aAAa,IAAK,EAAE,aAAa,IACnE,qBAAsB,cAAc,cAAc,IAAK,EAAE,cAAc,IACvE,YAAY,oBAAoB,qBAAqB,mCAAmC,MAAM;AAG3F,WAAA;EACX;AACJ;;;ACnQA,IAAM,iBAAiB;AAAvB,IACM,kBAAkB;AADxB,IAEM,qBAAqB;AAF3B,IAGM,uBAAuB;AAH7B,IAMM,YAAY;AANlB,IAYM,aAAa;EACf,MAAM;EACN,OAAO;EACP,QAAQ;EACR,OAAO;EACP,cAAc;EACd,cAAc;AAClB;AAnBA,IAyBM,gBAAgB;EAClB,MAAM;EACN,OAAO;EACP,QAAQ;EACR,cAAc;EACd,YAAY;EACZ,YAAY;EACZ,YAAY;EACZ,YAAY;AAChB;AAlCA,IAwCM,kBAAkB;EACpB,aAAa;EACb,oBAAoB;EACpB,WAAW;EACX,YAAY;EACZ,aAAa;AACjB;AA9CA,IA+LM,WAAW;AA/LjB,IAkMM,aAAa;AAlMnB,IAmMM,cAAc;AAnMpB,IAoMM,WAAW;AApMjB,IAqMM,WAAW;AArMjB,IAsMM,iBAAiB;AAtMvB,IAyMM,cAAc;AAzMpB,IA0MM,cAAc;AA1MpB,IA2MM,cAAc;AA3MpB,IA4MM,cAAc;AA5MpB,IA+MM,gCAAgC;AA/MtC,IAqNM,mBAA6C;EAC/C,CAAC,WAAW,GAAG,iBAAiB;EAChC,CAAC,WAAW,GAAG,iBAAiB;EAChC,CAAC,WAAW,GAAG,iBAAiB;AACpC;AAzNA,IA+NM,iBAA2C;;EAE5C,IAAuC,iBAAiB;EACxD,IAAoC,iBAAiB;EACrD,IAAuC,iBAAiB;EACxD,IAAoC,iBAAiB;EACrD,IAAuC,iBAAiB;EACxD,IAAoC,iBAAiB;;EAGrD,IAAyC,iBAAiB;EAC1D,IAAyC,iBAAiB;EAC1D,IAAyC,iBAAiB;AAC/D;AAQO,SAAS,SAAS,aACzB;AACU,QAAA,OAAO,IAAI,YAAY,WAAW;AACtB,MAAA,KAAK,CAAC,MAEN;AAER,UAAA,IAAI,MAAM,6BAA6B;AAG3C,QAAA,SAAS,IAAI,YAAY,aAAa,GAAG,kBAAkB,YAAY,iBAAiB,GAGxF,SAAS,OAAO,WAAW,MAAM,GACjC,QAAQ,OAAO,WAAW,KAAK,GAC/B,cAAc,OAAO,WAAW,YAAY,GAG5C,cAAc,IAAI;IACpB;IACA,WAAW,eAAe,YAAY;IACtC,qBAAqB,YAAY;EAAA,GAC/B,cAAc,YAAY,QAAQ;AAGxC,MAAI,cAAc,aAClB;AACU,UAAA,SAAS,YAAY,cAAc,MAAM;AAG/C,QAAI,WAAW,aACf;AACUC,YAAAA,kBAAiB,iBAAiB,MAAM,GAExCC,cAAa,iBAAiB,iBAC9B,UAAU,IAAI,WAAW,aAAaA,WAAU;AAS/C,aAAA,CAPU,IAAI,0BAA0B,SAAS;QACpD,QAAQD;QACR;QACA;QACA,QAAQ;;MACX,CAAA,CAEe;IACpB;AAGA,UAAM,aAAa,iBAAiB,iBAC9B,aAAa,IAAI;MACnB,KAAK;MACL;MACA,uBAAuB,YAAY;IAAA,GACjC,aAAa,WAAW,gBAAgB,WAAW,GACnD,oBAAoB,WAAW,gBAAgB,kBAAkB,GACjE,WAAW,WAAW,gBAAgB,SAAS,GAC/C,YAAY,WAAW,gBAAgB,UAAU,GAGjD,iBAAiB,eAAe,UAAU;AAEhD,QAAI,mBAAmB;AAEnB,YAAM,IAAI,MAAM,wDAAwD,UAAU,EAAE;AAExF,QAAI,aAAa;AAGP,YAAA,IAAI,MAAM,6CAA6C;AAEjE,QAAI,sBAAsB;AAGhB,YAAA,IAAI,MAAM,8CAA8C;AAIlE,UAAM,eAAe,IAAI,MACnB,GAAA,aAAa,iBACT,kBACA;AAEV,QAAI,cAAc;AAGd,mBAAa,KAAK,IAAI,WAAW,aAAa,UAAU,CAAC;SAG7D;AAGU,YAAA,YAAY,mCAAmC,cAAc;AACnE,UAAI,YAAY,GACZ,aAAa,OACb,cAAc;AAElB,eAAS,IAAI,GAAG,IAAI,aAAa,KACjC;AACI,cAAM,oBAAoB,KAAK,IAAI,GAAI,aAAa,IAAK,EAAE,GACrD,qBAAqB,KAAK,IAAI,GAAI,cAAc,IAAK,EAAE,GAEvD,YAAY,oBAAoB,qBAAqB;AAE3D,qBAAa,WAEb,aAAa,eAAe,GAC5B,cAAc,gBAAgB;MAClC;AAEA,UAAI,cAAc;AAGT,eAAA,IAAI,GAAG,IAAI,WAAW;AAEd,qBAAA,KAAK,IAAI,WAAW,aAAa,aAAa,SAAS,CAAC,GACrE,eAAe;IAEvB;AAGA,WAAO,aAAa,IAAI,CAAC,WAAW,IAAI,0BAA0B,QAAQ;MACtE,QAAQ;MACR;MACA;MACA,QAAQ;IACX,CAAA,CAAC;EACN;AACI,QAAA,cAAc,WAGR,IAAI,MAAM,uDAAuD,IAEvE,cAAc,WAGR,IAAI,MAAM,6DAA6D,IAE7E,cAAc,iBAGR,IAAI,MAAM,sEAAsE,IAEtF,cAAc,aAGR,IAAI,MAAM,iEAAiE,IAG/E,IAAI,MAAM,mEAAmE;AACvF;;;;ACjYA,IAAM,kBAAkB,CAAC,KAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAAM,IAAM,IAAM,IAAM,EAAI;AAA/F,IAOM,aAAa;AAPnB,IAaM,aAAa;EACf,iBAAiB;EACjB,YAAY;EACZ,SAAS;EACT,cAAc;EACd,WAAW;EACX,oBAAoB;EACpB,yBAAyB;EACzB,aAAa;EACb,cAAc;EACd,aAAa;EACb,0BAA0B;EAC1B,iBAAiB;EACjB,yBAAyB;EACzB,yBAAyB;AAC7B;AA5BA,IAkCM,mBAAmB;AAlCzB,IAwCa,+BAAyD;EAClE,CAAC,MAAM,aAAa,GAAG;EACvB,CAAC,MAAM,cAAc,GAAG;EACxB,CAAC,MAAM,GAAG,GAAG;EACb,CAAC,MAAM,YAAY,GAAG;EACtB,CAAC,MAAM,KAAK,GAAG;EACf,CAAC,MAAM,UAAU,GAAG;AACxB;AA/CA,IAqDa,wBAAkD;EAC3D,CAAC,QAAQ,IAAI,GAAG;EAChB,CAAC,QAAQ,GAAG,GAAG;EACf,CAAC,QAAQ,EAAE,GAAG;EACd,CAAC,QAAQ,GAAG,GAAG;EACf,CAAC,QAAQ,SAAS,GAAG;EACrB,CAAC,QAAQ,eAAe,GAAG;EAC3B,CAAC,QAAQ,KAAK,GAAG;AACrB;AA7DA,IAmEa,2BAAqD;EAC9D,CAAC,MAAM,sBAAsB,GAAG;EAChC,CAAC,MAAM,sBAAsB,GAAG;EAChC,CAAC,MAAM,oBAAoB,GAAG;AAClC;AAEO,SAAS,SAAS,KAAa,aAA0B,mBAAmB,OAKnF;AACU,QAAA,WAAW,IAAI,SAAS,WAAW;AAErC,MAAA,CAAC,SAAS,KAAK,QAAQ;AAEhB,WAAA;AAGX,QAAM,eAAe,SAAS,UAAU,WAAW,YAAY,IAAI,MAAM,YACnE,SAAS,SAAS,UAAU,WAAW,SAAS,YAAY,GAE5D,WAAW,SAAS,UAAU,WAAW,WAAW,YAAY,GAChE,mBAAmB,SAAS,UAAU,WAAW,oBAAoB,YAAY,GACjF,aAAa,SAAS,UAAU,WAAW,aAAa,YAAY,GACpE,cAAc,SAAS,UAAU,WAAW,cAAc,YAAY,KAAK,GAC3E,aAAa,SAAS,UAAU,WAAW,aAAa,YAAY,KAAK,GACzE,wBAAwB,SAAS,UAAU,WAAW,0BAA0B,YAAY,KAAK,GACjG,gBAAgB,SAAS,UAAU,WAAW,iBAAiB,YAAY,GAC3E,uBAAuB,SAAS,UAAU,WAAW,yBAAyB,YAAY,GAC1F,sBAAsB,SAAS,UAAU,WAAW,yBAAyB,YAAY;AAO3F,MAAA,gBAAgB,KAAK,eAAe;AAE9B,UAAA,IAAI,MAAM,gCAAgC;AAEpD,MAAI,kBAAkB;AAEZ,UAAA,IAAI,MAAM,kDAAkD;AAEtE,MAAI,0BAA0B;AAGpB,UAAA,IAAI,MAAM,uCAAuC;AAI3D,QAAM,aAAa,GACb,cAAc,GAEd,eAAgB,aAAa,IAAK,IAClC,gBAAiB,cAAc,IAAK,IACpC,eAAe,IAAI,MAA+B,qBAAqB;AAC7E,MAAI,cAAc,aAAa;AAE3B,aAAW,MAGX,cAAc,eAAe;AAG7B,MAAA;AAEA,MAAA,WAAW,IAGP,6BAA6B,MAAM,IAEnC,qBAAqB,6BAA6B,MAAM,IAAI,sBAAsB,QAAQ,IAI1F,qBAAqB,yBAAyB,MAAM,IAKxD,qBAAqB,mCAAmC,gBAAgB,GAGxE,uBAAuB;AAEjB,UAAA,IAAI,MAAM,8DAA8D;AAGlF,QAAM,SAAuC,mBACvC,YAAY,UAAU,qBAAqB,YAAY,IACvD;AAGN,MAAI,cADkB,cAAc,oBAEhC,WAAW,YACX,YAAY,aACZ,kBAAkB,cAClB,mBAAmB,eACnB,cAAc,mBAAmB;AAErC,WAAS,cAAc,GAAG,cAAc,sBAAsB,eAC9D;AACI,UAAM,YAAY,SAAS,UAAU,aAAa,YAAY;AAC9D,QAAI,gBAAgB,cAAc;AAElC,aAAS,eAAe,GAAG,eAAe,uBAAuB,gBACjE;AAIQ,UAAA,OAAO,aAAa,YAAY;AAE/B,eAED,OAAO,aAAa,YAAY,IAAI,IAAI,MAAM,oBAAoB,IAGtE,KAAK,WAAW,IAAI;QAChB,SAAS;;QAGT,YAAY,uBAAuB,KAAK,WAAW,IAAI,WAAW;QAClE,aAAa,uBAAuB,KAAK,WAAW,IAAI,YAAY;QACpE,aAAa,IAAI,WAAW,aAAa,eAAe,WAAW;MAAA,GAEvE,iBAAiB;IACrB;AAGA,mBAAe,YAAY,GAC3B,cAAc,cAAc,MAAM,IAAI,cAAc,IAAK,cAAc,IAAK,aAG5E,WAAY,YAAY,KAAM,GAC9B,YAAa,aAAa,KAAM,GAChC,kBAAmB,WAAW,aAAa,IAAK,EAAE,aAAa,IAC/D,mBAAoB,YAAY,cAAc,IAAK,EAAE,cAAc,IAGnE,cAAc,kBAAkB,mBAAmB;EACvD;AAGA,SAAI,WAAW,IAEJ;IACH,cAAc,aAAa,IAAI,CAAC,iBAChC;AACI,UAAI,SAA+D,aAAa,CAAC,EAAE,aAC/E,eAAe;AAEnB,aAAI,WAAW,MAAM,QAEjB,SAAS,IAAI;QACT,aAAa,CAAC,EAAE,YAAY;QAC5B,aAAa,CAAC,EAAE,YAAY;QAC5B,aAAa,CAAC,EAAE,YAAY,aAAa;MAAA,IAExC,WAAW,MAAM,gBAEtB,eAAe,MACf,SAAS,IAAI;QACT,aAAa,CAAC,EAAE,YAAY;QAC5B,aAAa,CAAC,EAAE,YAAY;QAC5B,aAAa,CAAC,EAAE,YAAY,aAAa;MAAA,KAExC,WAAW,MAAM,QAEtB,eAAe,MACf,SAAS,IAAI;QACT,aAAa,CAAC,EAAE,YAAY;QAC5B,aAAa,CAAC,EAAE,YAAY;QAC5B,aAAa,CAAC,EAAE,YAAY,aAAa;MAAA,IAG1C;QACH,UAAU,IAAI;UACV;UACA;YACI,OAAO,aAAa,CAAC,EAAE;YACvB,QAAQ,aAAa,CAAC,EAAE;UAC5B;QACJ;QACA,MAAM;QACN,QAAQ,eAAe,uBAAuB,QAAQ,IAAI;MAAA;IAC9D,CACH;IACD;EAAA,IAID;IACH,YAAY,aAAa,IAAI,CAAC,iBAAiB,IAAI,0BAA0B,MAAM;MAC/E,QAAQ;MACR,OAAO;MACP,QAAQ;MACR,QAAQ;MACR;IAAA,CACH,CAAC;IACF;EAAA;AAER;AAOA,SAAS,SAAS,KAAa,UAC/B;AAGI,WAAS,IAAI,GAAG,IAAI,gBAAgB,QAAQ;AAExC,QAAI,SAAS,SAAS,CAAC,MAAM,gBAAgB,CAAC;AAItC,aAAA,QAAQ,MAAM,GAAG,GAAG,6BAA6B,GAG9C;AAIR,SAAA;AACX;AAEA,SAAS,uBAAuB,QAChC;AACI,UAAQ,QACR;IACI,KAAK,QAAQ;AAAM,aAAO,QAAQ;IAClC,KAAK,QAAQ;AAAK,aAAO,QAAQ;IACjC,KAAK,QAAQ;AAAI,aAAO,QAAQ;IAChC,KAAK,QAAQ;AAAK,aAAO,QAAQ;IACjC;AAAgB,aAAA;EACpB;AACJ;AAEA,SAAS,YAAY,UAAoB,qBAA6B,cACtE;AACU,QAAA,SAAA,oBAAa,IAAA;AACnB,MAAI,wBAAwB;AAE5B,SAAO,wBAAwB,uBAC/B;AACI,UAAM,sBAAsB,SAAS,UAAU,mBAAmB,uBAAuB,YAAY,GAC/F,wBAAwB,mBAAmB,wBAAwB,GACnE,eAAe,KAAM,sBAAsB,KAAK;AAGtD,QAAI,wBAAwB,KAAK,sBAAsB,sBAAsB,uBAC7E;AACI,cAAQ,MAAM,8CAA8C;AAC5D;IACJ;AAGA,QAAI,aAAa;AAEjB,WAAO,aAAa,uBAEZ,SAAS,SAAS,wBAAwB,UAAU,MAAM,GAFzB;AAErC;AAMJ,QAAI,eAAe,IACnB;AACI,cAAQ,MAAM,4DAA4D;AAC1E;IACJ;AAEM,UAAA,MAAM,IAAI,YAAA,EAAc;MAC1B,IAAI,WAAW,SAAS,QAAQ,uBAAuB,UAAU;IAAA,GAE/D,QAAQ,IAAI;MACd,SAAS;MACT,wBAAwB,aAAa;MACrC,sBAAsB,aAAa;IAAA;AAGvC,WAAO,IAAI,KAAK,KAAK,GAKrB,yBAAyB,IAAI,sBAAsB;EACvD;AAEO,SAAA;AACX;;;AC7WO,IAAM,UAAwB;EACjC,WAAW;IACP,MAAM,cAAc;IACpB,UAAU,qBAAqB;EACnC;EAEA,MAAM;EAEN,KAAK,KACL;AACW,WAAA,eAAe,KAAK,MAAM;EACrC;EAEA,MAAM,KAAK,KAAa,OAAsB,QAC9C;AAII,UAAM,cAAc,OAFH,MAAM,SAAS,QAAQ,MAAM,GAAG,GAEd,YAAY,GAIzC,WAFY,SAAS,WAAW,EAEX,IAAI,CAAC,aAChC;AACU,YAAA,OAAO,IAAI,YAAY,UAAU;QACnC,QAAQ,aAAa;QACrB,WAAW,YAAY;QACvB,YAAY,YAAM,mBAAmB,GAAG;QACxC,GAAG,MAAM;MAAA,CACZ;AAEM,aAAA,cAAc,MAAM,QAAQ,GAAG;IAAA,CACzC;AAED,WAAO,SAAS,WAAW,IAAI,SAAS,CAAC,IAAI;EACjD;EAEA,OAAO,SACP;AACQ,UAAM,QAAQ,OAAO,IAErB,QAAQ,QAAQ,CAAC,MAAM,EAAE,QAAQ,IAAI,CAAC,IAItC,QAAQ,QAAQ,IAAI;EAE5B;AAEJ;AAEA,WAAW,IAAI,OAAO;;;;;ACnDf,IAAM,UAAU;EACnB,WAAW;IACP,MAAM,cAAc;IACpB,UAAU,qBAAqB;EACnC;EAEA,MAAM;EAEN,KAAK,KACL;AACW,WAAA,eAAe,KAAK,MAAM;EACrC;EAEA,MAAM,KAAK,KAAa,OAAsB,QAC9C;AAIU,UAAA,cAAc,OAFH,MAAM,SAAS,QAAQ,MAAM,GAAG,GAEd,YAAA,GAE7B,EAAE,YAAY,cAAc,OAAA,IAAW,SAAS,KAAK,WAAW,GAEhE,YAAY,cAAc,cAE1B,UAAU;MACZ,QAAQ,aAAa;MACrB,WAAW,YAAY;MACvB,YAAY,YAAM,mBAAmB,GAAG;MACxC,GAAG,MAAM;IAGP,GAAA,WAAW,UAAU,IAAI,CAAC,aAChC;AACQ,oBAAc,gBAEd,OAAO,OAAO,SAAS;QACnB,MAAO,SAAoC;QAC3C,QAAS,SAAoC;MAAA,CAChD;AAGC,YAAA,MAAO,SAAoC,YAAa,UAExD,OAAO,IAAI,YAAY,KAAK,OAAO;AAEzC,aAAA,KAAK,kBAAkB,QAEhB,cAAc,MAAM,QAAQ,GAAG;IAAA,CACzC;AAED,WAAO,SAAS,WAAW,IAAI,SAAS,CAAC,IAAI;EACjD;EAEA,OAAO,SACP;AACQ,UAAM,QAAQ,OAAO,IAErB,QAAQ,QAAQ,CAAC,MAAM,EAAE,QAAQ,IAAI,CAAC,IAItC,QAAQ,QAAQ,IAAI;EAE5B;AAEJ;AAEA,WAAW,IAAI,OAAO;;;;ACvEf,IAAM,8BAA8B;EACvC,WAAW,cAAc;EACzB,MAAM,CAAC,UACP;AACI,UAAM,YAAY,YAAM,KAAK,QAAQ,KAAK,EAAE,MAAM,CAAC;AAEnD,WAAO,CAAC,SAAS,OAAO,KAAK,EAAE,SAAS,SAAS;EACrD;EACA,OAAO,CAAC,UACR;;AACI,UAAM,YAAY,YAAM,KAAK,QAAQ,KAAK,EAAE,MAAM,CAAC;AAEnD,QAAI,cAAc,OAClB;AACI,YAAME,eAAa;QACf;QACA;QACA;QACA;QACA;QACA;QACA;MAAA;AAIJ,UAAIA,aAAW,KAAK,CAAC,QAAQ,MAAM,SAAS,GAAG,CAAC;AAErC,eAAA;UACH,YAAY,aAAW,cAAS,cAAc,KAAK,KAAK,MAAjC,mBAAqC,OAAM,GAAG;UACrE,QAAQA,aAAW,KAAK,CAAC,QAAQ,MAAM,SAAS,GAAG,CAAC;UACpD,KAAK;QAAA;IAGjB;AAEO,WAAA;MACH,YAAY,aAAW,cAAS,cAAc,KAAK,KAAK,MAAjC,mBAAqC,OAAM,GAAG;MACrE,QAAQ;MACR,KAAK;IAAA;EAEb;AACJ;AAEA,WAAW,IAAI,2BAA2B;;;ATvC1C;AACAC;;;;AUJA,IAAM,YAAY,IAAI,UAAA;AAAtB,IACM,kBAAkB;AADxB,IAmCa,WAAN,MAAMC,UACb;;;;EAeI,YAAY,UACZ;AACS,SAAA,WAAW,UAChB,KAAK,8BAA8B;EACvC;EAEU,gBACV;;AACI,UAAM,cAAa,UAAK,aAAL,mBAAe,GAAG;AAErC,SAAK,8BAA8B,CAAC,EAAE,cAAc,WAAW,SAAS,WAAW;EACvF;;;;;;;;;;EAWA,MAAa,MAAM,QAAwC,QAAiB,SACxE,OACJ;AACU,UAAA,QAAQ,IAAI,MAAA;AAEZ,WAAA,MAAA,MAAM,MAAM,KAAK,OAAO,QAAQ,QAAQ,SAAS,KAAK,GAErD;EACX;;;;;;;;;;;EAYA,MAAa,OAAO,QAAwC,QAAiB,SACzE,OACJ;AACI,UAAM,SAAS,KAAK,OAAO,QAAQ,KAAK;AAExC,QAAI,OAAO,WAAW;AAElB,aAAO,IAAI,QAAgB,CAAC,SAAS,WACrC;AAEW,eAAA,OAAQ,CAAC,SAChB;AACI,cAAI,CAAC,MACL;AACW,mBAAA,IAAI,MAAM,wBAAwB,CAAC;AAE1C;UACJ;AAEM,gBAAA,SAAS,IAAI,WAAA;AAEZ,iBAAA,SAAS,MAAM,QAAQ,OAAO,MAAgB,GACrD,OAAO,UAAU,QACjB,OAAO,cAAc,IAAI;QAAA,GAC1B,QAAQ,OAAO;MAAA,CACrB;AAEL,QAAI,OAAO,cAAc;AAEd,aAAA,OAAO,UAAU,QAAQ,OAAO;AAEvC,QAAA,OAAO,kBAAkB,QAC7B;AACU,YAAA,OAAO,MAAM,OAAO,cAAc,EAAE,MAAM,QAAQ,QAAA,CAAS;AAEjE,aAAO,IAAI,QAAgB,CAAC,SAAS,WACrC;AACU,cAAA,SAAS,IAAI,WAAA;AAEZ,eAAA,SAAS,MAAM,QAAQ,OAAO,MAAgB,GACrD,OAAO,UAAU,QACjB,OAAO,cAAc,IAAI;MAAA,CAC5B;IACL;AAEM,UAAA,IAAI,MAAM,yGACkC;EACtD;;;;;;;;EASO,OAAO,QAAwC,OACtD;AACU,UAAA,EAAE,QAAQ,OAAO,QAAQ,OAAO,mBAAuB,IAAA,KAAK,WAAW,QAAQ,KAAK;AAGtF,aAEAA,UAAQ,OAAO,QAAQ,OAAO,MAAM,GAGpC,sBAEAA,UAAQ,oBAAoB,MAAM;AAGtC,UAAM,eAAe,IAAI,YAAM,mBAAmB,OAAO,QAAQ,CAAC,GAG5D,YAAY,IAAI,UAAU,IAAI,kBAAkB,OAAO,MAAM,GAAG,OAAO,MAAM;AAEnF,WAAA,aAAa,QAAQ,aAAa,WAAW,GAAG,CAAC,GAG1C,aAAa;EACxB;;;;;;;;;EAUO,OAAO,QAAwC,OACtD;AACU,UAAA,EAAE,QAAQ,OAAO,QAAQ,OAAO,mBAAuB,IAAA,KAAK,WAAW,QAAQ,KAAK;AAEtF,WAAA,SAEAA,UAAQ,OAAO,QAAQ,OAAO,MAAM,GAGpC,sBAEAA,UAAQ,oBAAoB,MAAM,GAG/B;EACX;EAEQ,WAAW,QAAwC,OAG3D;AACI,UAAM,WAAW,KAAK;AAEtB,QAAI,CAAC;AAEK,YAAA,IAAI,MAAM,wCAAwC;AAG5D,QAAI,YACA,QAAQ,OACR,qBAAqB,OACrB,eACA,YAAY;AAEZ,eAEI,kBAAkB,gBAElB,gBAAgB,UAIhB,gBAAgB,SAAS,gBAAgB,QAAQ;MAC7C,QAAQ;MACR,YAAY,SAAS;MACrB,aAAa,SAAS;IAAA,CACzB,GACD,YAAY,MAER,UAEA,UAAU,QAAQ,MAAM,OACxB,UAAU,SAAS,MAAM,QACzB,QAAQ;AAKpB,UAAM,KAAK,SAAS;AAEhB,QAAA,eAAA;AAEA,UAAA,aAAa,cAAc,YAAY,YACvC,QAAQ,SAAS,cAAc,OAC/B,QAAQ,OACR,qBAAqB,cAAc,YAAY,YAAY,KACpD,cAAc,YAAY,WAAW,QAAQ,MAEhD,CAAC,WACL;AACa,iBAAA,cAAc,KAAK,aAAa;AAEzC,cAAM,MAAM,cAAc,YAAY,eAAe,SAAS,WAAW;AAErE,YAAI,mBAEJ,SAAS,YAAY,KAAK,IAAI,eAAe;MAErD;IAAA;AAIa,mBAAA,SAAS,YAEjB,UAED,QAAQ,WACR,MAAM,QAAQ,SAAS,QAAQ,YAC/B,MAAM,SAAS,SAAS,SAAS,aAGrC,QAAQ,MACR,qBAAqB,KAAK,6BAC1B,SAAS,cAAc,KAAK;AAG1B,UAAA,QAAQ,KAAK,IAAI,KAAK,MAAM,MAAM,QAAQ,UAAU,GAAG,CAAC,GACxD,SAAS,KAAK,IAAI,KAAK,MAAM,MAAM,SAAS,UAAU,GAAG,CAAC,GAE1D,SAAS,IAAI,WAAW,kBAAkB,QAAQ,MAAM;AAG3D,WAAA,GAAA;MACC,KAAK,MAAM,MAAM,IAAI,UAAU;MAC/B,KAAK,MAAM,MAAM,IAAI,UAAU;MAC/B;MACA;MACA,GAAG;MACH,GAAG;MACH;IACJ,GAEI,cAEA,+CAAe,QAAQ,QAGpB,EAAE,QAAQ,OAAO,QAAQ,OAAO,mBAAmB;EAC9D;;EAGO,UACP;AACI,SAAK,WAAW;EACpB;EAEA,OAAe,OAAO,QAAwC,OAAe,QAC7E;AACU,UAAA,IAAI,SAAS,GACb,IAAI,UAAU,GACd,OAAO,IAAI,WAAW,CAAC;AAE7B,aAAS,IAAI,GAAG,IAAI,GAAG,KACvB;AACI,YAAM,IAAI,IAAI,GACR,KAAK,SAAS,IAAI,KAAK;AAE7B,WAAK,IAAI,OAAO,SAAS,GAAG,IAAI,CAAC,CAAC,GAClC,OAAO,WAAW,GAAG,GAAG,IAAI,CAAC,GAC7B,OAAO,IAAI,MAAM,CAAC;IACtB;EACJ;EAEA,OAAe,oBAAoB,QACnC;AACQ,sBAAkB,sBAElB,SAAS,IAAI,WAAW,OAAO,MAAM;AAGzC,UAAM,IAAI,OAAO;AAEjB,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK,GAC5B;AACU,YAAA,QAAQ,OAAO,IAAI,CAAC;AAE1B,UAAI,UAAU,GACd;AACI,cAAM,IAAI,UAAU;AAEb,eAAA,CAAC,IAAK,OAAO,CAAC,IAAI,IAAK,KAC9B,OAAO,IAAI,CAAC,IAAK,OAAO,IAAI,CAAC,IAAI,IAAK,KACtC,OAAO,IAAI,CAAC,IAAK,OAAO,IAAI,CAAC,IAAI,IAAK;MAC1C;IACJ;EACJ;AACJ;AA1Ta,SAGF,YAA+B;EAClC,MAAM;EACN,MAAM,cAAc;AACxB;AANG,IAAM,UAAN;AA4TP,WAAW,IAAI,OAAO;;;AVlVtBC;AACAA;AACAA;AACAA;;;;;;;;;;;;AWhBO,IAAM,eAAN,MACP;;;;EAUI,YAAY,kBACZ;AACS,SAAA,mBAAmB,kBACxB,KAAK,YAAY;EACrB;;EAGA,aACA;AACI,SAAK,YAAY,KAAK;EAC1B;;;;;EAMA,kBACA;AACI,WAAO,KAAK,cAAc;EAC9B;AACJ;;;ACAA,SAAS,yBAAyB,MAA8B,OAChE;;AACI,MAAI,SAAS;AAGb,OAAI,kCAAM,cAAN,mBAAiB,QAAA;AAEjB,aAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ;AAEvC,UAAI,KAAK,UAAU,CAAC,aAAa,SACjC;AACI,cAAM,cAAc,KAAK,UAAU,CAAC,EAAE;AAEjC,cAAM,SAAS,WAAW,MAE3B,MAAM,KAAK,WAAW,GACtB,SAAS;MAEjB;EAAA;AAID,SAAA;AACX;AASA,SAAS,gBAAgB,MAAe,OACxC;AACQ,MAAA,KAAK,uBAAuB,aAChC;AACI,UAAM,UAAU,KAAK;AAErB,WAAK,MAAM,SAAS,OAAO,KAEvB,MAAM,KAAK,OAAO,GAGf;EACX;AAEO,SAAA;AACX;AASA,SAAS,YAAY,MAA8B,OACnD;AACI,MAAI,KAAK,YAAY,KAAK,oBAAoB,SAC9C;AACU,UAAA,UAAU,KAAK,SAAS;AAE9B,WAAK,MAAM,SAAS,OAAO,KAEvB,MAAM,KAAK,OAAO,GAGf;EACX;AAEO,SAAA;AACX;AASA,SAAS,SAAS,SAAkC,MACpD;AACI,SAAI,gBAAgB,QAGhB,KAAK,WAAW,IAAI,GAEb,QAGJ;AACX;AASA,SAAS,mBAAmB,SAAkC,MAC9D;AACI,MAAI,gBAAgB,WACpB;AACU,UAAA,OAAO,KAAK,aAAA;AAEN,WAAA,YAAA,YAAY,IAAI,GAErB;EACX;AAEO,SAAA;AACX;AASA,SAAS,SAAS,MAA8B,OAChD;AACI,MAAI,gBAAgB,MACpB;AAES,UAAM,SAAS,KAAK,KAAK,KAE1B,MAAM,KAAK,KAAK,KAAK,GAGpB,MAAM,SAAS,IAAI,KAEpB,MAAM,KAAK,IAAI;AAGb,UAAA,UAAU,KAAK,SAAS;AAE9B,WAAK,MAAM,SAAS,OAAO,KAEvB,MAAM,KAAK,OAAO,GAGf;EACX;AAEO,SAAA;AACX;AASA,SAAS,cAAc,MAAiB,OACxC;AACQ,SAAA,gBAAgB,aAEX,MAAM,SAAS,IAAI,KAEpB,MAAM,KAAK,IAAI,GAGZ,QAGJ;AACX;AAoBO,IAAM,eAAN,MAAMC,cACb;;;;EA0DI,YAAY,UACZ;AACI,SAAK,UAAU,IAAI,aAAaA,cAAY,eAAe,GAC3D,KAAK,WAAW,UAChB,KAAK,mBAAmB,MACxB,KAAK,QAAQ,CAAA,GACb,KAAK,WAAW,CAAA,GAChB,KAAK,cAAc,CAAA,GACnB,KAAK,YAAY,CAAA,GACjB,KAAK,UAAU,OACf,KAAK,cAAc,MACnB;AAES,WAAK,SAIV,KAAK,aAAA;IACT,GAGA,KAAK,iBAAiB,QAAQ,GAC9B,KAAK,iBAAiB,aAAa,GACnC,KAAK,iBAAiB,wBAAwB,GAC9C,KAAK,iBAAiB,eAAe,GACrC,KAAK,iBAAiB,WAAW,GAGjC,KAAK,mBAAmB,QAAQ,GAChC,KAAK,mBAAmB,kBAAkB;EAC9C;;;;;;;;EASA,OAAO,MACP;AACW,WAAA,IAAI,QAAQ,CAAC,YACpB;AAGQ,cAEA,KAAK,IAAI,IAAkE,GAI3E,KAAK,MAAM,UAEX,KAAK,UAAU,KAAK,OAAO,GAEtB,KAAK,YAEN,KAAK,UAAU,MACf,OAAO,OAAO,QAAQ,KAAK,MAAM,MAAM,gBAAgB,OAAO,MAKlE,QAAQ;IAAA,CAEf;EACL;;;;;EAMA,OACA;AACe,eAAA,KAAK,aAAa,CAAC;EAClC;;;;;;EAOA,eACA;AACI,SAAA,KAAK,QAAQ,WAAA,GAEN,KAAK,MAAM,UAAU,KAAK,QAAQ,gBAAA,KACzC;AACU,YAAA,OAAO,KAAK,MAAM,CAAC;AACzB,UAAI,WAAW;AAEX,UAAA,QAAQ,CAAC,KAAK,YAAA;AAEd,iBAAS,IAAI,GAAG,MAAM,KAAK,YAAY,QAAQ,IAAI,KAAK;AAEpD,cAAI,KAAK,YAAY,CAAC,EAAE,KAAK,kBAAkB,IAAI,GACnD;AACS,iBAAA,MAAM,MAAM,GACjB,WAAW;AACX;UACJ;MAAA;AAIH,kBAED,KAAK,MAAM,MAAA;IAEnB;AAGA,QAAK,KAAK,MAAM;AAgBZ,aAAO,OAAO,QAAQ,KAAK,MAAM,MAAM,gBAAgB,OAAO;SAflE;AACI,WAAK,UAAU;AAEf,YAAM,YAAY,KAAK,UAAU,MAAM,CAAC;AAExC,WAAK,UAAU,SAAS;AAExB,eAAS,IAAI,GAAG,MAAM,UAAU,QAAQ,IAAI,KAAK;AAE7C,kBAAU,CAAC,EAAA;IAEnB;EAMJ;;;;;;;EAQA,iBAAiB,SACjB;AACI,WAAI,WAEA,KAAK,SAAS,KAAK,OAAO,GAGvB;EACX;;;;;;;EAQA,mBAAmB,YACnB;AACI,WAAI,cAEA,KAAK,YAAY,KAAK,UAAU,GAG7B;EACX;;;;;;;EAQA,IAAI,MACJ;AAGI,aAAS,IAAI,GAAG,MAAM,KAAK,SAAS,QAAQ,IAAI,OAExC,CAAA,KAAK,SAAS,CAAC,EAAE,MAAM,KAAK,KAAK,GAFY;AAEjD;AAOJ,QAAI,gBAAgB;AAEhB,eAAS,IAAI,KAAK,SAAS,SAAS,GAAG,KAAK,GAAG;AAE3C,aAAK,IAAI,KAAK,SAAS,CAAC,CAAC;AAI1B,WAAA;EACX;;EAGA,UACA;AACQ,SAAK,WAEL,OAAO,OAAO,OAAO,KAAK,MAAM,IAAI,GAExC,KAAK,UAAU,OACf,KAAK,WAAW,MAChB,KAAK,cAAc,MACnB,KAAK,WAAW,MAChB,KAAK,YAAY,MACjB,KAAK,QAAQ,MACb,KAAK,UAAU,MACf,KAAK,mBAAmB;EAC5B;AACJ;AA5Qa,aAMK,kBAAkB;AAN7B,IAAM,cAAN;;;AC9NP,OAAO,iBAAiB,UAAU;;;;;;;;;;EAU9B,mBACA;IACI,MACA;AACI,aAAO,YAAY;IACvB;IACA,IAAI,OACJ;AAIQ,kBAAM,YAAY,SAAS,mFAAmF,GAElH,YAAY,kBAAkB;IAClC;EACJ;AACJ,CAAC;;;;;ACfD,SAAS,mBAAmB,UAAmC,MAC/D;AACI,SAAI,gBAAgB,eAKX,KAAK,YAAa,SAAsB,WAAW,KAEnD,SAAsB,QAAQ,KAAK,IAAI,GAGrC,QAGJ;AACX;AASA,SAAS,eAAe,UAAmC,MAC3D;AACI,MAAI,EAAE,gBAAgB;AAEX,WAAA;AAGL,QAAA,EAAE,SAAa,IAAA;AAGhB,OAAA,WAAA,GACL,SAAS,cAAc;AAEjB,QAAA,EAAE,QAAY,IAAA;AAGpB,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KACpC;AACI,UAAM,EAAE,QAAY,IAAA,QAAQ,CAAC,EAAE;AAE3B,eAEA,mBAAmB,UAAU,QAAQ,WAAW;EAExD;AAGK,SAAA,SAAS,aAET,SAAsB,SAAS,KAAK,UAAW,KAAa,qBAAsB,QAAqB,CAAC,GAGtG;AACX;AASA,SAAS,aAAa,MAA8B,OACpD;AACI,SAAI,gBAAgB,YAEhB,MAAM,KAAK,IAAI,GAER,QAGJ;AACX;AA+BO,IAAM,UAAN,cAAsB,YAC7B;;;;EAUI,YAAY,UACZ;AACI,UAAM,QAAQ,GAEd,KAAK,mBAAmB,KAAK,UAG7B,KAAK,iBAAiB,YAAY,GAClC,KAAK,mBAAmB,kBAAkB,GAC1C,KAAK,mBAAmB,cAAc;EAC1C;AACJ;AAtBa,QAGF,YAA+B;EAClC,MAAM;EACN,MAAM,cAAc;AACxB;AAkBJ,WAAW,IAAI,OAAO;;;AC7If,IAAM,cAAN,MACP;;EAWI,YAAY,iBACZ;AACS,SAAA,kBAAkB,iBACvB,KAAK,aAAa;EACtB;;EAGA,aACA;AACS,SAAA,aAAa,KAAK,IAAA;EAC3B;;;;;EAMA,kBACA;AACI,WAAO,KAAK,IAAQ,IAAA,KAAK,aAAa,KAAK;EAC/C;AACJ;;;AfdAC;AACAA;AACAA;;;;AgB6HO,IAAM,eAAN,MAAMC,cACb;;;;;;;;EAsEI,YAAY,SAAgC,MAAS,qBAA6B,MAClF;AAlEA,SAAO,eAAiC,CAAA,GAmE/B,KAAA,WAAW,mBAAmB,UAAU,UAAU,MACvD,KAAK,cAAc,mBAAmB,cAAc,UAAU,KAAK,SAAS,aAC5E,KAAK,WAAW,CAAC,GACjB,KAAK,aAAa,CAClB,GAAA,KAAK,OAAO;AAEN,UAAA,WAAW,KAAK,YAAY;AAE7B,SAAA,aAAa,KAAK,kBAAkB,uBAAuB,WAAW,SAAS,MAAM,KAAK,GAC/F,KAAK,UAAU,KAAK,KAAK,QACzB,KAAK,aAAa,OAAO,KAAK,KAAK,OAAO,GAC1C,KAAK,cAAc,GACnB,KAAK,YAAY;EACrB;;;;;;;;EASQ,kBAAkB,qBAA6B,MACvD;AACI,UAAM,EAAE,MAAU,IAAA,KAAK,KAAK;AAG5B,QAAI,aAAa,YAAM,mBAAmB,oBAAoB,IAAI;AAGlE,WAAI,eAAe,SAGf,aAAa,WAAW,SAAS,GAAG,IAIpC,eAAe,KAEf,KAAK,YAAY,cAAc,UAAU,GAGtC;EACX;;;;;;EAOO,QACP;AACW,WAAA,IAAI,QAAQ,CAAC,YACpB;AACS,WAAA,YAAY,SACjB,KAAK,cAAc,GAEf,KAAK,WAAW,UAAUA,cAAY,cAEtC,KAAK,eAAe,CAAC,GACrB,KAAK,mBAAA,GACL,KAAK,eAIL,KAAA,KAAK,WAAA;IAAW,CAEvB;EACL;;;;;EAMQ,eAAe,mBACvB;AACI,QAAI,aAAa;AACjB,UAAM,YAAYA,cAAY;AAE9B,WAAO,aAAa,oBAAoB,aAAa,aAAa,KAAK,WAAW,UAClF;AACU,YAAA,IAAI,KAAK,WAAW,UAAU,GAC9B,OAAO,KAAK,QAAQ,CAAC,GACrB,OAAO,KAAK;AAElB,UAAI,MACJ;AACQ,YAAA,QAAQ,MACR,OAAO;AACL,cAAA,aAAa,KAAK,YAAY,SAAS,KAAK,aAC5C,KAAK,aAAa,KAAK,OAEvB,OAAO,IAAI;UACb;UACA;UACA,KAAK,MAAM,WAAW,CAAC,IAAI,KAAK;UAChC,KAAK,MAAM,WAAW,CAAC,IAAI,KAAK;QAAA;AAGhC,aAAK,UAEL,QAAQ,IAAI;UACR,KAAK,MAAM,KAAK,CAAC,IAAI,KAAK;UAC1B,KAAK,MAAM,KAAK,CAAC,IAAI,KAAK;UAC1B,KAAK,MAAM,KAAK,CAAC,IAAI,KAAK;UAC1B,KAAK,MAAM,KAAK,CAAC,IAAI,KAAK;QAAA,IAK9B,QAAQ,IAAI;UACR,KAAK,MAAM,KAAK,CAAC,IAAI,KAAK;UAC1B,KAAK,MAAM,KAAK,CAAC,IAAI,KAAK;UAC1B,KAAK,MAAM,KAAK,CAAC,IAAI,KAAK;UAC1B,KAAK,MAAM,KAAK,CAAC,IAAI,KAAK;QAAA,GAK9B,KAAK,YAAY,SAAS,KAAK,qBAE/B,OAAO,IAAI;UACP,KAAK,MAAM,KAAK,iBAAiB,CAAC,IAAI,KAAK;UAC3C,KAAK,MAAM,KAAK,iBAAiB,CAAC,IAAI,KAAK;UAC3C,KAAK,MAAM,KAAK,CAAC,IAAI,KAAK;UAC1B,KAAK,MAAM,KAAK,CAAC,IAAI,KAAK;QAIlC,IAAA,KAAK,SAAS,CAAC,IAAI,IAAI;UACnB,KAAK;UACL;UACA;UACA;UACA,KAAK,UAAU,IAAI;UACnB,KAAK;UACL,KAAK;QAAA,GAIT,QAAQ,WAAW,KAAK,SAAS,CAAC,GAAG,EAAE,SAAA,CAAU;MACrD;AAEA;IACJ;EACJ;;EAGQ,qBACR;AACI,UAAM,aAAa,KAAK,KAAK,cAAc,CAAA;AAE3C,eAAW,YAAY,YACvB;AACS,WAAA,WAAW,QAAiC,IAAI,CAAA;AACrD,eAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,EAAE,QAAQ,KACjD;AACI,cAAM,YAAY,WAAW,QAAQ,EAAE,CAAC;AAExC,aAAK,WAAW,QAAQ,EAAE,KAAK,KAAK,SAAS,SAAS,CAAC;MAC3D;IACJ;EACJ;;EAGQ,iBACR;AACI,UAAM,WAAW,KAAK;AAEjB,SAAA,YAAY,MACjB,KAAK,cAAc,GACnB,SAAS,KAAK,MAAM,KAAK,QAAQ;EACrC;;EAGQ,aACR;AACS,SAAA,eAAe,KAAK,cAAcA,cAAY,UAAU,GAC7D,KAAK,eACL,WAAW,MACX;AACQ,WAAK,cAAcA,cAAY,aAAa,KAAK,WAAW,SAE5D,KAAK,WAAA,KAIL,KAAK,mBAAmB,GACxB,KAAK,eAAe;IAAA,GAEzB,CAAC;EACR;;;;;EAMO,QAAQ,cAAc,OAC7B;;AACI,eAAW,KAAK,KAAK;AAEZ,WAAA,SAAS,CAAC,EAAE,QAAQ;AAE7B,SAAK,UAAU,MACf,KAAK,aAAa,MAClB,KAAK,OAAO,MACZ,KAAK,WAAW,MACZ,iBAEA,UAAK,aAAL,mBAAe,WACf,KAAK,YAAY,QAAQ,IAE7B,KAAK,WAAW,MAChB,KAAK,cAAc,MACnB,KAAK,eAAe,CAAA;EACxB;AACJ;AAjSa,aAGO,aAAa;AAH1B,IAAM,cAAN;;;;;ACpIP,IAAM,cAAc,CAAC,OAAO,OAAO,QAAQ,QAAQ,MAAM;AAEzD,SAAS,mBAAmB,MAAgB,OAAoB,iBAChE;AACI,QAAM,MAA2B,CAAA;AAEjC,MAAA,KAAK,QAAQ,CAAC,QACd;AACI,QAAI,GAAG,IAAI;EAAA,CACd,GAED,OAAO,KAAK,MAAM,QAAQ,EAAE,QAAQ,CAAC,QACrC;AACI,QAAI,GAAG,IAAI,MAAM,SAAS,GAAG;EAAA,CAChC,GAEG,CAAC,iBACL;AACI,UAAM,WAAW,YAAM,KAAK,QAAQ,KAAK,CAAC,CAAC;AAE3C,UAAM,aAAa,QAAQ,CAAC,MAAmB,MAC/C;AACI,YAAM,OAAO,mBAAmB,CAAC,GAAG,QAAQ,IAAI,MAAM,KAAK,KAAK,oBAAoB,CAAC,CAAC,EAAE,GAAG,MAAM,IAAI;AAE9F,aAAA,OAAO,KAAK,IAAI;IAAA,CAC1B;EACL;AAEO,SAAA;AACX;AAOO,IAAM,mBAAmB;EAC5B,WAAW,cAAc;;EAEzB,OAAO;IACH,MAAM,CAAC,UAAuB,iBAAiB;IAC/C,oBAAoB,CAAC,MAAgB,UAAuB,mBAAmB,MAAM,OAAO,KAAK;EACrG;;EAEA,UAAU;IACN,MAAM,CAAC,UACP;AAEI,YAAM,QADU,MAAM,MAAM,GAAG,EAAE,CAAC,EACZ,MAAM,GAAG,GACzB,YAAY,MAAM,IAAA,GAClB,SAAS,MAAM,IAAA;AAErB,aAAO,cAAc,UAAU,YAAY,SAAS,MAAM;IAC9D;IACA,OAAO,CAAC,UACR;;AACU,YAAA,QAAQ,MAAM,MAAM,GAAG;AAEtB,aAAA;QACH,YAAY,aAAW,cAAS,cAAc,KAAK,KAAK,MAAjC,mBAAqC,OAAM,GAAG;QACrE,QAAQ,MAAM,MAAM,SAAS,CAAC;QAC9B,KAAK;MAAA;IAEb;EACJ;;;;;;;;EAQA,QAAQ;IACJ,MAAM;IAEN,WAAW;MACP,MAAM,cAAc;MACpB,UAAU,qBAAqB;IACnC;IAEA,MAAM,UAAU,OAAwB,SACxC;AACY,aAAA,YAAM,KAAK,QAAQ,QAAQ,GAAG,EAAE,YAAA,MAAkB,WAAW,CAAC,CAAC,MAAM;IACjF;IAEA,MAAM,MAAM,OAAwB,SAAwB,QAC5D;;AACI,UAAI,WAAW,YAAM,KAAK,QAAQ,QAAQ,GAAG;AAEzC,kBAAY,SAAS,YAAY,GAAG,MAAO,SAAS,SAAS,MAE7D,YAAY;AAGZ,UAAA,YAAY,WAAW,MAAM,KAAK;AAE1B,kBAAA,iBAAiB,WAAW,QAAQ,GAAG;AAG7C,YAAA,WADS,MAAM,OAAO,KAAc,CAAC,SAAS,CAAC,GAC9B,SAAS,GAC1B,cAAc,IAAI;QACpB,QAAQ;QACR;QACA,QAAQ;MAAA;AAGZ,YAAM,YAAY,MAAA;AAKZ,YAAA,cAAa,oCAAO,SAAP,mBAAa;AAE5B,UAAA,MAAM,QAAQ,UAAU,GAC5B;AACI,cAAM,WAAoD,CAAA;AAE1D,mBAAW,QAAQ,YACnB;AACI,cAAI,OAAO,QAAS;AAEhB;AAGJ,cAAI,UAAU,WAAW;AAGrB,yBAAQ,SAAR,mBAAc,qBAKlB,UAAU,iBAAiB,SAAS,QAAQ,GAAG,GAE/C,SAAS,KAAK,OAAO,KAAmC;YACpD,KAAK;YACL,MAAM;cACF,iBAAiB;YACrB;UACH,CAAA,CAAC;QACN;AAEA,cAAM,MAAM,MAAM,QAAQ,IAAI,QAAQ;AAEtC,oBAAY,eAAe,KAC3B,IAAI,QAAQ,CAAC,SACb;AACI,eAAK,eAAe,CAAC,WAAW,EAAE,OAAO,YAAY,aAAa,OAAO,CAAC,OAAQ,OAAO,IAAK,CAAC;QAAA,CAClG;MACL;AAEO,aAAA;IACX;IAEA,OAAO,aACP;AACI,kBAAY,QAAQ,IAAI;IAC5B;EACJ;AACJ;AAEA,WAAW,IAAI,gBAAgB;;;AjBxJ/BC;AACAA;;;;;;;;;;AkB4DO,IAAM,iBAAN,MAAMC,wBAAsB,UACnC;EADO,cAAA;AAAA,UAAA,GAAA,SAAA,GA6DH,KAAQ,SAAsB,CAAA,GAG9B,KAAQ,aAAuB,CAAA,GAG/B,KAAQ,cAAc,IAGtB,KAAQ,aAAa;EAAA;;;;;;;;;;EAWrB,OAAO,KAAK,eACZ;AACI,WAAO,IAAIA;MAAc,OAAO,KAAKA,gBAAc,cAAc,EAC5D,OAAO,CAAC,KAAK,UAAU,EAAE,GAAG,KAAK,CAAC,IAAI,GAAG,cAAc,IAA4B,EAAE,IAAI,CAAA,CAAE;IAAA;EAEpG;;EAGO,aACP;AACQ,SAAK,OAAO,SAAS,MAErB,KAAK,OAAO,QAAQ,CAAC,SACrB;AACQ,UAAA,gBAAgB,KAAK,GAAG,GAC5B,KAAK,QACD,KAAK,SAAS,MAEV,KAAK,YAEL,SAAS,MAAM,OAAO,KAAK,QAAQ,GAEvC,OAAOA,gBAAc,eAAe,KAAK,WAAW;IAAA,CAE3D,GACD,KAAK,aAAa,SAClB,KAAK,OAAO,SAAS,GACrB,KAAK,WACL,KAAK,aAAa;EAE1B;;;;;;EAOO,SAAS,KAAa,UAAyC,CAAA,GACtE;AACU,UAAA,EAAE,eAAmB,IAAAA;AAGvB,QAAA,eAAe,GAAG,GACtB;AACU,YAAA,OAAO,eAAe,GAAG;AAE/B,aAAA,KAAK,OAAO,KAAK,IAAI,GACrB,KAAK,QACL,KAAK,WACL,KAAK,aAAa,MAEX,QAAQ,QAAA;IACnB;AAEA,WAAO,SAAS,QAAQ,MAAM,GAAG,EAC5B,KAAK,CAAC,aAAa,SAAS,KAAM,CAAA,EAClC,KAAK,OAAO,SAAS,IAAI,QAA0B,CAAC,SAAS,WAC9D;AACI,YAAM,MAAM,IAAI,gBAAgB,IAAI,GAC9B,SAAS,IAAI,WAAA;AAEnB,aAAO,SAAS,MAAM,QAAQ,CAAC,KAAK,OAAO,MAAgB,CAAC,GAC5D,OAAO,UAAU,QACjB,OAAO,cAAc,IAAI;IAC5B,CAAA,CAAC,EACD,KAAK,OAAO,CAAC,KAAK,OAAO,MAC1B;AACU,YAAA,OAAkB,OAAO,OAAO;QAClC,QAAQ,YAAM,KAAK,SAAS,KAAK,YAAM,KAAK,QAAQ,GAAG,CAAC;QACxD,QAAQ;QACR,OAAO;QACP,SAAS;QACT;QACA;QACA,MAAM;QACN,aAAa;QACb,UAAU;MAAA,GACX,OAAO;AAEK,qBAAA,GAAG,IAAI,MACtB,KAAK,OAAO,KAAK,IAAI,GACrB,KAAK;AAGC,YAAA,WAAW,IAAI,SAAS,KAAK,QAAQ,OAAO,KAAK,GAAG,KAAK;QAC3D,QAAQ,KAAK;QACb,OAAO,KAAK;QACZ,SAAS,KAAK;MAAA,CACjB;AAGD,WAAK,WAAW,UAEhB,MAAM,SAAS,KAAA,GACf,SAAS,MAAM,IAAI,QAAQ,GAC3B,MAAM,SAAS,MAAM,OAErB,KAAK,WACL,KAAK,aAAa;IAAA,CACrB;EACT;;;;;;;;;;EAWO,eAAe,OACtB;AACU,UAAA,QAAQ,MAAM,OAAO,CAAC,MAAM,CAAC,KAAK,WAAW,SAAS,CAAC,CAAC;AAE1D,UAAM,SAAS,MAEf,KAAK,WAAW,KAAK,GAAG,KAAK,GAC7B,KAAK;EAEb;;;;;;;EAQO,kBAAkB,OACzB;AACU,UAAA,WAAW,MAAM,OAAO,CAAC,MAAM,KAAK,WAAW,SAAS,CAAC,CAAC;AAE5D,aAAS,SAAS,MAElB,KAAK,aAAa,KAAK,WAAW,OAAO,CAAC,MAAM,CAAC,SAAS,SAAS,CAAC,CAAC,GACrE,KAAK;EAEb;;;;;;EAOO,MAAM,OACb;AACW,WAAA;MACH,oBAAoB,KAAK;MACzB;MACA;MACA,UAAU,KAAK,eAAe,KAAK,IAAI,CAAC;MACxC,cAAe,KAAK,QAAmB;MACvC,gBAAgB,KAAK,UAAU;MAC/B,gBAAgB,KAAK,UAAU;MAC/B,eAAe,KAAK,SAAS;MAC7B,iBAAiB,KAAK,WAAW;MACjC,mBAAmB,KAAK,aAAa;MACrC,eAAe,KAAK,KAAK;MACzB,YAAY,KAAK,OAAO;MACxB,gBAAgB,KAAK,UAAU;MAC/B,GAAG,KAAK,aAAa,CAAC,gBAAgB,KAAK,UAAU,IAAI,IAAI,CAAC;MAC9D,GAAG,KAAK,WAAW;QACf,cAAc,KAAK,aAAa,cAAc,YAAY;QAC1D,cAAc,KAAK,aAAa;MAAA,IAChC,CAAC;MACL,GAAG,KAAK,kBAAkB;QACtB,8BAA8B,KAAK,eAAe;QAClD,8BAA8B,KAAK,eAAe,KAAK,MAAM,CAAC;QAC9D,sBAAsB,KAAK,eAAe;QAC1C,sBAAsB,KAAK,eAAe,KAAK,MAAM,CAAC;QACtD;MAAA,IACA,CAAC;MACL,GAAG,KAAK,aAAa,CAAC,KAAK,gBAAgB,CAAC,IAAI,CAAC;MACjD,GAAG,KAAK;IAAA,EACV,KAAK,GAAG;EACd;;EAGO,cACP;AACI,WAAO,KAAK,OAAO,OAAO,CAAC,QAAQ,SAC/B,GAAG,MAAM;;gCAEW,KAAK,MAAM;4BACf,KAAK,OAAO;+BACT,KAAK,MAAM;8BACZ,KAAK,KAAK;gCACR,KAAK,OAAO;gBAEjC,KAAK,WAAW;EACvB;;EAGA,IAAW,aACX;AACI,WAAO,KAAK;EAChB;EACA,IAAW,WAAW,OACtB;AACQ,SAAK,gBAAgB,UAErB,KAAK,cAAc,OACnB,KAAK;EAEb;;;;;EAMQ,eAAe,OACvB;AAMI,WALI,MAAM,QAAQ,KAAK,MAEnB,QAAQ,YAAM,QAAQ,KAAK,IAG3B,OAAO,SAAU,WAEV,YAAM,WAAW,KAAK,IAG1B;EACX;;EAGQ,kBACR;AACI,QAAI,QAAQ,KAAK,eAAe,KAAK,eAAe;AAC9C,UAAA,QAAQ,KAAK,iBACb,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,eAAe,IAAI,KAAK,kBAAkB,GACvE,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,eAAe,IAAI,KAAK,kBAAkB;AAGzE,UAAM,WAAW,GAAG,KAAK,QAAQ,MAEjC,UAAU,QAAQ,MAAM,GAAG,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG;AAG3D,UAAM,WAAW,GAAG,CAAC,MAAM,CAAC;AAE5B,WAAI,KAAK,iBAAiB,IAEf,gBAAgB,QAAQ,IAAI,KAAK,cAAc,MAAM,KAAK,KAG9D,gBAAgB,QAAQ,IAAI,KAAK;EAC5C;;EAGO,QACP;AACW,WAAA,OAAO,MAAMA,gBAAc,cAAc;EACpD;;;;;;EAOO,eACP;AACU,UAAA,EAAE,YAAY,eAAmB,IAAA;AAEvC,WAAA,KAAK,aAAa,OAMd,KAAK,YAAY,KAAK,OAAO,SAAS,KAAK,iBAEpC,IAAI,QAAc,CAAC,YAAY,WAAW,SAAS,GAAG,CAAC,IAG3D,QAAQ,QAAA;EACnB;;;;;EAMA,IAAY,WACZ;AACI,UAAM,EAAE,UAAc,IAAA,SAAS,QAAQ,aAAa;AAE5C,WAAA,iCAAkC,KAAK,SAAS;EAC5D;EAEA,IAAa,kBAAkB,QAC/B;AACI,YAAQ,KAAK,gEAAgE;EACjF;EACA,IAAa,oBACb;AACI,WAAO,MAAM;EACjB;EAEA,IAAa,iBAAiB,QAC9B;AACI,YAAQ,KAAK,+DAA+D;EAChF;EACA,IAAa,mBACb;AACI,WAAO,MAAM;EACjB;EAEA,IAAa,WAAW,QACxB;AACI,YAAQ,KAAK,yDAAyD;EAC1E;EACA,IAAa,aACb;AACI,WAAO,MAAM;EACjB;EAEA,IAAa,KAAK,QAClB;AACI,YAAQ,KAAK,mDAAmD;EACpE;EACA,IAAa,OACb;AACI,WAAO,MAAM;EACjB;EAEA,IAAa,aAAa,QAC1B;AACI,YAAQ,KAAK,2DAA2D;EAC5E;EACA,IAAa,eACb;AACI,WAAO,MAAM;EACjB;EAEA,IAAa,QAAQ,QACrB;AACI,YAAQ,KAAK,sDAAsD;EACvE;EACA,IAAa,UACb;AACI,WAAO,MAAM;EACjB;EAEA,IAAa,SAAS,QACtB;AACI,YAAQ,KAAK,uDAAuD;EACxE;EACA,IAAa,WACb;AACI,WAAO,MAAM;EACjB;AACJ;AAhba,eAGK,iBAA4C,CAAC;;;;AAHlD,eASc,iBAAiC;;EAEpD,OAAO;;EAEP,YAAY;;EAEZ,YAAY;;EAEZ,iBAAiB;;;;;;EAMjB,iBAAiB,KAAK,KAAK;;EAE3B,gBAAgB;;EAEhB,iBAAiB;;EAEjB,oBAAoB;;EAEpB,MAAM;;EAEN,YAAY;;EAEZ,UAAU;;EAEV,WAAW;;EAEX,aAAa;;EAEb,YAAY;;EAEZ,eAAe;;EAEf,YAAY;;EAEZ,SAAS;;EAET,QAAQ;;EAER,iBAAiB;;EAEjB,YAAY;;EAEZ,UAAU;;EAEV,eAAe;AACnB;AA1DG,IAAM,gBAAN;;;AC3DA,IAAM,YAAN,MAAMC,mBAAiB,OAC9B;;;;;;;EAuDI,YAAY,OAAO,IAAI,QAAyD,CAAA,GAChF;AACI,UAAM,QAAQ,KAAK,GAlBvB,KAAQ,QAAuB,MAC/B,KAAQ,SAA+B,MACvC,KAAQ,kBAAkB,MAC1B,KAAQ,eAAe,IACvB,KAAQ,QAAQ,OAChB,KAAQ,YAAY,GAGpB,KAAQ,YAAY;AAYhB,UAAM,QAAQ,IAAI,MAAA,GACZ,UAAU,QAAQ,KAAoB,OAAO;MAC/C,WAAW,SAAS;MACpB,iBAAiB;QACb,UAAU;MACd;IAAA,CACH;AAEO,YAAA,OAAO,IAAI,UAAA,GACnB,QAAQ,OAAO,IAAI,UAEnB,GAAA,KAAK,UAAU;AAET,UAAA,QAAQ,8BACR,UAAU,gCACV,UAAU,SAAS,gBAAgB,OAAO,KAAK,GAC/C,gBAAgB,SAAS,gBAAgB,OAAO,eAAe,GAC/D,aAAa,SAAS,gBAAgB,SAAS,KAAK,GACpD,eAAe,SAAS,gBAAgB,SAAS,OAAO;AAG9D,kBAAc,aAAa,SAAS,OAAO,GAC3C,cAAc,aAAa,UAAU,OAAO,GAC5C,cAAc,MAAM,WAAW,UAC/B,QAAQ,YAAY,aAAa,GAEjC,KAAK,WAAWA,WAAS,iBACzB,KAAK,YAAYA,WAAS,kBAC1B,KAAK,cAAc,YACnB,KAAK,gBAAgB,cACrB,KAAK,WAAW,SAChB,KAAK,iBAAiB,eACtB,KAAK,eAAe,YAAY,YAAY,GAC5C,KAAK,eAAe,YAAY,UAAU,GAC1C,KAAK,SAAS,OACd,KAAK,aAAa,IAAI,MACtB,GAAA,KAAK,kBAAkBA,WAAS,uBAChC,KAAK,cAAcA,WAAS,qBAAqB,SAAS,YAC1D,KAAK,OAAO,MACZ,KAAK,QAAQ;EACjB;;;;;;;;;;;EAYA,YAAY,WACZ;;AACI,UAAM,EAAE,MAAM,OAAO,WAAW,IAAI,OAAO,OAAO;MAC9C,MAAM,KAAK;MACX,OAAO,KAAK;MACZ,YAAY,KAAK;IAAA,GAClB,SAAS;AAEL,WAAA,OAAO,KAAK,aAAa;MAC5B,WAAW;MACX,OAAO,MAAM,MAAM,UAAU;IAChC,CAAA,GACD,KAAK,cAAc,cAAc,MAAM,YAAA,GAGvC,SAAS,KAAK,YAAY,KAAK,QAAQ;AACjC,UAAA,gBAAgB,KAAK,YAAY,sBAAsB;AAE7D,SAAK,SAAS,OAAA;AAER,UAAA,EAAE,OAAO,OAAW,IAAA;AAIlB,KAAA,QAAQ,KAAK,YAAY,SAAS,KAAK,cAEvC,QAAQ,KAAK,8FAA8F;AAInH,UAAM,eAAe,KAAK,IAAI,KAAK,UAAU,KAAK,KAAK,KAAK,CAAC,GACvD,gBAAgB,KAAK,IAAI,KAAK,WAAW,KAAK,KAAK,MAAM,CAAC;AAE3D,WAAA,KAAA,SAAS,aAAa,SAAS,aAAa,SAAU,CAAA,GAC3D,KAAK,SAAS,aAAa,UAAU,cAAc,SAAU,CAAA,GAGzD,SAAS,KAAK,UAEd,KAAK,YAAY,YAAY,KAAK,QAElC,UAAU,KAAK,WAEf,OAAO,OAAO,KAAK,aAAa,EAAE,QAAO,UAAK,WAAL,mBAAa,MAAM,YAAU,CAAG,GACzE,KAAK,cAAc,eAAc,UAAK,WAAL,mBAAa,gBAG3C;MACH,OAAO,eAAgB,MAAM,UAAU;MACvC,QAAQ,gBAAiB,MAAM,UAAU;IAAA;EAEjD;;;;;;;EAQA,MAAM,WAAW,eAAe,MAChC;AACI,UAAM,EAAE,OAAO,QAAQ,OAAO,YAAY,UAAc,IAAA;AASxD,QANI,KAAK,iBAAiB,MAAM,YAE5B,KAAK,QAAQ,MACb,KAAK,eAAe,MAAM,UAG1B,CAAC,KAAK,SAAS;AAEf;AAGJ,UAAM,EAAE,OAAO,OAAO,IAAI,KAAK,YAAY;AAKrC,UAAA,QAAQ,UAAU,QAAQ,KAAK,KAAM,KAAK,IAAI,GAAG,KAAK,CAAE,GAC9D,MAAM,SAAS,UAAU,SAAS,KAAK,KAAM,KAAK,IAAI,GAAG,MAAM,CAAE,GAEjE,KAAK;AAEL,UAAM,WAAW,KAAK;AAEhB,UAAA,IAAI,QAAc,CAAC,YACzB;AACI,gBAAU,SAAS,YACnB;AACQ,YAAA,WAAW,KAAK,WACpB;AACY,kBAAA;AAER;QACJ;AAGA,cAAM,MAAM,aAAA,GAKZ,MAAM,MAAM,UAAU,KACtB,UAAU,SAAS,MACnB,UAAU,MAAM,IAGhB,KAAK,cAAA,GACL,QAAA;MAAQ;AAEZ,YAAM,SAAS,IAAI,cAAA,EAAgB,kBAAkB,KAAK,QAAQ;AAElE,gBAAU,MAAM,mCAAmC,mBAAmB,MAAM,CAAC;IAAA,CAChF;EACL;;EAGA,IAAW,SACX;AACI,WAAO,KAAK;EAChB;;;;;EAMA,gBACA;AACI,UAAM,EAAE,OAAO,SAAS,QAAQ,OAAO,WAAW,IAAI,MAChD,EAAE,QAAQ,IAAI,OACd,EAAE,YAAA,IAAgB;AAEhB,YAAA,KAAK,QAAQ,QAAQ,OAAO,QAAQ,MAAM,QAAQ,YAC1D,QAAQ,KAAK,SAAS,QAAQ,OAAO,SAAS,MAAM,SAAS,YAC7D,QAAQ,KAAK,IAAI,CAAC,SAClB,QAAQ,KAAK,IAAI,CAAC,SAElB,QAAQ,KAAK,QAAQ,QAAQ,OAAO,QAAS,UAAU,GACvD,QAAQ,KAAK,SAAS,QAAQ,OAAO,SAAU,UAAU,GAGzD,KAAK,iBAAA,GAEL,YAAY,YAAY,MAAM,OAAO,MAAM,QAAQ,UAAU,GAE7D,KAAK,QAAQ;EACjB;;;;;;EAOA,QAAQ,UACR;AACQ,SAAK,mBAAmB,KAAK,gBAAgB,SAAS,eAEtD,KAAK,cAAc,SAAS,YAC5B,KAAK,QAAQ,OAGjB,KAAK,WAAW,IAAI,GAEpB,MAAM,QAAQ,QAAQ;EAC1B;;;;;;EAOA,cAAc,UACd;AACQ,SAAK,mBAAmB,KAAK,gBAAgB,SAAS,eAEtD,KAAK,cAAc,SAAS,YAC5B,KAAK,QAAQ,OAGjB,KAAK,WAAW,IAAI,GAIpB,MAAM,cAAc,QAAQ;EAChC;;;;;;EAOA,eAAe,MACf;AACI,WAAA,KAAK,WAAW,IAAI,GAEb,MAAM,eAAe,IAAI;EACpC;EAEA,mBACA;AACS,SAAA,WAAW,IAAI,GACpB,KAAK,kBAAA,GAEJ,KAAa,QAAQ,QAAQ,KAAK,UAAU;EACjD;;;;;EAMA,iBACA;AACI,SAAK,QAAQ;EACjB;;;;;EAMA,QAAQ,SACR;;AACQ,WAAO,WAAY,cAEnB,UAAU,EAAE,UAAU,QAAA,IAG1B,UAAU,OAAO,OAAO,CAAA,GAAIA,WAAS,uBAAuB,OAAO,GAEnE,MAAM,QAAQ,OAAO;AAErB,UAAM,aAAkB;AAGpB,SAAK,eAEL,UAAK,WAAL,mBAAa,eAEjB,KAAK,SAAS,aACd,UAAK,aAAL,mBAAe,UACf,KAAK,WAAW,aAChB,UAAK,gBAAL,mBAAkB,UAClB,KAAK,cAAc,aACnB,UAAK,mBAAL,mBAAqB,UACrB,KAAK,iBAAiB,aACtB,UAAK,kBAAL,mBAAoB,UACpB,KAAK,gBAAgB,YAErB,KAAK,WAAW,MAAM,IACtB,KAAK,WAAW,SAAS,MACzB,KAAK,aAAa,YAClB,KAAK,OAAO,MAAM,IAClB,KAAK,SAAS;EAClB;;;;;EAMA,IAAI,QACJ;AACI,WAAA,KAAK,WAAW,IAAI,GAEb,KAAK,IAAI,KAAK,MAAM,CAAC,IAAI,KAAK,OAAO,QAAQ,KAAK;EAC7D;EAEA,IAAI,MAAM,OACV;AACI,SAAK,WAAW,IAAI;AAEpB,UAAM,IAAI,YAAM,KAAK,KAAK,MAAM,CAAC,KAAK;AAEjC,SAAA,MAAM,IAAI,IAAI,QAAQ,KAAK,OAAO,QAAQ,KAAK,YACpD,KAAK,SAAS;EAClB;;;;;EAMA,IAAI,SACJ;AACI,WAAA,KAAK,WAAW,IAAI,GAEb,KAAK,IAAI,KAAK,MAAM,CAAC,IAAI,KAAK,OAAO,SAAS,KAAK;EAC9D;EAEA,IAAI,OAAO,OACX;AACI,SAAK,WAAW,IAAI;AAEpB,UAAM,IAAI,YAAM,KAAK,KAAK,MAAM,CAAC,KAAK;AAEjC,SAAA,MAAM,IAAI,IAAI,QAAQ,KAAK,OAAO,SAAS,KAAK,YACrD,KAAK,UAAU;EACnB;;EAGA,IAAI,QACJ;AACI,WAAO,KAAK;EAChB;EAEA,IAAI,MAAM,OACV;AAEQ,SAAK,WAAW,UAKpB,QAAQ,SAAS,CAAA,GAEb,iBAAiB,iBAEjB,KAAK,YAAY,OACjB,KAAK,SAAS,SAGT,iBAAiB,aAEtB,QAAQ,KAAK,+EAA+E,GAE5F,KAAK,YAAY,MACjB,KAAK,SAAS,cAAc,KAAK,KAAK,MAItC,KAAK,YAAY,MACjB,KAAK,SAAS,IAAI,cAAc,KAAK,IAGzC,KAAK,eAAe,IACpB,KAAK,QAAQ;EACjB;;;;;;;EAQA,IAAI,OACJ;AACI,WAAO,KAAK;EAChB;EAEA,IAAI,KAAK,MACT;AACI,WAAO,OAAO,SAAS,MAAM,SAAS,QAAQ,SAAS,SAAY,MAAM,IAAI,GAC7E,OAAO,KAAK,aAAa,IAAI,GAEzB,KAAK,UAAU,SAInB,KAAK,QAAQ,MACb,KAAK,QAAQ;EACjB;;;;;;;EAQA,IAAI,aACJ;AACI,WAAO,KAAK;EAChB;EAEA,IAAI,WAAW,OACf;AACI,SAAK,kBAAkB,OAEnB,KAAK,gBAAgB,UAKzB,KAAK,cAAc,OACnB,KAAK,QAAQ;EACjB;;;;;;EAOQ,aAAa,MACrB;AACW,WAAA,KACF,QAAQ,UAAU,OAAO,EACzB,QAAQ,UAAU,OAAO,EACzB,QAAQ,YAAY,QAAQ;EACrC;AACJ;AA7fa,UASK,wBAAyC;EACnD,SAAS;EACT,UAAU;EACV,aAAa;AACjB;AAbS,UAgBK,kBAAkB;AAhBvB,UAmBK,mBAAmB;AAnBxB,UAyBK,wBAAwB;AAzBnC,IAAM,WAAN;",
  "names": ["fragment", "fragment", "fragment", "fragment", "fragment", "vertex", "vertex", "fragment", "fragment", "fragment", "_EventSystem", "nativeEvent", "type", "init_lib", "INTERNAL_FORMATS", "extensions", "ext", "internalFormat", "dataOffset", "extensions", "init_lib", "_Extract", "init_lib", "_BasePrepare", "init_lib", "_Spritesheet", "init_lib", "_HTMLTextStyle", "_HTMLText"]
}
